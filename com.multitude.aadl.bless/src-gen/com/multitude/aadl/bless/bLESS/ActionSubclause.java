/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS;

import org.eclipse.emf.ecore.EObject;

import org.osate.aadl2.AnnexSubclause;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Action Subclause</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#isNo_proof <em>No proof</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getThrows_clause <em>Throws clause</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getAssert_clause <em>Assert clause</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getPrecondition <em>Precondition</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getPostcondition <em>Postcondition</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getInvariant <em>Invariant</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getElq <em>Elq</em>}</li>
 * </ul>
 *
 * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause()
 * @model
 * @generated
 */
public interface ActionSubclause extends EObject, AnnexSubclause
{
  /**
   * Returns the value of the '<em><b>No proof</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>No proof</em>' attribute.
   * @see #setNo_proof(boolean)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_No_proof()
   * @model
   * @generated
   */
  boolean isNo_proof();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#isNo_proof <em>No proof</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>No proof</em>' attribute.
   * @see #isNo_proof()
   * @generated
   */
  void setNo_proof(boolean value);

  /**
   * Returns the value of the '<em><b>Throws clause</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Throws clause</em>' containment reference.
   * @see #setThrows_clause(ThrowsClause)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Throws_clause()
   * @model containment="true"
   * @generated
   */
  ThrowsClause getThrows_clause();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getThrows_clause <em>Throws clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Throws clause</em>' containment reference.
   * @see #getThrows_clause()
   * @generated
   */
  void setThrows_clause(ThrowsClause value);

  /**
   * Returns the value of the '<em><b>Assert clause</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Assert clause</em>' containment reference.
   * @see #setAssert_clause(AssertClause)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Assert_clause()
   * @model containment="true"
   * @generated
   */
  AssertClause getAssert_clause();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getAssert_clause <em>Assert clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Assert clause</em>' containment reference.
   * @see #getAssert_clause()
   * @generated
   */
  void setAssert_clause(AssertClause value);

  /**
   * Returns the value of the '<em><b>Precondition</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Precondition</em>' containment reference.
   * @see #setPrecondition(Assertion)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Precondition()
   * @model containment="true"
   * @generated
   */
  Assertion getPrecondition();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getPrecondition <em>Precondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Precondition</em>' containment reference.
   * @see #getPrecondition()
   * @generated
   */
  void setPrecondition(Assertion value);

  /**
   * Returns the value of the '<em><b>Postcondition</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Postcondition</em>' containment reference.
   * @see #setPostcondition(Assertion)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Postcondition()
   * @model containment="true"
   * @generated
   */
  Assertion getPostcondition();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getPostcondition <em>Postcondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Postcondition</em>' containment reference.
   * @see #getPostcondition()
   * @generated
   */
  void setPostcondition(Assertion value);

  /**
   * Returns the value of the '<em><b>Invariant</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Invariant</em>' containment reference.
   * @see #setInvariant(Assertion)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Invariant()
   * @model containment="true"
   * @generated
   */
  Assertion getInvariant();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getInvariant <em>Invariant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Invariant</em>' containment reference.
   * @see #getInvariant()
   * @generated
   */
  void setInvariant(Assertion value);

  /**
   * Returns the value of the '<em><b>Elq</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Elq</em>' containment reference.
   * @see #setElq(ExistentialLatticeQuantification)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getActionSubclause_Elq()
   * @model containment="true"
   * @generated
   */
  ExistentialLatticeQuantification getElq();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.ActionSubclause#getElq <em>Elq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Elq</em>' containment reference.
   * @see #getElq()
   * @generated
   */
  void setElq(ExistentialLatticeQuantification value);

} // ActionSubclause
