/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.PeriodShift;
import com.multitude.aadl.bless.bLESS.Subexpression;
import com.multitude.aadl.bless.bLESS.TimedExpression;
import com.multitude.aadl.bless.bLESS.TimedSubject;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Timed Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#getSubject <em>Subject</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#getTick <em>Tick</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#isAt <em>At</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#getTime <em>Time</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#isCaret <em>Caret</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TimedExpressionImpl#getShift <em>Shift</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimedExpressionImpl extends ElementImpl implements TimedExpression
{
  /**
   * The cached value of the '{@link #getSubject() <em>Subject</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubject()
   * @generated
   * @ordered
   */
  protected TimedSubject subject;

  /**
   * The default value of the '{@link #getTick() <em>Tick</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTick()
   * @generated
   * @ordered
   */
  protected static final String TICK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTick() <em>Tick</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTick()
   * @generated
   * @ordered
   */
  protected String tick = TICK_EDEFAULT;

  /**
   * The default value of the '{@link #isAt() <em>At</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAt()
   * @generated
   * @ordered
   */
  protected static final boolean AT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAt() <em>At</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAt()
   * @generated
   * @ordered
   */
  protected boolean at = AT_EDEFAULT;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected Subexpression time;

  /**
   * The default value of the '{@link #isCaret() <em>Caret</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCaret()
   * @generated
   * @ordered
   */
  protected static final boolean CARET_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCaret() <em>Caret</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCaret()
   * @generated
   * @ordered
   */
  protected boolean caret = CARET_EDEFAULT;

  /**
   * The cached value of the '{@link #getShift() <em>Shift</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShift()
   * @generated
   * @ordered
   */
  protected PeriodShift shift;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimedExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getTimedExpression();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimedSubject getSubject()
  {
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubject(TimedSubject newSubject, NotificationChain msgs)
  {
    TimedSubject oldSubject = subject;
    subject = newSubject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__SUBJECT, oldSubject, newSubject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubject(TimedSubject newSubject)
  {
    if (newSubject != subject)
    {
      NotificationChain msgs = null;
      if (subject != null)
        msgs = ((InternalEObject)subject).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__SUBJECT, null, msgs);
      if (newSubject != null)
        msgs = ((InternalEObject)newSubject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__SUBJECT, null, msgs);
      msgs = basicSetSubject(newSubject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__SUBJECT, newSubject, newSubject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTick()
  {
    return tick;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTick(String newTick)
  {
    String oldTick = tick;
    tick = newTick;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__TICK, oldTick, tick));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAt()
  {
    return at;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAt(boolean newAt)
  {
    boolean oldAt = at;
    at = newAt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__AT, oldAt, at));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subexpression getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(Subexpression newTime, NotificationChain msgs)
  {
    Subexpression oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(Subexpression newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isCaret()
  {
    return caret;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCaret(boolean newCaret)
  {
    boolean oldCaret = caret;
    caret = newCaret;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__CARET, oldCaret, caret));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodShift getShift()
  {
    return shift;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetShift(PeriodShift newShift, NotificationChain msgs)
  {
    PeriodShift oldShift = shift;
    shift = newShift;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__SHIFT, oldShift, newShift);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShift(PeriodShift newShift)
  {
    if (newShift != shift)
    {
      NotificationChain msgs = null;
      if (shift != null)
        msgs = ((InternalEObject)shift).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__SHIFT, null, msgs);
      if (newShift != null)
        msgs = ((InternalEObject)newShift).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TIMED_EXPRESSION__SHIFT, null, msgs);
      msgs = basicSetShift(newShift, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TIMED_EXPRESSION__SHIFT, newShift, newShift));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.TIMED_EXPRESSION__SUBJECT:
        return basicSetSubject(null, msgs);
      case BLESSPackage.TIMED_EXPRESSION__TIME:
        return basicSetTime(null, msgs);
      case BLESSPackage.TIMED_EXPRESSION__SHIFT:
        return basicSetShift(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.TIMED_EXPRESSION__SUBJECT:
        return getSubject();
      case BLESSPackage.TIMED_EXPRESSION__TICK:
        return getTick();
      case BLESSPackage.TIMED_EXPRESSION__AT:
        return isAt();
      case BLESSPackage.TIMED_EXPRESSION__TIME:
        return getTime();
      case BLESSPackage.TIMED_EXPRESSION__CARET:
        return isCaret();
      case BLESSPackage.TIMED_EXPRESSION__SHIFT:
        return getShift();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.TIMED_EXPRESSION__SUBJECT:
        setSubject((TimedSubject)newValue);
        return;
      case BLESSPackage.TIMED_EXPRESSION__TICK:
        setTick((String)newValue);
        return;
      case BLESSPackage.TIMED_EXPRESSION__AT:
        setAt((Boolean)newValue);
        return;
      case BLESSPackage.TIMED_EXPRESSION__TIME:
        setTime((Subexpression)newValue);
        return;
      case BLESSPackage.TIMED_EXPRESSION__CARET:
        setCaret((Boolean)newValue);
        return;
      case BLESSPackage.TIMED_EXPRESSION__SHIFT:
        setShift((PeriodShift)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.TIMED_EXPRESSION__SUBJECT:
        setSubject((TimedSubject)null);
        return;
      case BLESSPackage.TIMED_EXPRESSION__TICK:
        setTick(TICK_EDEFAULT);
        return;
      case BLESSPackage.TIMED_EXPRESSION__AT:
        setAt(AT_EDEFAULT);
        return;
      case BLESSPackage.TIMED_EXPRESSION__TIME:
        setTime((Subexpression)null);
        return;
      case BLESSPackage.TIMED_EXPRESSION__CARET:
        setCaret(CARET_EDEFAULT);
        return;
      case BLESSPackage.TIMED_EXPRESSION__SHIFT:
        setShift((PeriodShift)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.TIMED_EXPRESSION__SUBJECT:
        return subject != null;
      case BLESSPackage.TIMED_EXPRESSION__TICK:
        return TICK_EDEFAULT == null ? tick != null : !TICK_EDEFAULT.equals(tick);
      case BLESSPackage.TIMED_EXPRESSION__AT:
        return at != AT_EDEFAULT;
      case BLESSPackage.TIMED_EXPRESSION__TIME:
        return time != null;
      case BLESSPackage.TIMED_EXPRESSION__CARET:
        return caret != CARET_EDEFAULT;
      case BLESSPackage.TIMED_EXPRESSION__SHIFT:
        return shift != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (tick: ");
    result.append(tick);
    result.append(", at: ");
    result.append(at);
    result.append(", caret: ");
    result.append(caret);
    result.append(')');
    return result.toString();
  }

} //TimedExpressionImpl
