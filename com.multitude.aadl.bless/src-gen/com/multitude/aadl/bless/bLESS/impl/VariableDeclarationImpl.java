/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.Variable;
import com.multitude.aadl.bless.bLESS.VariableDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isNonvolatile <em>Nonvolatile</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isShared <em>Shared</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isConstant <em>Constant</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isSpread <em>Spread</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isFinal <em>Final</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#isAssign <em>Assign</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.VariableDeclarationImpl#getAssertion <em>Assertion</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableDeclarationImpl extends ElementImpl implements VariableDeclaration
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Variable variable;

  /**
   * The default value of the '{@link #isNonvolatile() <em>Nonvolatile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNonvolatile()
   * @generated
   * @ordered
   */
  protected static final boolean NONVOLATILE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNonvolatile() <em>Nonvolatile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNonvolatile()
   * @generated
   * @ordered
   */
  protected boolean nonvolatile = NONVOLATILE_EDEFAULT;

  /**
   * The default value of the '{@link #isShared() <em>Shared</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShared()
   * @generated
   * @ordered
   */
  protected static final boolean SHARED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isShared() <em>Shared</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShared()
   * @generated
   * @ordered
   */
  protected boolean shared = SHARED_EDEFAULT;

  /**
   * The default value of the '{@link #isConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConstant()
   * @generated
   * @ordered
   */
  protected static final boolean CONSTANT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConstant()
   * @generated
   * @ordered
   */
  protected boolean constant = CONSTANT_EDEFAULT;

  /**
   * The default value of the '{@link #isSpread() <em>Spread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSpread()
   * @generated
   * @ordered
   */
  protected static final boolean SPREAD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSpread() <em>Spread</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSpread()
   * @generated
   * @ordered
   */
  protected boolean spread = SPREAD_EDEFAULT;

  /**
   * The default value of the '{@link #isFinal() <em>Final</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFinal()
   * @generated
   * @ordered
   */
  protected static final boolean FINAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFinal() <em>Final</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFinal()
   * @generated
   * @ordered
   */
  protected boolean final_ = FINAL_EDEFAULT;

  /**
   * The default value of the '{@link #isAssign() <em>Assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssign()
   * @generated
   * @ordered
   */
  protected static final boolean ASSIGN_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAssign() <em>Assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssign()
   * @generated
   * @ordered
   */
  protected boolean assign = ASSIGN_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getAssertion() <em>Assertion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertion()
   * @generated
   * @ordered
   */
  protected Assertion assertion;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getVariableDeclaration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariable(Variable newVariable, NotificationChain msgs)
  {
    Variable oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__VARIABLE, oldVariable, newVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(Variable newVariable)
  {
    if (newVariable != variable)
    {
      NotificationChain msgs = null;
      if (variable != null)
        msgs = ((InternalEObject)variable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__VARIABLE, null, msgs);
      if (newVariable != null)
        msgs = ((InternalEObject)newVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__VARIABLE, null, msgs);
      msgs = basicSetVariable(newVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__VARIABLE, newVariable, newVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNonvolatile()
  {
    return nonvolatile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNonvolatile(boolean newNonvolatile)
  {
    boolean oldNonvolatile = nonvolatile;
    nonvolatile = newNonvolatile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__NONVOLATILE, oldNonvolatile, nonvolatile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isShared()
  {
    return shared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShared(boolean newShared)
  {
    boolean oldShared = shared;
    shared = newShared;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__SHARED, oldShared, shared));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(boolean newConstant)
  {
    boolean oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSpread()
  {
    return spread;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpread(boolean newSpread)
  {
    boolean oldSpread = spread;
    spread = newSpread;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__SPREAD, oldSpread, spread));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFinal()
  {
    return final_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFinal(boolean newFinal)
  {
    boolean oldFinal = final_;
    final_ = newFinal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__FINAL, oldFinal, final_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAssign()
  {
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssign(boolean newAssign)
  {
    boolean oldAssign = assign;
    assign = newAssign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__ASSIGN, oldAssign, assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assertion getAssertion()
  {
    return assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssertion(Assertion newAssertion, NotificationChain msgs)
  {
    Assertion oldAssertion = assertion;
    assertion = newAssertion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__ASSERTION, oldAssertion, newAssertion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssertion(Assertion newAssertion)
  {
    if (newAssertion != assertion)
    {
      NotificationChain msgs = null;
      if (assertion != null)
        msgs = ((InternalEObject)assertion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__ASSERTION, null, msgs);
      if (newAssertion != null)
        msgs = ((InternalEObject)newAssertion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.VARIABLE_DECLARATION__ASSERTION, null, msgs);
      msgs = basicSetAssertion(newAssertion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.VARIABLE_DECLARATION__ASSERTION, newAssertion, newAssertion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.VARIABLE_DECLARATION__VARIABLE:
        return basicSetVariable(null, msgs);
      case BLESSPackage.VARIABLE_DECLARATION__EXPRESSION:
        return basicSetExpression(null, msgs);
      case BLESSPackage.VARIABLE_DECLARATION__ASSERTION:
        return basicSetAssertion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.VARIABLE_DECLARATION__VARIABLE:
        return getVariable();
      case BLESSPackage.VARIABLE_DECLARATION__NONVOLATILE:
        return isNonvolatile();
      case BLESSPackage.VARIABLE_DECLARATION__SHARED:
        return isShared();
      case BLESSPackage.VARIABLE_DECLARATION__CONSTANT:
        return isConstant();
      case BLESSPackage.VARIABLE_DECLARATION__SPREAD:
        return isSpread();
      case BLESSPackage.VARIABLE_DECLARATION__FINAL:
        return isFinal();
      case BLESSPackage.VARIABLE_DECLARATION__ASSIGN:
        return isAssign();
      case BLESSPackage.VARIABLE_DECLARATION__EXPRESSION:
        return getExpression();
      case BLESSPackage.VARIABLE_DECLARATION__ASSERTION:
        return getAssertion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.VARIABLE_DECLARATION__VARIABLE:
        setVariable((Variable)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__NONVOLATILE:
        setNonvolatile((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__SHARED:
        setShared((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__CONSTANT:
        setConstant((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__SPREAD:
        setSpread((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__FINAL:
        setFinal((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__ASSIGN:
        setAssign((Boolean)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__ASSERTION:
        setAssertion((Assertion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.VARIABLE_DECLARATION__VARIABLE:
        setVariable((Variable)null);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__NONVOLATILE:
        setNonvolatile(NONVOLATILE_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__SHARED:
        setShared(SHARED_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__SPREAD:
        setSpread(SPREAD_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__FINAL:
        setFinal(FINAL_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__ASSIGN:
        setAssign(ASSIGN_EDEFAULT);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)null);
        return;
      case BLESSPackage.VARIABLE_DECLARATION__ASSERTION:
        setAssertion((Assertion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.VARIABLE_DECLARATION__VARIABLE:
        return variable != null;
      case BLESSPackage.VARIABLE_DECLARATION__NONVOLATILE:
        return nonvolatile != NONVOLATILE_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__SHARED:
        return shared != SHARED_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__CONSTANT:
        return constant != CONSTANT_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__SPREAD:
        return spread != SPREAD_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__FINAL:
        return final_ != FINAL_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__ASSIGN:
        return assign != ASSIGN_EDEFAULT;
      case BLESSPackage.VARIABLE_DECLARATION__EXPRESSION:
        return expression != null;
      case BLESSPackage.VARIABLE_DECLARATION__ASSERTION:
        return assertion != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (nonvolatile: ");
    result.append(nonvolatile);
    result.append(", shared: ");
    result.append(shared);
    result.append(", constant: ");
    result.append(constant);
    result.append(", spread: ");
    result.append(spread);
    result.append(", final: ");
    result.append(final_);
    result.append(", assign: ");
    result.append(assign);
    result.append(')');
    return result.toString();
  }

} //VariableDeclarationImpl
