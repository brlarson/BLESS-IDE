/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.IndexExpression;
import com.multitude.aadl.bless.bLESS.IndexExpressionOrRange;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index Expression Or Range</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.IndexExpressionOrRangeImpl#getLeft_hand_side <em>Left hand side</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.IndexExpressionOrRangeImpl#isDd <em>Dd</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.IndexExpressionOrRangeImpl#getRight_hand_side <em>Right hand side</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexExpressionOrRangeImpl extends ElementImpl implements IndexExpressionOrRange
{
  /**
   * The cached value of the '{@link #getLeft_hand_side() <em>Left hand side</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_hand_side()
   * @generated
   * @ordered
   */
  protected IndexExpression left_hand_side;

  /**
   * The default value of the '{@link #isDd() <em>Dd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDd()
   * @generated
   * @ordered
   */
  protected static final boolean DD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDd() <em>Dd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDd()
   * @generated
   * @ordered
   */
  protected boolean dd = DD_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight_hand_side() <em>Right hand side</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_hand_side()
   * @generated
   * @ordered
   */
  protected IndexExpression right_hand_side;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexExpressionOrRangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getIndexExpressionOrRange();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexExpression getLeft_hand_side()
  {
    return left_hand_side;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft_hand_side(IndexExpression newLeft_hand_side, NotificationChain msgs)
  {
    IndexExpression oldLeft_hand_side = left_hand_side;
    left_hand_side = newLeft_hand_side;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE, oldLeft_hand_side, newLeft_hand_side);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft_hand_side(IndexExpression newLeft_hand_side)
  {
    if (newLeft_hand_side != left_hand_side)
    {
      NotificationChain msgs = null;
      if (left_hand_side != null)
        msgs = ((InternalEObject)left_hand_side).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE, null, msgs);
      if (newLeft_hand_side != null)
        msgs = ((InternalEObject)newLeft_hand_side).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE, null, msgs);
      msgs = basicSetLeft_hand_side(newLeft_hand_side, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE, newLeft_hand_side, newLeft_hand_side));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDd()
  {
    return dd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDd(boolean newDd)
  {
    boolean oldDd = dd;
    dd = newDd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.INDEX_EXPRESSION_OR_RANGE__DD, oldDd, dd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexExpression getRight_hand_side()
  {
    return right_hand_side;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight_hand_side(IndexExpression newRight_hand_side, NotificationChain msgs)
  {
    IndexExpression oldRight_hand_side = right_hand_side;
    right_hand_side = newRight_hand_side;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE, oldRight_hand_side, newRight_hand_side);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight_hand_side(IndexExpression newRight_hand_side)
  {
    if (newRight_hand_side != right_hand_side)
    {
      NotificationChain msgs = null;
      if (right_hand_side != null)
        msgs = ((InternalEObject)right_hand_side).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE, null, msgs);
      if (newRight_hand_side != null)
        msgs = ((InternalEObject)newRight_hand_side).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE, null, msgs);
      msgs = basicSetRight_hand_side(newRight_hand_side, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE, newRight_hand_side, newRight_hand_side));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE:
        return basicSetLeft_hand_side(null, msgs);
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE:
        return basicSetRight_hand_side(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE:
        return getLeft_hand_side();
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__DD:
        return isDd();
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE:
        return getRight_hand_side();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE:
        setLeft_hand_side((IndexExpression)newValue);
        return;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__DD:
        setDd((Boolean)newValue);
        return;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE:
        setRight_hand_side((IndexExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE:
        setLeft_hand_side((IndexExpression)null);
        return;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__DD:
        setDd(DD_EDEFAULT);
        return;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE:
        setRight_hand_side((IndexExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__LEFT_HAND_SIDE:
        return left_hand_side != null;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__DD:
        return dd != DD_EDEFAULT;
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE__RIGHT_HAND_SIDE:
        return right_hand_side != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dd: ");
    result.append(dd);
    result.append(')');
    return result.toString();
  }

} //IndexExpressionOrRangeImpl
