/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.ANumber;
import com.multitude.aadl.bless.bLESS.Action;
import com.multitude.aadl.bless.bLESS.ActionSubclause;
import com.multitude.aadl.bless.bLESS.ActionTimeout;
import com.multitude.aadl.bless.bLESS.ActualParameter;
import com.multitude.aadl.bless.bLESS.AddSub;
import com.multitude.aadl.bless.bLESS.Alternative;
import com.multitude.aadl.bless.bLESS.ArrayRange;
import com.multitude.aadl.bless.bLESS.ArrayRangeList;
import com.multitude.aadl.bless.bLESS.ArrayType;
import com.multitude.aadl.bless.bLESS.AssertClause;
import com.multitude.aadl.bless.bLESS.AssertedAction;
import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.AssertionEnumeration;
import com.multitude.aadl.bless.bLESS.AssertionFunctionValue;
import com.multitude.aadl.bless.bLESS.AssertionLibrary;
import com.multitude.aadl.bless.bLESS.AssertionNumericExpression;
import com.multitude.aadl.bless.bLESS.Assignment;
import com.multitude.aadl.bless.bLESS.BAAlternative;
import com.multitude.aadl.bless.bLESS.BLESSAlternative;
import com.multitude.aadl.bless.bLESS.BLESSFactory;
import com.multitude.aadl.bless.bLESS.BLESSGrammarRoots;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BLESSSubclause;
import com.multitude.aadl.bless.bLESS.BasicAction;
import com.multitude.aadl.bless.bLESS.BehaviorActions;
import com.multitude.aadl.bless.bLESS.BehaviorState;
import com.multitude.aadl.bless.bLESS.BehaviorTime;
import com.multitude.aadl.bless.bLESS.BehaviorTransition;
import com.multitude.aadl.bless.bLESS.BooleanExpression;
import com.multitude.aadl.bless.bLESS.BooleanType;
import com.multitude.aadl.bless.bLESS.CaseChoice;
import com.multitude.aadl.bless.bLESS.CaseExpression;
import com.multitude.aadl.bless.bLESS.CatchClause;
import com.multitude.aadl.bless.bLESS.CatchClauseTerm;
import com.multitude.aadl.bless.bLESS.CombinableOperation;
import com.multitude.aadl.bless.bLESS.CommunicationAction;
import com.multitude.aadl.bless.bLESS.Computation;
import com.multitude.aadl.bless.bLESS.ConditionValuePair;
import com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction;
import com.multitude.aadl.bless.bLESS.ConditionalExpression;
import com.multitude.aadl.bless.bLESS.Conjunction;
import com.multitude.aadl.bless.bLESS.Constant;
import com.multitude.aadl.bless.bLESS.CountingQuantification;
import com.multitude.aadl.bless.bLESS.Disjunction;
import com.multitude.aadl.bless.bLESS.DispatchCondition;
import com.multitude.aadl.bless.bLESS.DispatchConjunction;
import com.multitude.aadl.bless.bLESS.DispatchExpression;
import com.multitude.aadl.bless.bLESS.DispatchTrigger;
import com.multitude.aadl.bless.bLESS.DoUntilLoop;
import com.multitude.aadl.bless.bLESS.ElseAlternative;
import com.multitude.aadl.bless.bLESS.ElseifAlternative;
import com.multitude.aadl.bless.bLESS.EnumerationPair;
import com.multitude.aadl.bless.bLESS.EnumerationType;
import com.multitude.aadl.bless.bLESS.EnumerationValue;
import com.multitude.aadl.bless.bLESS.EventTrigger;
import com.multitude.aadl.bless.bLESS.ExceptionLibrary;
import com.multitude.aadl.bless.bLESS.ExecuteCondition;
import com.multitude.aadl.bless.bLESS.ExecuteTimeout;
import com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification;
import com.multitude.aadl.bless.bLESS.ExistentialQuantification;
import com.multitude.aadl.bless.bLESS.Exp;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.ExpressionOrAny;
import com.multitude.aadl.bless.bLESS.ForLoop;
import com.multitude.aadl.bless.bLESS.ForallVariable;
import com.multitude.aadl.bless.bLESS.FormalActual;
import com.multitude.aadl.bless.bLESS.FormalActualList;
import com.multitude.aadl.bless.bLESS.FormalExpressionPair;
import com.multitude.aadl.bless.bLESS.FreezePort;
import com.multitude.aadl.bless.bLESS.FunctionParameters;
import com.multitude.aadl.bless.bLESS.GhostVariable;
import com.multitude.aadl.bless.bLESS.GhostVariables;
import com.multitude.aadl.bless.bLESS.GuardedAction;
import com.multitude.aadl.bless.bLESS.IndexExpression;
import com.multitude.aadl.bless.bLESS.IndexExpressionOrRange;
import com.multitude.aadl.bless.bLESS.InternalCondition;
import com.multitude.aadl.bless.bLESS.InvariantClause;
import com.multitude.aadl.bless.bLESS.Invocation;
import com.multitude.aadl.bless.bLESS.IssueException;
import com.multitude.aadl.bless.bLESS.LockingAction;
import com.multitude.aadl.bless.bLESS.LogicVariables;
import com.multitude.aadl.bless.bLESS.LogicalOperator;
import com.multitude.aadl.bless.bLESS.ModeCondition;
import com.multitude.aadl.bless.bLESS.MultDiv;
import com.multitude.aadl.bless.bLESS.NamedAssertion;
import com.multitude.aadl.bless.bLESS.NamelessAssertion;
import com.multitude.aadl.bless.bLESS.NamelessEnumeration;
import com.multitude.aadl.bless.bLESS.NamelessFunction;
import com.multitude.aadl.bless.bLESS.NonNumericProperty;
import com.multitude.aadl.bless.bLESS.NullType;
import com.multitude.aadl.bless.bLESS.NumericExpression;
import com.multitude.aadl.bless.bLESS.Otherwise;
import com.multitude.aadl.bless.bLESS.ParenthesizedSubexpression;
import com.multitude.aadl.bless.bLESS.PartialName;
import com.multitude.aadl.bless.bLESS.Pause;
import com.multitude.aadl.bless.bLESS.PeriodShift;
import com.multitude.aadl.bless.bLESS.PortInput;
import com.multitude.aadl.bless.bLESS.PortName;
import com.multitude.aadl.bless.bLESS.PortOutput;
import com.multitude.aadl.bless.bLESS.Predicate;
import com.multitude.aadl.bless.bLESS.Priority;
import com.multitude.aadl.bless.bLESS.ProductQuantification;
import com.multitude.aadl.bless.bLESS.PropertyField;
import com.multitude.aadl.bless.bLESS.PropertyReference;
import com.multitude.aadl.bless.bLESS.QuantifiedVariables;
import com.multitude.aadl.bless.bLESS.Quantity;
import com.multitude.aadl.bless.bLESS.QuantityType;
import com.multitude.aadl.bless.bLESS.Range;
import com.multitude.aadl.bless.bLESS.RecordField;
import com.multitude.aadl.bless.bLESS.RecordTerm;
import com.multitude.aadl.bless.bLESS.RecordType;
import com.multitude.aadl.bless.bLESS.RecordValue;
import com.multitude.aadl.bless.bLESS.Relation;
import com.multitude.aadl.bless.bLESS.RootDeclaration;
import com.multitude.aadl.bless.bLESS.SimultaneousAssignment;
import com.multitude.aadl.bless.bLESS.StatesSection;
import com.multitude.aadl.bless.bLESS.StringType;
import com.multitude.aadl.bless.bLESS.SubProgramParameter;
import com.multitude.aadl.bless.bLESS.Subexpression;
import com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch;
import com.multitude.aadl.bless.bLESS.SubprogramCall;
import com.multitude.aadl.bless.bLESS.SumQuantification;
import com.multitude.aadl.bless.bLESS.ThrowsClause;
import com.multitude.aadl.bless.bLESS.TimedExpression;
import com.multitude.aadl.bless.bLESS.TimedSubject;
import com.multitude.aadl.bless.bLESS.Transitions;
import com.multitude.aadl.bless.bLESS.TriggerLogicalExpression;
import com.multitude.aadl.bless.bLESS.Type;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;
import com.multitude.aadl.bless.bLESS.TypeLibrary;
import com.multitude.aadl.bless.bLESS.TypeOrReference;
import com.multitude.aadl.bless.bLESS.UnaryOperator;
import com.multitude.aadl.bless.bLESS.UnitDeclaration;
import com.multitude.aadl.bless.bLESS.UnitExtension;
import com.multitude.aadl.bless.bLESS.UnitFactor;
import com.multitude.aadl.bless.bLESS.UnitFormula;
import com.multitude.aadl.bless.bLESS.UnitLibrary;
import com.multitude.aadl.bless.bLESS.UnitName;
import com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification;
import com.multitude.aadl.bless.bLESS.UniversalQuantification;
import com.multitude.aadl.bless.bLESS.Value;
import com.multitude.aadl.bless.bLESS.ValueName;
import com.multitude.aadl.bless.bLESS.Variable;
import com.multitude.aadl.bless.bLESS.VariableDeclaration;
import com.multitude.aadl.bless.bLESS.VariableList;
import com.multitude.aadl.bless.bLESS.VariablesSection;
import com.multitude.aadl.bless.bLESS.WhenThrow;
import com.multitude.aadl.bless.bLESS.WhileLoop;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BLESSFactoryImpl extends EFactoryImpl implements BLESSFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BLESSFactory init()
  {
    try
    {
      BLESSFactory theBLESSFactory = (BLESSFactory)EPackage.Registry.INSTANCE.getEFactory(BLESSPackage.eNS_URI);
      if (theBLESSFactory != null)
      {
        return theBLESSFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BLESSFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BLESSFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BLESSPackage.BLESS_GRAMMAR_ROOTS: return createBLESSGrammarRoots();
      case BLESSPackage.BLESS_SUBCLAUSE: return createBLESSSubclause();
      case BLESSPackage.UNIT_LIBRARY: return createUnitLibrary();
      case BLESSPackage.ASSERTION_LIBRARY: return createAssertionLibrary();
      case BLESSPackage.EXCEPTION_LIBRARY: return createExceptionLibrary();
      case BLESSPackage.ACTION_SUBCLAUSE: return createActionSubclause();
      case BLESSPackage.INVARIANT_CLAUSE: return createInvariantClause();
      case BLESSPackage.VARIABLES_SECTION: return createVariablesSection();
      case BLESSPackage.STATES_SECTION: return createStatesSection();
      case BLESSPackage.BEHAVIOR_STATE: return createBehaviorState();
      case BLESSPackage.TRANSITIONS: return createTransitions();
      case BLESSPackage.BEHAVIOR_TRANSITION: return createBehaviorTransition();
      case BLESSPackage.PRIORITY: return createPriority();
      case BLESSPackage.DISPATCH_CONDITION: return createDispatchCondition();
      case BLESSPackage.DISPATCH_EXPRESSION: return createDispatchExpression();
      case BLESSPackage.SUBPROGRAM_ACCESS_DISPATCH: return createSubprogramAccessDispatch();
      case BLESSPackage.DISPATCH_CONJUNCTION: return createDispatchConjunction();
      case BLESSPackage.DISPATCH_TRIGGER: return createDispatchTrigger();
      case BLESSPackage.PORT_NAME: return createPortName();
      case BLESSPackage.EXECUTE_CONDITION: return createExecuteCondition();
      case BLESSPackage.EXECUTE_TIMEOUT: return createExecuteTimeout();
      case BLESSPackage.OTHERWISE: return createOtherwise();
      case BLESSPackage.MODE_CONDITION: return createModeCondition();
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION: return createTriggerLogicalExpression();
      case BLESSPackage.EVENT_TRIGGER: return createEventTrigger();
      case BLESSPackage.LOGICAL_OPERATOR: return createLogicalOperator();
      case BLESSPackage.INTERNAL_CONDITION: return createInternalCondition();
      case BLESSPackage.ASSERT_CLAUSE: return createAssertClause();
      case BLESSPackage.EXISTENTIAL_LATTICE_QUANTIFICATION: return createExistentialLatticeQuantification();
      case BLESSPackage.QUANTIFIED_VARIABLES: return createQuantifiedVariables();
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION: return createUniversalLatticeQuantification();
      case BLESSPackage.FORALL_VARIABLE: return createForallVariable();
      case BLESSPackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case BLESSPackage.FUNCTION_PARAMETERS: return createFunctionParameters();
      case BLESSPackage.FORMAL_EXPRESSION_PAIR: return createFormalExpressionPair();
      case BLESSPackage.BEHAVIOR_ACTIONS: return createBehaviorActions();
      case BLESSPackage.ASSERTED_ACTION: return createAssertedAction();
      case BLESSPackage.ACTION: return createAction();
      case BLESSPackage.BASIC_ACTION: return createBasicAction();
      case BLESSPackage.COMBINABLE_OPERATION: return createCombinableOperation();
      case BLESSPackage.COMMUNICATION_ACTION: return createCommunicationAction();
      case BLESSPackage.SUBPROGRAM_CALL: return createSubprogramCall();
      case BLESSPackage.FORMAL_ACTUAL_LIST: return createFormalActualList();
      case BLESSPackage.FORMAL_ACTUAL: return createFormalActual();
      case BLESSPackage.SUB_PROGRAM_PARAMETER: return createSubProgramParameter();
      case BLESSPackage.PORT_OUTPUT: return createPortOutput();
      case BLESSPackage.PORT_INPUT: return createPortInput();
      case BLESSPackage.ASSIGNMENT: return createAssignment();
      case BLESSPackage.EXPRESSION_OR_ANY: return createExpressionOrAny();
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT: return createSimultaneousAssignment();
      case BLESSPackage.ALTERNATIVE: return createAlternative();
      case BLESSPackage.BLESS_ALTERNATIVE: return createBLESSAlternative();
      case BLESSPackage.GUARDED_ACTION: return createGuardedAction();
      case BLESSPackage.WHILE_LOOP: return createWhileLoop();
      case BLESSPackage.FOR_LOOP: return createForLoop();
      case BLESSPackage.DO_UNTIL_LOOP: return createDoUntilLoop();
      case BLESSPackage.THROWS_CLAUSE: return createThrowsClause();
      case BLESSPackage.CATCH_CLAUSE: return createCatchClause();
      case BLESSPackage.CATCH_CLAUSE_TERM: return createCatchClauseTerm();
      case BLESSPackage.WHEN_THROW: return createWhenThrow();
      case BLESSPackage.COMPUTATION: return createComputation();
      case BLESSPackage.BA_ALTERNATIVE: return createBAAlternative();
      case BLESSPackage.ELSEIF_ALTERNATIVE: return createElseifAlternative();
      case BLESSPackage.ELSE_ALTERNATIVE: return createElseAlternative();
      case BLESSPackage.ISSUE_EXCEPTION: return createIssueException();
      case BLESSPackage.LOCKING_ACTION: return createLockingAction();
      case BLESSPackage.FREEZE_PORT: return createFreezePort();
      case BLESSPackage.PAUSE: return createPause();
      case BLESSPackage.ACTION_TIMEOUT: return createActionTimeout();
      case BLESSPackage.BEHAVIOR_TIME: return createBehaviorTime();
      case BLESSPackage.EXCEPTION: return createException();
      case BLESSPackage.GHOST_VARIABLES: return createGhostVariables();
      case BLESSPackage.GHOST_VARIABLE: return createGhostVariable();
      case BLESSPackage.ASSERTION: return createAssertion();
      case BLESSPackage.NAMED_ASSERTION: return createNamedAssertion();
      case BLESSPackage.NAMELESS_ASSERTION: return createNamelessAssertion();
      case BLESSPackage.NAMELESS_FUNCTION: return createNamelessFunction();
      case BLESSPackage.NAMELESS_ENUMERATION: return createNamelessEnumeration();
      case BLESSPackage.PREDICATE: return createPredicate();
      case BLESSPackage.ASSERTION_NUMERIC_EXPRESSION: return createAssertionNumericExpression();
      case BLESSPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case BLESSPackage.NUMERIC_EXPRESSION: return createNumericExpression();
      case BLESSPackage.EXPRESSION: return createExpression();
      case BLESSPackage.DISJUNCTION: return createDisjunction();
      case BLESSPackage.CONJUNCTION: return createConjunction();
      case BLESSPackage.RELATION: return createRelation();
      case BLESSPackage.ADD_SUB: return createAddSub();
      case BLESSPackage.MULT_DIV: return createMultDiv();
      case BLESSPackage.EXP: return createExp();
      case BLESSPackage.SUBEXPRESSION: return createSubexpression();
      case BLESSPackage.TIMED_EXPRESSION: return createTimedExpression();
      case BLESSPackage.TIMED_SUBJECT: return createTimedSubject();
      case BLESSPackage.PARENTHESIZED_SUBEXPRESSION: return createParenthesizedSubexpression();
      case BLESSPackage.UNARY_OPERATOR: return createUnaryOperator();
      case BLESSPackage.RANGE: return createRange();
      case BLESSPackage.CONDITIONAL_EXPRESSION: return createConditionalExpression();
      case BLESSPackage.VALUE: return createValue();
      case BLESSPackage.ENUMERATION_VALUE: return createEnumerationValue();
      case BLESSPackage.CONSTANT: return createConstant();
      case BLESSPackage.NON_NUMERIC_PROPERTY: return createNonNumericProperty();
      case BLESSPackage.VARIABLE: return createVariable();
      case BLESSPackage.VALUE_NAME: return createValueName();
      case BLESSPackage.PARTIAL_NAME: return createPartialName();
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE: return createIndexExpressionOrRange();
      case BLESSPackage.PERIOD_SHIFT: return createPeriodShift();
      case BLESSPackage.INDEX_EXPRESSION: return createIndexExpression();
      case BLESSPackage.CASE_EXPRESSION: return createCaseExpression();
      case BLESSPackage.CASE_CHOICE: return createCaseChoice();
      case BLESSPackage.LOGIC_VARIABLES: return createLogicVariables();
      case BLESSPackage.SUM_QUANTIFICATION: return createSumQuantification();
      case BLESSPackage.PRODUCT_QUANTIFICATION: return createProductQuantification();
      case BLESSPackage.COUNTING_QUANTIFICATION: return createCountingQuantification();
      case BLESSPackage.UNIVERSAL_QUANTIFICATION: return createUniversalQuantification();
      case BLESSPackage.EXISTENTIAL_QUANTIFICATION: return createExistentialQuantification();
      case BLESSPackage.RECORD_TERM: return createRecordTerm();
      case BLESSPackage.RECORD_VALUE: return createRecordValue();
      case BLESSPackage.INVOCATION: return createInvocation();
      case BLESSPackage.ACTUAL_PARAMETER: return createActualParameter();
      case BLESSPackage.VARIABLE_LIST: return createVariableList();
      case BLESSPackage.ASSERTION_FUNCTION_VALUE: return createAssertionFunctionValue();
      case BLESSPackage.CONDITIONAL_ASSERTION_FUNCTION: return createConditionalAssertionFunction();
      case BLESSPackage.CONDITION_VALUE_PAIR: return createConditionValuePair();
      case BLESSPackage.ASSERTION_ENUMERATION: return createAssertionEnumeration();
      case BLESSPackage.ENUMERATION_PAIR: return createEnumerationPair();
      case BLESSPackage.TYPE_LIBRARY: return createTypeLibrary();
      case BLESSPackage.TYPE_DECLARATION: return createTypeDeclaration();
      case BLESSPackage.TYPE_OR_REFERENCE: return createTypeOrReference();
      case BLESSPackage.BOOLEAN_TYPE: return createBooleanType();
      case BLESSPackage.STRING_TYPE: return createStringType();
      case BLESSPackage.NULL_TYPE: return createNullType();
      case BLESSPackage.ENUMERATION_TYPE: return createEnumerationType();
      case BLESSPackage.QUANTITY_TYPE: return createQuantityType();
      case BLESSPackage.ANUMBER: return createANumber();
      case BLESSPackage.ARRAY_TYPE: return createArrayType();
      case BLESSPackage.ARRAY_RANGE_LIST: return createArrayRangeList();
      case BLESSPackage.ARRAY_RANGE: return createArrayRange();
      case BLESSPackage.RECORD_TYPE: return createRecordType();
      case BLESSPackage.RECORD_FIELD: return createRecordField();
      case BLESSPackage.PROPERTY_REFERENCE: return createPropertyReference();
      case BLESSPackage.PROPERTY_FIELD: return createPropertyField();
      case BLESSPackage.UNIT_NAME: return createUnitName();
      case BLESSPackage.UNIT_FORMULA: return createUnitFormula();
      case BLESSPackage.UNIT_DECLARATION: return createUnitDeclaration();
      case BLESSPackage.ROOT_DECLARATION: return createRootDeclaration();
      case BLESSPackage.UNIT_EXTENSION: return createUnitExtension();
      case BLESSPackage.UNIT_FACTOR: return createUnitFactor();
      case BLESSPackage.QUANTITY: return createQuantity();
      case BLESSPackage.TYPE: return createType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLESSGrammarRoots createBLESSGrammarRoots()
  {
    BLESSGrammarRootsImpl blessGrammarRoots = new BLESSGrammarRootsImpl();
    return blessGrammarRoots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLESSSubclause createBLESSSubclause()
  {
    BLESSSubclauseImpl blessSubclause = new BLESSSubclauseImpl();
    return blessSubclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitLibrary createUnitLibrary()
  {
    UnitLibraryImpl unitLibrary = new UnitLibraryImpl();
    return unitLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionLibrary createAssertionLibrary()
  {
    AssertionLibraryImpl assertionLibrary = new AssertionLibraryImpl();
    return assertionLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionLibrary createExceptionLibrary()
  {
    ExceptionLibraryImpl exceptionLibrary = new ExceptionLibraryImpl();
    return exceptionLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionSubclause createActionSubclause()
  {
    ActionSubclauseImpl actionSubclause = new ActionSubclauseImpl();
    return actionSubclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantClause createInvariantClause()
  {
    InvariantClauseImpl invariantClause = new InvariantClauseImpl();
    return invariantClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariablesSection createVariablesSection()
  {
    VariablesSectionImpl variablesSection = new VariablesSectionImpl();
    return variablesSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatesSection createStatesSection()
  {
    StatesSectionImpl statesSection = new StatesSectionImpl();
    return statesSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorState createBehaviorState()
  {
    BehaviorStateImpl behaviorState = new BehaviorStateImpl();
    return behaviorState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transitions createTransitions()
  {
    TransitionsImpl transitions = new TransitionsImpl();
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorTransition createBehaviorTransition()
  {
    BehaviorTransitionImpl behaviorTransition = new BehaviorTransitionImpl();
    return behaviorTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Priority createPriority()
  {
    PriorityImpl priority = new PriorityImpl();
    return priority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DispatchCondition createDispatchCondition()
  {
    DispatchConditionImpl dispatchCondition = new DispatchConditionImpl();
    return dispatchCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DispatchExpression createDispatchExpression()
  {
    DispatchExpressionImpl dispatchExpression = new DispatchExpressionImpl();
    return dispatchExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubprogramAccessDispatch createSubprogramAccessDispatch()
  {
    SubprogramAccessDispatchImpl subprogramAccessDispatch = new SubprogramAccessDispatchImpl();
    return subprogramAccessDispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DispatchConjunction createDispatchConjunction()
  {
    DispatchConjunctionImpl dispatchConjunction = new DispatchConjunctionImpl();
    return dispatchConjunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DispatchTrigger createDispatchTrigger()
  {
    DispatchTriggerImpl dispatchTrigger = new DispatchTriggerImpl();
    return dispatchTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortName createPortName()
  {
    PortNameImpl portName = new PortNameImpl();
    return portName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecuteCondition createExecuteCondition()
  {
    ExecuteConditionImpl executeCondition = new ExecuteConditionImpl();
    return executeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecuteTimeout createExecuteTimeout()
  {
    ExecuteTimeoutImpl executeTimeout = new ExecuteTimeoutImpl();
    return executeTimeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Otherwise createOtherwise()
  {
    OtherwiseImpl otherwise = new OtherwiseImpl();
    return otherwise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModeCondition createModeCondition()
  {
    ModeConditionImpl modeCondition = new ModeConditionImpl();
    return modeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriggerLogicalExpression createTriggerLogicalExpression()
  {
    TriggerLogicalExpressionImpl triggerLogicalExpression = new TriggerLogicalExpressionImpl();
    return triggerLogicalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventTrigger createEventTrigger()
  {
    EventTriggerImpl eventTrigger = new EventTriggerImpl();
    return eventTrigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperator createLogicalOperator()
  {
    LogicalOperatorImpl logicalOperator = new LogicalOperatorImpl();
    return logicalOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InternalCondition createInternalCondition()
  {
    InternalConditionImpl internalCondition = new InternalConditionImpl();
    return internalCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertClause createAssertClause()
  {
    AssertClauseImpl assertClause = new AssertClauseImpl();
    return assertClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentialLatticeQuantification createExistentialLatticeQuantification()
  {
    ExistentialLatticeQuantificationImpl existentialLatticeQuantification = new ExistentialLatticeQuantificationImpl();
    return existentialLatticeQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuantifiedVariables createQuantifiedVariables()
  {
    QuantifiedVariablesImpl quantifiedVariables = new QuantifiedVariablesImpl();
    return quantifiedVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniversalLatticeQuantification createUniversalLatticeQuantification()
  {
    UniversalLatticeQuantificationImpl universalLatticeQuantification = new UniversalLatticeQuantificationImpl();
    return universalLatticeQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForallVariable createForallVariable()
  {
    ForallVariableImpl forallVariable = new ForallVariableImpl();
    return forallVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionParameters createFunctionParameters()
  {
    FunctionParametersImpl functionParameters = new FunctionParametersImpl();
    return functionParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalExpressionPair createFormalExpressionPair()
  {
    FormalExpressionPairImpl formalExpressionPair = new FormalExpressionPairImpl();
    return formalExpressionPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorActions createBehaviorActions()
  {
    BehaviorActionsImpl behaviorActions = new BehaviorActionsImpl();
    return behaviorActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertedAction createAssertedAction()
  {
    AssertedActionImpl assertedAction = new AssertedActionImpl();
    return assertedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicAction createBasicAction()
  {
    BasicActionImpl basicAction = new BasicActionImpl();
    return basicAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CombinableOperation createCombinableOperation()
  {
    CombinableOperationImpl combinableOperation = new CombinableOperationImpl();
    return combinableOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommunicationAction createCommunicationAction()
  {
    CommunicationActionImpl communicationAction = new CommunicationActionImpl();
    return communicationAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubprogramCall createSubprogramCall()
  {
    SubprogramCallImpl subprogramCall = new SubprogramCallImpl();
    return subprogramCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalActualList createFormalActualList()
  {
    FormalActualListImpl formalActualList = new FormalActualListImpl();
    return formalActualList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FormalActual createFormalActual()
  {
    FormalActualImpl formalActual = new FormalActualImpl();
    return formalActual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubProgramParameter createSubProgramParameter()
  {
    SubProgramParameterImpl subProgramParameter = new SubProgramParameterImpl();
    return subProgramParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortOutput createPortOutput()
  {
    PortOutputImpl portOutput = new PortOutputImpl();
    return portOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortInput createPortInput()
  {
    PortInputImpl portInput = new PortInputImpl();
    return portInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionOrAny createExpressionOrAny()
  {
    ExpressionOrAnyImpl expressionOrAny = new ExpressionOrAnyImpl();
    return expressionOrAny;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimultaneousAssignment createSimultaneousAssignment()
  {
    SimultaneousAssignmentImpl simultaneousAssignment = new SimultaneousAssignmentImpl();
    return simultaneousAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Alternative createAlternative()
  {
    AlternativeImpl alternative = new AlternativeImpl();
    return alternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLESSAlternative createBLESSAlternative()
  {
    BLESSAlternativeImpl blessAlternative = new BLESSAlternativeImpl();
    return blessAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GuardedAction createGuardedAction()
  {
    GuardedActionImpl guardedAction = new GuardedActionImpl();
    return guardedAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileLoop createWhileLoop()
  {
    WhileLoopImpl whileLoop = new WhileLoopImpl();
    return whileLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForLoop createForLoop()
  {
    ForLoopImpl forLoop = new ForLoopImpl();
    return forLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoUntilLoop createDoUntilLoop()
  {
    DoUntilLoopImpl doUntilLoop = new DoUntilLoopImpl();
    return doUntilLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThrowsClause createThrowsClause()
  {
    ThrowsClauseImpl throwsClause = new ThrowsClauseImpl();
    return throwsClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CatchClause createCatchClause()
  {
    CatchClauseImpl catchClause = new CatchClauseImpl();
    return catchClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CatchClauseTerm createCatchClauseTerm()
  {
    CatchClauseTermImpl catchClauseTerm = new CatchClauseTermImpl();
    return catchClauseTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhenThrow createWhenThrow()
  {
    WhenThrowImpl whenThrow = new WhenThrowImpl();
    return whenThrow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Computation createComputation()
  {
    ComputationImpl computation = new ComputationImpl();
    return computation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BAAlternative createBAAlternative()
  {
    BAAlternativeImpl baAlternative = new BAAlternativeImpl();
    return baAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseifAlternative createElseifAlternative()
  {
    ElseifAlternativeImpl elseifAlternative = new ElseifAlternativeImpl();
    return elseifAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseAlternative createElseAlternative()
  {
    ElseAlternativeImpl elseAlternative = new ElseAlternativeImpl();
    return elseAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IssueException createIssueException()
  {
    IssueExceptionImpl issueException = new IssueExceptionImpl();
    return issueException;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LockingAction createLockingAction()
  {
    LockingActionImpl lockingAction = new LockingActionImpl();
    return lockingAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreezePort createFreezePort()
  {
    FreezePortImpl freezePort = new FreezePortImpl();
    return freezePort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pause createPause()
  {
    PauseImpl pause = new PauseImpl();
    return pause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionTimeout createActionTimeout()
  {
    ActionTimeoutImpl actionTimeout = new ActionTimeoutImpl();
    return actionTimeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorTime createBehaviorTime()
  {
    BehaviorTimeImpl behaviorTime = new BehaviorTimeImpl();
    return behaviorTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public com.multitude.aadl.bless.bLESS.Exception createException()
  {
    ExceptionImpl exception = new ExceptionImpl();
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GhostVariables createGhostVariables()
  {
    GhostVariablesImpl ghostVariables = new GhostVariablesImpl();
    return ghostVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GhostVariable createGhostVariable()
  {
    GhostVariableImpl ghostVariable = new GhostVariableImpl();
    return ghostVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assertion createAssertion()
  {
    AssertionImpl assertion = new AssertionImpl();
    return assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedAssertion createNamedAssertion()
  {
    NamedAssertionImpl namedAssertion = new NamedAssertionImpl();
    return namedAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamelessAssertion createNamelessAssertion()
  {
    NamelessAssertionImpl namelessAssertion = new NamelessAssertionImpl();
    return namelessAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamelessFunction createNamelessFunction()
  {
    NamelessFunctionImpl namelessFunction = new NamelessFunctionImpl();
    return namelessFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamelessEnumeration createNamelessEnumeration()
  {
    NamelessEnumerationImpl namelessEnumeration = new NamelessEnumerationImpl();
    return namelessEnumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionNumericExpression createAssertionNumericExpression()
  {
    AssertionNumericExpressionImpl assertionNumericExpression = new AssertionNumericExpressionImpl();
    return assertionNumericExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericExpression createNumericExpression()
  {
    NumericExpressionImpl numericExpression = new NumericExpressionImpl();
    return numericExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disjunction createDisjunction()
  {
    DisjunctionImpl disjunction = new DisjunctionImpl();
    return disjunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conjunction createConjunction()
  {
    ConjunctionImpl conjunction = new ConjunctionImpl();
    return conjunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddSub createAddSub()
  {
    AddSubImpl addSub = new AddSubImpl();
    return addSub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultDiv createMultDiv()
  {
    MultDivImpl multDiv = new MultDivImpl();
    return multDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Subexpression createSubexpression()
  {
    SubexpressionImpl subexpression = new SubexpressionImpl();
    return subexpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimedExpression createTimedExpression()
  {
    TimedExpressionImpl timedExpression = new TimedExpressionImpl();
    return timedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimedSubject createTimedSubject()
  {
    TimedSubjectImpl timedSubject = new TimedSubjectImpl();
    return timedSubject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParenthesizedSubexpression createParenthesizedSubexpression()
  {
    ParenthesizedSubexpressionImpl parenthesizedSubexpression = new ParenthesizedSubexpressionImpl();
    return parenthesizedSubexpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryOperator createUnaryOperator()
  {
    UnaryOperatorImpl unaryOperator = new UnaryOperatorImpl();
    return unaryOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalExpression createConditionalExpression()
  {
    ConditionalExpressionImpl conditionalExpression = new ConditionalExpressionImpl();
    return conditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationValue createEnumerationValue()
  {
    EnumerationValueImpl enumerationValue = new EnumerationValueImpl();
    return enumerationValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NonNumericProperty createNonNumericProperty()
  {
    NonNumericPropertyImpl nonNumericProperty = new NonNumericPropertyImpl();
    return nonNumericProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueName createValueName()
  {
    ValueNameImpl valueName = new ValueNameImpl();
    return valueName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PartialName createPartialName()
  {
    PartialNameImpl partialName = new PartialNameImpl();
    return partialName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexExpressionOrRange createIndexExpressionOrRange()
  {
    IndexExpressionOrRangeImpl indexExpressionOrRange = new IndexExpressionOrRangeImpl();
    return indexExpressionOrRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodShift createPeriodShift()
  {
    PeriodShiftImpl periodShift = new PeriodShiftImpl();
    return periodShift;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexExpression createIndexExpression()
  {
    IndexExpressionImpl indexExpression = new IndexExpressionImpl();
    return indexExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseExpression createCaseExpression()
  {
    CaseExpressionImpl caseExpression = new CaseExpressionImpl();
    return caseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseChoice createCaseChoice()
  {
    CaseChoiceImpl caseChoice = new CaseChoiceImpl();
    return caseChoice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicVariables createLogicVariables()
  {
    LogicVariablesImpl logicVariables = new LogicVariablesImpl();
    return logicVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SumQuantification createSumQuantification()
  {
    SumQuantificationImpl sumQuantification = new SumQuantificationImpl();
    return sumQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductQuantification createProductQuantification()
  {
    ProductQuantificationImpl productQuantification = new ProductQuantificationImpl();
    return productQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CountingQuantification createCountingQuantification()
  {
    CountingQuantificationImpl countingQuantification = new CountingQuantificationImpl();
    return countingQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniversalQuantification createUniversalQuantification()
  {
    UniversalQuantificationImpl universalQuantification = new UniversalQuantificationImpl();
    return universalQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentialQuantification createExistentialQuantification()
  {
    ExistentialQuantificationImpl existentialQuantification = new ExistentialQuantificationImpl();
    return existentialQuantification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordTerm createRecordTerm()
  {
    RecordTermImpl recordTerm = new RecordTermImpl();
    return recordTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordValue createRecordValue()
  {
    RecordValueImpl recordValue = new RecordValueImpl();
    return recordValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invocation createInvocation()
  {
    InvocationImpl invocation = new InvocationImpl();
    return invocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActualParameter createActualParameter()
  {
    ActualParameterImpl actualParameter = new ActualParameterImpl();
    return actualParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableList createVariableList()
  {
    VariableListImpl variableList = new VariableListImpl();
    return variableList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionFunctionValue createAssertionFunctionValue()
  {
    AssertionFunctionValueImpl assertionFunctionValue = new AssertionFunctionValueImpl();
    return assertionFunctionValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalAssertionFunction createConditionalAssertionFunction()
  {
    ConditionalAssertionFunctionImpl conditionalAssertionFunction = new ConditionalAssertionFunctionImpl();
    return conditionalAssertionFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionValuePair createConditionValuePair()
  {
    ConditionValuePairImpl conditionValuePair = new ConditionValuePairImpl();
    return conditionValuePair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionEnumeration createAssertionEnumeration()
  {
    AssertionEnumerationImpl assertionEnumeration = new AssertionEnumerationImpl();
    return assertionEnumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationPair createEnumerationPair()
  {
    EnumerationPairImpl enumerationPair = new EnumerationPairImpl();
    return enumerationPair;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeLibrary createTypeLibrary()
  {
    TypeLibraryImpl typeLibrary = new TypeLibraryImpl();
    return typeLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDeclaration createTypeDeclaration()
  {
    TypeDeclarationImpl typeDeclaration = new TypeDeclarationImpl();
    return typeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeOrReference createTypeOrReference()
  {
    TypeOrReferenceImpl typeOrReference = new TypeOrReferenceImpl();
    return typeOrReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanType createBooleanType()
  {
    BooleanTypeImpl booleanType = new BooleanTypeImpl();
    return booleanType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringType createStringType()
  {
    StringTypeImpl stringType = new StringTypeImpl();
    return stringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullType createNullType()
  {
    NullTypeImpl nullType = new NullTypeImpl();
    return nullType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationType createEnumerationType()
  {
    EnumerationTypeImpl enumerationType = new EnumerationTypeImpl();
    return enumerationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QuantityType createQuantityType()
  {
    QuantityTypeImpl quantityType = new QuantityTypeImpl();
    return quantityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ANumber createANumber()
  {
    ANumberImpl aNumber = new ANumberImpl();
    return aNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayRangeList createArrayRangeList()
  {
    ArrayRangeListImpl arrayRangeList = new ArrayRangeListImpl();
    return arrayRangeList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayRange createArrayRange()
  {
    ArrayRangeImpl arrayRange = new ArrayRangeImpl();
    return arrayRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordType createRecordType()
  {
    RecordTypeImpl recordType = new RecordTypeImpl();
    return recordType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecordField createRecordField()
  {
    RecordFieldImpl recordField = new RecordFieldImpl();
    return recordField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyReference createPropertyReference()
  {
    PropertyReferenceImpl propertyReference = new PropertyReferenceImpl();
    return propertyReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyField createPropertyField()
  {
    PropertyFieldImpl propertyField = new PropertyFieldImpl();
    return propertyField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitName createUnitName()
  {
    UnitNameImpl unitName = new UnitNameImpl();
    return unitName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitFormula createUnitFormula()
  {
    UnitFormulaImpl unitFormula = new UnitFormulaImpl();
    return unitFormula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitDeclaration createUnitDeclaration()
  {
    UnitDeclarationImpl unitDeclaration = new UnitDeclarationImpl();
    return unitDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RootDeclaration createRootDeclaration()
  {
    RootDeclarationImpl rootDeclaration = new RootDeclarationImpl();
    return rootDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitExtension createUnitExtension()
  {
    UnitExtensionImpl unitExtension = new UnitExtensionImpl();
    return unitExtension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitFactor createUnitFactor()
  {
    UnitFactorImpl unitFactor = new UnitFactorImpl();
    return unitFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Quantity createQuantity()
  {
    QuantityImpl quantity = new QuantityImpl();
    return quantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLESSPackage getBLESSPackage()
  {
    return (BLESSPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BLESSPackage getPackage()
  {
    return BLESSPackage.eINSTANCE;
  }

} //BLESSFactoryImpl
