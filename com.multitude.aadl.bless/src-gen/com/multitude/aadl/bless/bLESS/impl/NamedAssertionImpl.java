/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.AssertionEnumeration;
import com.multitude.aadl.bless.bLESS.AssertionFunctionValue;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.NamedAssertion;
import com.multitude.aadl.bless.bLESS.Predicate;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;
import com.multitude.aadl.bless.bLESS.TypeOrReference;
import com.multitude.aadl.bless.bLESS.VariableList;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.NamedElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Named Assertion</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getFormals <em>Formals</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#isPred <em>Pred</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getPredicate <em>Predicate</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getTod <em>Tod</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#isFunc <em>Func</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getFunctionvalue <em>Functionvalue</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getAssertionvariable <em>Assertionvariable</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getEnumerationType <em>Enumeration Type</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#isEnumer <em>Enumer</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.NamedAssertionImpl#getEnumeration <em>Enumeration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NamedAssertionImpl extends NamedElementImpl implements NamedAssertion
{
  /**
   * The cached value of the '{@link #getFormals() <em>Formals</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormals()
   * @generated
   * @ordered
   */
  protected VariableList formals;

  /**
   * The default value of the '{@link #isPred() <em>Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPred()
   * @generated
   * @ordered
   */
  protected static final boolean PRED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPred() <em>Pred</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPred()
   * @generated
   * @ordered
   */
  protected boolean pred = PRED_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredicate() <em>Predicate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicate()
   * @generated
   * @ordered
   */
  protected Predicate predicate;

  /**
   * The cached value of the '{@link #getTod() <em>Tod</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTod()
   * @generated
   * @ordered
   */
  protected TypeOrReference tod;

  /**
   * The default value of the '{@link #isFunc() <em>Func</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunc()
   * @generated
   * @ordered
   */
  protected static final boolean FUNC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFunc() <em>Func</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunc()
   * @generated
   * @ordered
   */
  protected boolean func = FUNC_EDEFAULT;

  /**
   * The cached value of the '{@link #getFunctionvalue() <em>Functionvalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionvalue()
   * @generated
   * @ordered
   */
  protected AssertionFunctionValue functionvalue;

  /**
   * The default value of the '{@link #getAssertionvariable() <em>Assertionvariable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertionvariable()
   * @generated
   * @ordered
   */
  protected static final String ASSERTIONVARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAssertionvariable() <em>Assertionvariable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertionvariable()
   * @generated
   * @ordered
   */
  protected String assertionvariable = ASSERTIONVARIABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnumerationType() <em>Enumeration Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnumerationType()
   * @generated
   * @ordered
   */
  protected TypeDeclaration enumerationType;

  /**
   * The default value of the '{@link #isEnumer() <em>Enumer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnumer()
   * @generated
   * @ordered
   */
  protected static final boolean ENUMER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEnumer() <em>Enumer</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEnumer()
   * @generated
   * @ordered
   */
  protected boolean enumer = ENUMER_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnumeration() <em>Enumeration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnumeration()
   * @generated
   * @ordered
   */
  protected AssertionEnumeration enumeration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamedAssertionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getNamedAssertion();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableList getFormals()
  {
    return formals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFormals(VariableList newFormals, NotificationChain msgs)
  {
    VariableList oldFormals = formals;
    formals = newFormals;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__FORMALS, oldFormals, newFormals);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormals(VariableList newFormals)
  {
    if (newFormals != formals)
    {
      NotificationChain msgs = null;
      if (formals != null)
        msgs = ((InternalEObject)formals).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__FORMALS, null, msgs);
      if (newFormals != null)
        msgs = ((InternalEObject)newFormals).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__FORMALS, null, msgs);
      msgs = basicSetFormals(newFormals, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__FORMALS, newFormals, newFormals));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPred()
  {
    return pred;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPred(boolean newPred)
  {
    boolean oldPred = pred;
    pred = newPred;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__PRED, oldPred, pred));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Predicate getPredicate()
  {
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicate(Predicate newPredicate, NotificationChain msgs)
  {
    Predicate oldPredicate = predicate;
    predicate = newPredicate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__PREDICATE, oldPredicate, newPredicate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredicate(Predicate newPredicate)
  {
    if (newPredicate != predicate)
    {
      NotificationChain msgs = null;
      if (predicate != null)
        msgs = ((InternalEObject)predicate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__PREDICATE, null, msgs);
      if (newPredicate != null)
        msgs = ((InternalEObject)newPredicate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__PREDICATE, null, msgs);
      msgs = basicSetPredicate(newPredicate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__PREDICATE, newPredicate, newPredicate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeOrReference getTod()
  {
    return tod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTod(TypeOrReference newTod, NotificationChain msgs)
  {
    TypeOrReference oldTod = tod;
    tod = newTod;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__TOD, oldTod, newTod);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTod(TypeOrReference newTod)
  {
    if (newTod != tod)
    {
      NotificationChain msgs = null;
      if (tod != null)
        msgs = ((InternalEObject)tod).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__TOD, null, msgs);
      if (newTod != null)
        msgs = ((InternalEObject)newTod).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__TOD, null, msgs);
      msgs = basicSetTod(newTod, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__TOD, newTod, newTod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFunc()
  {
    return func;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunc(boolean newFunc)
  {
    boolean oldFunc = func;
    func = newFunc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__FUNC, oldFunc, func));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionFunctionValue getFunctionvalue()
  {
    return functionvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionvalue(AssertionFunctionValue newFunctionvalue, NotificationChain msgs)
  {
    AssertionFunctionValue oldFunctionvalue = functionvalue;
    functionvalue = newFunctionvalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE, oldFunctionvalue, newFunctionvalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunctionvalue(AssertionFunctionValue newFunctionvalue)
  {
    if (newFunctionvalue != functionvalue)
    {
      NotificationChain msgs = null;
      if (functionvalue != null)
        msgs = ((InternalEObject)functionvalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE, null, msgs);
      if (newFunctionvalue != null)
        msgs = ((InternalEObject)newFunctionvalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE, null, msgs);
      msgs = basicSetFunctionvalue(newFunctionvalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE, newFunctionvalue, newFunctionvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAssertionvariable()
  {
    return assertionvariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssertionvariable(String newAssertionvariable)
  {
    String oldAssertionvariable = assertionvariable;
    assertionvariable = newAssertionvariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__ASSERTIONVARIABLE, oldAssertionvariable, assertionvariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDeclaration getEnumerationType()
  {
    if (enumerationType != null && enumerationType.eIsProxy())
    {
      InternalEObject oldEnumerationType = (InternalEObject)enumerationType;
      enumerationType = (TypeDeclaration)eResolveProxy(oldEnumerationType);
      if (enumerationType != oldEnumerationType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE, oldEnumerationType, enumerationType));
      }
    }
    return enumerationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclaration basicGetEnumerationType()
  {
    return enumerationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnumerationType(TypeDeclaration newEnumerationType)
  {
    TypeDeclaration oldEnumerationType = enumerationType;
    enumerationType = newEnumerationType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE, oldEnumerationType, enumerationType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEnumer()
  {
    return enumer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnumer(boolean newEnumer)
  {
    boolean oldEnumer = enumer;
    enumer = newEnumer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__ENUMER, oldEnumer, enumer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertionEnumeration getEnumeration()
  {
    return enumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnumeration(AssertionEnumeration newEnumeration, NotificationChain msgs)
  {
    AssertionEnumeration oldEnumeration = enumeration;
    enumeration = newEnumeration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__ENUMERATION, oldEnumeration, newEnumeration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnumeration(AssertionEnumeration newEnumeration)
  {
    if (newEnumeration != enumeration)
    {
      NotificationChain msgs = null;
      if (enumeration != null)
        msgs = ((InternalEObject)enumeration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__ENUMERATION, null, msgs);
      if (newEnumeration != null)
        msgs = ((InternalEObject)newEnumeration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.NAMED_ASSERTION__ENUMERATION, null, msgs);
      msgs = basicSetEnumeration(newEnumeration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.NAMED_ASSERTION__ENUMERATION, newEnumeration, newEnumeration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.NAMED_ASSERTION__FORMALS:
        return basicSetFormals(null, msgs);
      case BLESSPackage.NAMED_ASSERTION__PREDICATE:
        return basicSetPredicate(null, msgs);
      case BLESSPackage.NAMED_ASSERTION__TOD:
        return basicSetTod(null, msgs);
      case BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE:
        return basicSetFunctionvalue(null, msgs);
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION:
        return basicSetEnumeration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.NAMED_ASSERTION__FORMALS:
        return getFormals();
      case BLESSPackage.NAMED_ASSERTION__PRED:
        return isPred();
      case BLESSPackage.NAMED_ASSERTION__PREDICATE:
        return getPredicate();
      case BLESSPackage.NAMED_ASSERTION__TOD:
        return getTod();
      case BLESSPackage.NAMED_ASSERTION__FUNC:
        return isFunc();
      case BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE:
        return getFunctionvalue();
      case BLESSPackage.NAMED_ASSERTION__ASSERTIONVARIABLE:
        return getAssertionvariable();
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE:
        if (resolve) return getEnumerationType();
        return basicGetEnumerationType();
      case BLESSPackage.NAMED_ASSERTION__ENUMER:
        return isEnumer();
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION:
        return getEnumeration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.NAMED_ASSERTION__FORMALS:
        setFormals((VariableList)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__PRED:
        setPred((Boolean)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__PREDICATE:
        setPredicate((Predicate)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__TOD:
        setTod((TypeOrReference)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__FUNC:
        setFunc((Boolean)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE:
        setFunctionvalue((AssertionFunctionValue)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__ASSERTIONVARIABLE:
        setAssertionvariable((String)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE:
        setEnumerationType((TypeDeclaration)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMER:
        setEnumer((Boolean)newValue);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION:
        setEnumeration((AssertionEnumeration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.NAMED_ASSERTION__FORMALS:
        setFormals((VariableList)null);
        return;
      case BLESSPackage.NAMED_ASSERTION__PRED:
        setPred(PRED_EDEFAULT);
        return;
      case BLESSPackage.NAMED_ASSERTION__PREDICATE:
        setPredicate((Predicate)null);
        return;
      case BLESSPackage.NAMED_ASSERTION__TOD:
        setTod((TypeOrReference)null);
        return;
      case BLESSPackage.NAMED_ASSERTION__FUNC:
        setFunc(FUNC_EDEFAULT);
        return;
      case BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE:
        setFunctionvalue((AssertionFunctionValue)null);
        return;
      case BLESSPackage.NAMED_ASSERTION__ASSERTIONVARIABLE:
        setAssertionvariable(ASSERTIONVARIABLE_EDEFAULT);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE:
        setEnumerationType((TypeDeclaration)null);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMER:
        setEnumer(ENUMER_EDEFAULT);
        return;
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION:
        setEnumeration((AssertionEnumeration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.NAMED_ASSERTION__FORMALS:
        return formals != null;
      case BLESSPackage.NAMED_ASSERTION__PRED:
        return pred != PRED_EDEFAULT;
      case BLESSPackage.NAMED_ASSERTION__PREDICATE:
        return predicate != null;
      case BLESSPackage.NAMED_ASSERTION__TOD:
        return tod != null;
      case BLESSPackage.NAMED_ASSERTION__FUNC:
        return func != FUNC_EDEFAULT;
      case BLESSPackage.NAMED_ASSERTION__FUNCTIONVALUE:
        return functionvalue != null;
      case BLESSPackage.NAMED_ASSERTION__ASSERTIONVARIABLE:
        return ASSERTIONVARIABLE_EDEFAULT == null ? assertionvariable != null : !ASSERTIONVARIABLE_EDEFAULT.equals(assertionvariable);
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION_TYPE:
        return enumerationType != null;
      case BLESSPackage.NAMED_ASSERTION__ENUMER:
        return enumer != ENUMER_EDEFAULT;
      case BLESSPackage.NAMED_ASSERTION__ENUMERATION:
        return enumeration != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pred: ");
    result.append(pred);
    result.append(", func: ");
    result.append(func);
    result.append(", assertionvariable: ");
    result.append(assertionvariable);
    result.append(", enumer: ");
    result.append(enumer);
    result.append(')');
    return result.toString();
  }

} //NamedAssertionImpl
