/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.CombinableOperation;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.Variable;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Combinable Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#isF_add <em>Fadd</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#getArithmetic <em>Arithmetic</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#getResult <em>Result</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#isF_or <em>For</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#isF_and <em>Fand</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#isF_xor <em>Fxor</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#isSw <em>Sw</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CombinableOperationImpl#getReference <em>Reference</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CombinableOperationImpl extends ElementImpl implements CombinableOperation
{
  /**
   * The default value of the '{@link #isF_add() <em>Fadd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_add()
   * @generated
   * @ordered
   */
  protected static final boolean FADD_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isF_add() <em>Fadd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_add()
   * @generated
   * @ordered
   */
  protected boolean f_add = FADD_EDEFAULT;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected Variable target;

  /**
   * The cached value of the '{@link #getArithmetic() <em>Arithmetic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmetic()
   * @generated
   * @ordered
   */
  protected Expression arithmetic;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected Variable result;

  /**
   * The default value of the '{@link #isF_or() <em>For</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_or()
   * @generated
   * @ordered
   */
  protected static final boolean FOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isF_or() <em>For</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_or()
   * @generated
   * @ordered
   */
  protected boolean f_or = FOR_EDEFAULT;

  /**
   * The default value of the '{@link #isF_and() <em>Fand</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_and()
   * @generated
   * @ordered
   */
  protected static final boolean FAND_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isF_and() <em>Fand</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_and()
   * @generated
   * @ordered
   */
  protected boolean f_and = FAND_EDEFAULT;

  /**
   * The default value of the '{@link #isF_xor() <em>Fxor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_xor()
   * @generated
   * @ordered
   */
  protected static final boolean FXOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isF_xor() <em>Fxor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isF_xor()
   * @generated
   * @ordered
   */
  protected boolean f_xor = FXOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected Expression bool;

  /**
   * The default value of the '{@link #isSw() <em>Sw</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSw()
   * @generated
   * @ordered
   */
  protected static final boolean SW_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSw() <em>Sw</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSw()
   * @generated
   * @ordered
   */
  protected boolean sw = SW_EDEFAULT;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected Variable reference;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CombinableOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getCombinableOperation();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isF_add()
  {
    return f_add;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF_add(boolean newF_add)
  {
    boolean oldF_add = f_add;
    f_add = newF_add;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__FADD, oldF_add, f_add));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (Variable)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.COMBINABLE_OPERATION__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(Variable newTarget)
  {
    Variable oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getArithmetic()
  {
    return arithmetic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithmetic(Expression newArithmetic, NotificationChain msgs)
  {
    Expression oldArithmetic = arithmetic;
    arithmetic = newArithmetic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC, oldArithmetic, newArithmetic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithmetic(Expression newArithmetic)
  {
    if (newArithmetic != arithmetic)
    {
      NotificationChain msgs = null;
      if (arithmetic != null)
        msgs = ((InternalEObject)arithmetic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC, null, msgs);
      if (newArithmetic != null)
        msgs = ((InternalEObject)newArithmetic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC, null, msgs);
      msgs = basicSetArithmetic(newArithmetic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC, newArithmetic, newArithmetic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getResult()
  {
    if (result != null && result.eIsProxy())
    {
      InternalEObject oldResult = (InternalEObject)result;
      result = (Variable)eResolveProxy(oldResult);
      if (result != oldResult)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.COMBINABLE_OPERATION__RESULT, oldResult, result));
      }
    }
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResult(Variable newResult)
  {
    Variable oldResult = result;
    result = newResult;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__RESULT, oldResult, result));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isF_or()
  {
    return f_or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF_or(boolean newF_or)
  {
    boolean oldF_or = f_or;
    f_or = newF_or;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__FOR, oldF_or, f_or));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isF_and()
  {
    return f_and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF_and(boolean newF_and)
  {
    boolean oldF_and = f_and;
    f_and = newF_and;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__FAND, oldF_and, f_and));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isF_xor()
  {
    return f_xor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF_xor(boolean newF_xor)
  {
    boolean oldF_xor = f_xor;
    f_xor = newF_xor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__FXOR, oldF_xor, f_xor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBool(Expression newBool, NotificationChain msgs)
  {
    Expression oldBool = bool;
    bool = newBool;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__BOOL, oldBool, newBool);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBool(Expression newBool)
  {
    if (newBool != bool)
    {
      NotificationChain msgs = null;
      if (bool != null)
        msgs = ((InternalEObject)bool).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMBINABLE_OPERATION__BOOL, null, msgs);
      if (newBool != null)
        msgs = ((InternalEObject)newBool).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMBINABLE_OPERATION__BOOL, null, msgs);
      msgs = basicSetBool(newBool, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__BOOL, newBool, newBool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSw()
  {
    return sw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSw(boolean newSw)
  {
    boolean oldSw = sw;
    sw = newSw;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__SW, oldSw, sw));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getReference()
  {
    if (reference != null && reference.eIsProxy())
    {
      InternalEObject oldReference = (InternalEObject)reference;
      reference = (Variable)eResolveProxy(oldReference);
      if (reference != oldReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.COMBINABLE_OPERATION__REFERENCE, oldReference, reference));
      }
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReference(Variable newReference)
  {
    Variable oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMBINABLE_OPERATION__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC:
        return basicSetArithmetic(null, msgs);
      case BLESSPackage.COMBINABLE_OPERATION__BOOL:
        return basicSetBool(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.COMBINABLE_OPERATION__FADD:
        return isF_add();
      case BLESSPackage.COMBINABLE_OPERATION__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC:
        return getArithmetic();
      case BLESSPackage.COMBINABLE_OPERATION__RESULT:
        if (resolve) return getResult();
        return basicGetResult();
      case BLESSPackage.COMBINABLE_OPERATION__FOR:
        return isF_or();
      case BLESSPackage.COMBINABLE_OPERATION__FAND:
        return isF_and();
      case BLESSPackage.COMBINABLE_OPERATION__FXOR:
        return isF_xor();
      case BLESSPackage.COMBINABLE_OPERATION__BOOL:
        return getBool();
      case BLESSPackage.COMBINABLE_OPERATION__SW:
        return isSw();
      case BLESSPackage.COMBINABLE_OPERATION__REFERENCE:
        if (resolve) return getReference();
        return basicGetReference();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.COMBINABLE_OPERATION__FADD:
        setF_add((Boolean)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__TARGET:
        setTarget((Variable)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC:
        setArithmetic((Expression)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__RESULT:
        setResult((Variable)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FOR:
        setF_or((Boolean)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FAND:
        setF_and((Boolean)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FXOR:
        setF_xor((Boolean)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__BOOL:
        setBool((Expression)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__SW:
        setSw((Boolean)newValue);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__REFERENCE:
        setReference((Variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.COMBINABLE_OPERATION__FADD:
        setF_add(FADD_EDEFAULT);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__TARGET:
        setTarget((Variable)null);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC:
        setArithmetic((Expression)null);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__RESULT:
        setResult((Variable)null);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FOR:
        setF_or(FOR_EDEFAULT);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FAND:
        setF_and(FAND_EDEFAULT);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__FXOR:
        setF_xor(FXOR_EDEFAULT);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__BOOL:
        setBool((Expression)null);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__SW:
        setSw(SW_EDEFAULT);
        return;
      case BLESSPackage.COMBINABLE_OPERATION__REFERENCE:
        setReference((Variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.COMBINABLE_OPERATION__FADD:
        return f_add != FADD_EDEFAULT;
      case BLESSPackage.COMBINABLE_OPERATION__TARGET:
        return target != null;
      case BLESSPackage.COMBINABLE_OPERATION__ARITHMETIC:
        return arithmetic != null;
      case BLESSPackage.COMBINABLE_OPERATION__RESULT:
        return result != null;
      case BLESSPackage.COMBINABLE_OPERATION__FOR:
        return f_or != FOR_EDEFAULT;
      case BLESSPackage.COMBINABLE_OPERATION__FAND:
        return f_and != FAND_EDEFAULT;
      case BLESSPackage.COMBINABLE_OPERATION__FXOR:
        return f_xor != FXOR_EDEFAULT;
      case BLESSPackage.COMBINABLE_OPERATION__BOOL:
        return bool != null;
      case BLESSPackage.COMBINABLE_OPERATION__SW:
        return sw != SW_EDEFAULT;
      case BLESSPackage.COMBINABLE_OPERATION__REFERENCE:
        return reference != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (f_add: ");
    result.append(f_add);
    result.append(", f_or: ");
    result.append(f_or);
    result.append(", f_and: ");
    result.append(f_and);
    result.append(", f_xor: ");
    result.append(f_xor);
    result.append(", sw: ");
    result.append(sw);
    result.append(')');
    return result.toString();
  }

} //CombinableOperationImpl
