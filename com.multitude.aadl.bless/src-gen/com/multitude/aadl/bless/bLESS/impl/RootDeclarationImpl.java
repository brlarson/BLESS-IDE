/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.RootDeclaration;
import com.multitude.aadl.bless.bLESS.UnitFormula;
import com.multitude.aadl.bless.bLESS.UnitName;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Root Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RootDeclarationImpl#isBase <em>Base</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RootDeclarationImpl#getFormula <em>Formula</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RootDeclarationImpl#getKindWords <em>Kind Words</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RootDeclarationImpl#getUnitName <em>Unit Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RootDeclarationImpl extends UnitDeclarationImpl implements RootDeclaration
{
  /**
   * The default value of the '{@link #isBase() <em>Base</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBase()
   * @generated
   * @ordered
   */
  protected static final boolean BASE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBase() <em>Base</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBase()
   * @generated
   * @ordered
   */
  protected boolean base = BASE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFormula() <em>Formula</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFormula()
   * @generated
   * @ordered
   */
  protected UnitFormula formula;

  /**
   * The cached value of the '{@link #getKindWords() <em>Kind Words</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKindWords()
   * @generated
   * @ordered
   */
  protected EList<String> kindWords;

  /**
   * The cached value of the '{@link #getUnitName() <em>Unit Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnitName()
   * @generated
   * @ordered
   */
  protected UnitName unitName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RootDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getRootDeclaration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBase()
  {
    return base;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBase(boolean newBase)
  {
    boolean oldBase = base;
    base = newBase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ROOT_DECLARATION__BASE, oldBase, base));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitFormula getFormula()
  {
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFormula(UnitFormula newFormula, NotificationChain msgs)
  {
    UnitFormula oldFormula = formula;
    formula = newFormula;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ROOT_DECLARATION__FORMULA, oldFormula, newFormula);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFormula(UnitFormula newFormula)
  {
    if (newFormula != formula)
    {
      NotificationChain msgs = null;
      if (formula != null)
        msgs = ((InternalEObject)formula).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ROOT_DECLARATION__FORMULA, null, msgs);
      if (newFormula != null)
        msgs = ((InternalEObject)newFormula).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ROOT_DECLARATION__FORMULA, null, msgs);
      msgs = basicSetFormula(newFormula, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ROOT_DECLARATION__FORMULA, newFormula, newFormula));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getKindWords()
  {
    if (kindWords == null)
    {
      kindWords = new EDataTypeEList<String>(String.class, this, BLESSPackage.ROOT_DECLARATION__KIND_WORDS);
    }
    return kindWords;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitName getUnitName()
  {
    return unitName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnitName(UnitName newUnitName, NotificationChain msgs)
  {
    UnitName oldUnitName = unitName;
    unitName = newUnitName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ROOT_DECLARATION__UNIT_NAME, oldUnitName, newUnitName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnitName(UnitName newUnitName)
  {
    if (newUnitName != unitName)
    {
      NotificationChain msgs = null;
      if (unitName != null)
        msgs = ((InternalEObject)unitName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ROOT_DECLARATION__UNIT_NAME, null, msgs);
      if (newUnitName != null)
        msgs = ((InternalEObject)newUnitName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ROOT_DECLARATION__UNIT_NAME, null, msgs);
      msgs = basicSetUnitName(newUnitName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ROOT_DECLARATION__UNIT_NAME, newUnitName, newUnitName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.ROOT_DECLARATION__FORMULA:
        return basicSetFormula(null, msgs);
      case BLESSPackage.ROOT_DECLARATION__UNIT_NAME:
        return basicSetUnitName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.ROOT_DECLARATION__BASE:
        return isBase();
      case BLESSPackage.ROOT_DECLARATION__FORMULA:
        return getFormula();
      case BLESSPackage.ROOT_DECLARATION__KIND_WORDS:
        return getKindWords();
      case BLESSPackage.ROOT_DECLARATION__UNIT_NAME:
        return getUnitName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.ROOT_DECLARATION__BASE:
        setBase((Boolean)newValue);
        return;
      case BLESSPackage.ROOT_DECLARATION__FORMULA:
        setFormula((UnitFormula)newValue);
        return;
      case BLESSPackage.ROOT_DECLARATION__KIND_WORDS:
        getKindWords().clear();
        getKindWords().addAll((Collection<? extends String>)newValue);
        return;
      case BLESSPackage.ROOT_DECLARATION__UNIT_NAME:
        setUnitName((UnitName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ROOT_DECLARATION__BASE:
        setBase(BASE_EDEFAULT);
        return;
      case BLESSPackage.ROOT_DECLARATION__FORMULA:
        setFormula((UnitFormula)null);
        return;
      case BLESSPackage.ROOT_DECLARATION__KIND_WORDS:
        getKindWords().clear();
        return;
      case BLESSPackage.ROOT_DECLARATION__UNIT_NAME:
        setUnitName((UnitName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ROOT_DECLARATION__BASE:
        return base != BASE_EDEFAULT;
      case BLESSPackage.ROOT_DECLARATION__FORMULA:
        return formula != null;
      case BLESSPackage.ROOT_DECLARATION__KIND_WORDS:
        return kindWords != null && !kindWords.isEmpty();
      case BLESSPackage.ROOT_DECLARATION__UNIT_NAME:
        return unitName != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (base: ");
    result.append(base);
    result.append(", kindWords: ");
    result.append(kindWords);
    result.append(')');
    return result.toString();
  }

} //RootDeclarationImpl
