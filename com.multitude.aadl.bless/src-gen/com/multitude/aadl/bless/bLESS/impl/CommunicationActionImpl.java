/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.CommunicationAction;
import com.multitude.aadl.bless.bLESS.FreezePort;
import com.multitude.aadl.bless.bLESS.Pause;
import com.multitude.aadl.bless.bLESS.PortInput;
import com.multitude.aadl.bless.bLESS.PortOutput;
import com.multitude.aadl.bless.bLESS.SubprogramCall;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Communication Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CommunicationActionImpl#getPc <em>Pc</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CommunicationActionImpl#getPo <em>Po</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CommunicationActionImpl#getPi <em>Pi</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CommunicationActionImpl#getFp <em>Fp</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.CommunicationActionImpl#getPause <em>Pause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommunicationActionImpl extends ElementImpl implements CommunicationAction
{
  /**
   * The cached value of the '{@link #getPc() <em>Pc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPc()
   * @generated
   * @ordered
   */
  protected SubprogramCall pc;

  /**
   * The cached value of the '{@link #getPo() <em>Po</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPo()
   * @generated
   * @ordered
   */
  protected PortOutput po;

  /**
   * The cached value of the '{@link #getPi() <em>Pi</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPi()
   * @generated
   * @ordered
   */
  protected PortInput pi;

  /**
   * The cached value of the '{@link #getFp() <em>Fp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFp()
   * @generated
   * @ordered
   */
  protected FreezePort fp;

  /**
   * The cached value of the '{@link #getPause() <em>Pause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPause()
   * @generated
   * @ordered
   */
  protected Pause pause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommunicationActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getCommunicationAction();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubprogramCall getPc()
  {
    return pc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPc(SubprogramCall newPc, NotificationChain msgs)
  {
    SubprogramCall oldPc = pc;
    pc = newPc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PC, oldPc, newPc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPc(SubprogramCall newPc)
  {
    if (newPc != pc)
    {
      NotificationChain msgs = null;
      if (pc != null)
        msgs = ((InternalEObject)pc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PC, null, msgs);
      if (newPc != null)
        msgs = ((InternalEObject)newPc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PC, null, msgs);
      msgs = basicSetPc(newPc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PC, newPc, newPc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortOutput getPo()
  {
    return po;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPo(PortOutput newPo, NotificationChain msgs)
  {
    PortOutput oldPo = po;
    po = newPo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PO, oldPo, newPo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPo(PortOutput newPo)
  {
    if (newPo != po)
    {
      NotificationChain msgs = null;
      if (po != null)
        msgs = ((InternalEObject)po).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PO, null, msgs);
      if (newPo != null)
        msgs = ((InternalEObject)newPo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PO, null, msgs);
      msgs = basicSetPo(newPo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PO, newPo, newPo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortInput getPi()
  {
    return pi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPi(PortInput newPi, NotificationChain msgs)
  {
    PortInput oldPi = pi;
    pi = newPi;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PI, oldPi, newPi);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPi(PortInput newPi)
  {
    if (newPi != pi)
    {
      NotificationChain msgs = null;
      if (pi != null)
        msgs = ((InternalEObject)pi).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PI, null, msgs);
      if (newPi != null)
        msgs = ((InternalEObject)newPi).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PI, null, msgs);
      msgs = basicSetPi(newPi, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PI, newPi, newPi));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreezePort getFp()
  {
    return fp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFp(FreezePort newFp, NotificationChain msgs)
  {
    FreezePort oldFp = fp;
    fp = newFp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__FP, oldFp, newFp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFp(FreezePort newFp)
  {
    if (newFp != fp)
    {
      NotificationChain msgs = null;
      if (fp != null)
        msgs = ((InternalEObject)fp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__FP, null, msgs);
      if (newFp != null)
        msgs = ((InternalEObject)newFp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__FP, null, msgs);
      msgs = basicSetFp(newFp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__FP, newFp, newFp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pause getPause()
  {
    return pause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPause(Pause newPause, NotificationChain msgs)
  {
    Pause oldPause = pause;
    pause = newPause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PAUSE, oldPause, newPause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPause(Pause newPause)
  {
    if (newPause != pause)
    {
      NotificationChain msgs = null;
      if (pause != null)
        msgs = ((InternalEObject)pause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PAUSE, null, msgs);
      if (newPause != null)
        msgs = ((InternalEObject)newPause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.COMMUNICATION_ACTION__PAUSE, null, msgs);
      msgs = basicSetPause(newPause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.COMMUNICATION_ACTION__PAUSE, newPause, newPause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.COMMUNICATION_ACTION__PC:
        return basicSetPc(null, msgs);
      case BLESSPackage.COMMUNICATION_ACTION__PO:
        return basicSetPo(null, msgs);
      case BLESSPackage.COMMUNICATION_ACTION__PI:
        return basicSetPi(null, msgs);
      case BLESSPackage.COMMUNICATION_ACTION__FP:
        return basicSetFp(null, msgs);
      case BLESSPackage.COMMUNICATION_ACTION__PAUSE:
        return basicSetPause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.COMMUNICATION_ACTION__PC:
        return getPc();
      case BLESSPackage.COMMUNICATION_ACTION__PO:
        return getPo();
      case BLESSPackage.COMMUNICATION_ACTION__PI:
        return getPi();
      case BLESSPackage.COMMUNICATION_ACTION__FP:
        return getFp();
      case BLESSPackage.COMMUNICATION_ACTION__PAUSE:
        return getPause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.COMMUNICATION_ACTION__PC:
        setPc((SubprogramCall)newValue);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PO:
        setPo((PortOutput)newValue);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PI:
        setPi((PortInput)newValue);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__FP:
        setFp((FreezePort)newValue);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PAUSE:
        setPause((Pause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.COMMUNICATION_ACTION__PC:
        setPc((SubprogramCall)null);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PO:
        setPo((PortOutput)null);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PI:
        setPi((PortInput)null);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__FP:
        setFp((FreezePort)null);
        return;
      case BLESSPackage.COMMUNICATION_ACTION__PAUSE:
        setPause((Pause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.COMMUNICATION_ACTION__PC:
        return pc != null;
      case BLESSPackage.COMMUNICATION_ACTION__PO:
        return po != null;
      case BLESSPackage.COMMUNICATION_ACTION__PI:
        return pi != null;
      case BLESSPackage.COMMUNICATION_ACTION__FP:
        return fp != null;
      case BLESSPackage.COMMUNICATION_ACTION__PAUSE:
        return pause != null;
    }
    return super.eIsSet(featureID);
  }

} //CommunicationActionImpl
