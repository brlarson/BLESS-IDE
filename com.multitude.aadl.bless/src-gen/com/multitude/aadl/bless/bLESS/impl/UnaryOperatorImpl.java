/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.UnaryOperator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Unary Operator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UnaryOperatorImpl#getNot <em>Not</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UnaryOperatorImpl#getUnary_minus <em>Unary minus</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UnaryOperatorImpl#getAbsolute_value <em>Absolute value</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UnaryOperatorImpl#getTruncate <em>Truncate</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UnaryOperatorImpl#getRound <em>Round</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnaryOperatorImpl extends ElementImpl implements UnaryOperator
{
  /**
   * The default value of the '{@link #getNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot()
   * @generated
   * @ordered
   */
  protected static final String NOT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot()
   * @generated
   * @ordered
   */
  protected String not = NOT_EDEFAULT;

  /**
   * The default value of the '{@link #getUnary_minus() <em>Unary minus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnary_minus()
   * @generated
   * @ordered
   */
  protected static final String UNARY_MINUS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUnary_minus() <em>Unary minus</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnary_minus()
   * @generated
   * @ordered
   */
  protected String unary_minus = UNARY_MINUS_EDEFAULT;

  /**
   * The default value of the '{@link #getAbsolute_value() <em>Absolute value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbsolute_value()
   * @generated
   * @ordered
   */
  protected static final String ABSOLUTE_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAbsolute_value() <em>Absolute value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbsolute_value()
   * @generated
   * @ordered
   */
  protected String absolute_value = ABSOLUTE_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getTruncate() <em>Truncate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTruncate()
   * @generated
   * @ordered
   */
  protected static final String TRUNCATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTruncate() <em>Truncate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTruncate()
   * @generated
   * @ordered
   */
  protected String truncate = TRUNCATE_EDEFAULT;

  /**
   * The default value of the '{@link #getRound() <em>Round</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRound()
   * @generated
   * @ordered
   */
  protected static final String ROUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRound() <em>Round</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRound()
   * @generated
   * @ordered
   */
  protected String round = ROUND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnaryOperatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getUnaryOperator();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNot()
  {
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNot(String newNot)
  {
    String oldNot = not;
    not = newNot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNARY_OPERATOR__NOT, oldNot, not));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getUnary_minus()
  {
    return unary_minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnary_minus(String newUnary_minus)
  {
    String oldUnary_minus = unary_minus;
    unary_minus = newUnary_minus;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNARY_OPERATOR__UNARY_MINUS, oldUnary_minus, unary_minus));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAbsolute_value()
  {
    return absolute_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbsolute_value(String newAbsolute_value)
  {
    String oldAbsolute_value = absolute_value;
    absolute_value = newAbsolute_value;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNARY_OPERATOR__ABSOLUTE_VALUE, oldAbsolute_value, absolute_value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTruncate()
  {
    return truncate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTruncate(String newTruncate)
  {
    String oldTruncate = truncate;
    truncate = newTruncate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNARY_OPERATOR__TRUNCATE, oldTruncate, truncate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRound()
  {
    return round;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRound(String newRound)
  {
    String oldRound = round;
    round = newRound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNARY_OPERATOR__ROUND, oldRound, round));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.UNARY_OPERATOR__NOT:
        return getNot();
      case BLESSPackage.UNARY_OPERATOR__UNARY_MINUS:
        return getUnary_minus();
      case BLESSPackage.UNARY_OPERATOR__ABSOLUTE_VALUE:
        return getAbsolute_value();
      case BLESSPackage.UNARY_OPERATOR__TRUNCATE:
        return getTruncate();
      case BLESSPackage.UNARY_OPERATOR__ROUND:
        return getRound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.UNARY_OPERATOR__NOT:
        setNot((String)newValue);
        return;
      case BLESSPackage.UNARY_OPERATOR__UNARY_MINUS:
        setUnary_minus((String)newValue);
        return;
      case BLESSPackage.UNARY_OPERATOR__ABSOLUTE_VALUE:
        setAbsolute_value((String)newValue);
        return;
      case BLESSPackage.UNARY_OPERATOR__TRUNCATE:
        setTruncate((String)newValue);
        return;
      case BLESSPackage.UNARY_OPERATOR__ROUND:
        setRound((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.UNARY_OPERATOR__NOT:
        setNot(NOT_EDEFAULT);
        return;
      case BLESSPackage.UNARY_OPERATOR__UNARY_MINUS:
        setUnary_minus(UNARY_MINUS_EDEFAULT);
        return;
      case BLESSPackage.UNARY_OPERATOR__ABSOLUTE_VALUE:
        setAbsolute_value(ABSOLUTE_VALUE_EDEFAULT);
        return;
      case BLESSPackage.UNARY_OPERATOR__TRUNCATE:
        setTruncate(TRUNCATE_EDEFAULT);
        return;
      case BLESSPackage.UNARY_OPERATOR__ROUND:
        setRound(ROUND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.UNARY_OPERATOR__NOT:
        return NOT_EDEFAULT == null ? not != null : !NOT_EDEFAULT.equals(not);
      case BLESSPackage.UNARY_OPERATOR__UNARY_MINUS:
        return UNARY_MINUS_EDEFAULT == null ? unary_minus != null : !UNARY_MINUS_EDEFAULT.equals(unary_minus);
      case BLESSPackage.UNARY_OPERATOR__ABSOLUTE_VALUE:
        return ABSOLUTE_VALUE_EDEFAULT == null ? absolute_value != null : !ABSOLUTE_VALUE_EDEFAULT.equals(absolute_value);
      case BLESSPackage.UNARY_OPERATOR__TRUNCATE:
        return TRUNCATE_EDEFAULT == null ? truncate != null : !TRUNCATE_EDEFAULT.equals(truncate);
      case BLESSPackage.UNARY_OPERATOR__ROUND:
        return ROUND_EDEFAULT == null ? round != null : !ROUND_EDEFAULT.equals(round);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (not: ");
    result.append(not);
    result.append(", unary_minus: ");
    result.append(unary_minus);
    result.append(", absolute_value: ");
    result.append(absolute_value);
    result.append(", truncate: ");
    result.append(truncate);
    result.append(", round: ");
    result.append(round);
    result.append(')');
    return result.toString();
  }

} //UnaryOperatorImpl
