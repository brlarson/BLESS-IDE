/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.EventTrigger;
import com.multitude.aadl.bless.bLESS.TriggerLogicalExpression;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.osate.aadl2.NamedElement;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.EventTriggerImpl#getSub <em>Sub</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.EventTriggerImpl#getPort <em>Port</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.EventTriggerImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.EventTriggerImpl#getTle <em>Tle</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventTriggerImpl extends ElementImpl implements EventTrigger
{
  /**
   * The cached value of the '{@link #getSub() <em>Sub</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSub()
   * @generated
   * @ordered
   */
  protected EList<String> sub;

  /**
   * The cached value of the '{@link #getPort() <em>Port</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected NamedElement port;

  /**
   * The default value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected static final String INDEX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected String index = INDEX_EDEFAULT;

  /**
   * The cached value of the '{@link #getTle() <em>Tle</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTle()
   * @generated
   * @ordered
   */
  protected TriggerLogicalExpression tle;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventTriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getEventTrigger();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSub()
  {
    if (sub == null)
    {
      sub = new EDataTypeEList<String>(String.class, this, BLESSPackage.EVENT_TRIGGER__SUB);
    }
    return sub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedElement getPort()
  {
    if (port != null && ((EObject)port).eIsProxy())
    {
      InternalEObject oldPort = (InternalEObject)port;
      port = (NamedElement)eResolveProxy(oldPort);
      if (port != oldPort)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.EVENT_TRIGGER__PORT, oldPort, port));
      }
    }
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NamedElement basicGetPort()
  {
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPort(NamedElement newPort)
  {
    NamedElement oldPort = port;
    port = newPort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EVENT_TRIGGER__PORT, oldPort, port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndex(String newIndex)
  {
    String oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EVENT_TRIGGER__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TriggerLogicalExpression getTle()
  {
    return tle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTle(TriggerLogicalExpression newTle, NotificationChain msgs)
  {
    TriggerLogicalExpression oldTle = tle;
    tle = newTle;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EVENT_TRIGGER__TLE, oldTle, newTle);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTle(TriggerLogicalExpression newTle)
  {
    if (newTle != tle)
    {
      NotificationChain msgs = null;
      if (tle != null)
        msgs = ((InternalEObject)tle).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EVENT_TRIGGER__TLE, null, msgs);
      if (newTle != null)
        msgs = ((InternalEObject)newTle).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EVENT_TRIGGER__TLE, null, msgs);
      msgs = basicSetTle(newTle, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EVENT_TRIGGER__TLE, newTle, newTle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.EVENT_TRIGGER__TLE:
        return basicSetTle(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.EVENT_TRIGGER__SUB:
        return getSub();
      case BLESSPackage.EVENT_TRIGGER__PORT:
        if (resolve) return getPort();
        return basicGetPort();
      case BLESSPackage.EVENT_TRIGGER__INDEX:
        return getIndex();
      case BLESSPackage.EVENT_TRIGGER__TLE:
        return getTle();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.EVENT_TRIGGER__SUB:
        getSub().clear();
        getSub().addAll((Collection<? extends String>)newValue);
        return;
      case BLESSPackage.EVENT_TRIGGER__PORT:
        setPort((NamedElement)newValue);
        return;
      case BLESSPackage.EVENT_TRIGGER__INDEX:
        setIndex((String)newValue);
        return;
      case BLESSPackage.EVENT_TRIGGER__TLE:
        setTle((TriggerLogicalExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EVENT_TRIGGER__SUB:
        getSub().clear();
        return;
      case BLESSPackage.EVENT_TRIGGER__PORT:
        setPort((NamedElement)null);
        return;
      case BLESSPackage.EVENT_TRIGGER__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
      case BLESSPackage.EVENT_TRIGGER__TLE:
        setTle((TriggerLogicalExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EVENT_TRIGGER__SUB:
        return sub != null && !sub.isEmpty();
      case BLESSPackage.EVENT_TRIGGER__PORT:
        return port != null;
      case BLESSPackage.EVENT_TRIGGER__INDEX:
        return INDEX_EDEFAULT == null ? index != null : !INDEX_EDEFAULT.equals(index);
      case BLESSPackage.EVENT_TRIGGER__TLE:
        return tle != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sub: ");
    result.append(sub);
    result.append(", index: ");
    result.append(index);
    result.append(')');
    return result.toString();
  }

} //EventTriggerImpl
