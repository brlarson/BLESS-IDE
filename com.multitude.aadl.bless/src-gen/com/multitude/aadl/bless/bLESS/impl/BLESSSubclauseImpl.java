/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.AssertClause;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BLESSSubclause;
import com.multitude.aadl.bless.bLESS.InvariantClause;
import com.multitude.aadl.bless.bLESS.StatesSection;
import com.multitude.aadl.bless.bLESS.Transitions;
import com.multitude.aadl.bless.bLESS.VariablesSection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.AnnexSubclauseImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Subclause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#isNo_proof <em>No proof</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#getAssert_clause <em>Assert clause</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#getInvariant <em>Invariant</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#getStatesSection <em>States Section</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BLESSSubclauseImpl#getTransitions <em>Transitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BLESSSubclauseImpl extends AnnexSubclauseImpl implements BLESSSubclause
{
  /**
   * The default value of the '{@link #isNo_proof() <em>No proof</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNo_proof()
   * @generated
   * @ordered
   */
  protected static final boolean NO_PROOF_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNo_proof() <em>No proof</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNo_proof()
   * @generated
   * @ordered
   */
  protected boolean no_proof = NO_PROOF_EDEFAULT;

  /**
   * The cached value of the '{@link #getAssert_clause() <em>Assert clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssert_clause()
   * @generated
   * @ordered
   */
  protected AssertClause assert_clause;

  /**
   * The cached value of the '{@link #getInvariant() <em>Invariant</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvariant()
   * @generated
   * @ordered
   */
  protected InvariantClause invariant;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected VariablesSection variables;

  /**
   * The cached value of the '{@link #getStatesSection() <em>States Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatesSection()
   * @generated
   * @ordered
   */
  protected StatesSection statesSection;

  /**
   * The cached value of the '{@link #getTransitions() <em>Transitions</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransitions()
   * @generated
   * @ordered
   */
  protected Transitions transitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BLESSSubclauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getBLESSSubclause();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNo_proof()
  {
    return no_proof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNo_proof(boolean newNo_proof)
  {
    boolean oldNo_proof = no_proof;
    no_proof = newNo_proof;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__NO_PROOF, oldNo_proof, no_proof));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertClause getAssert_clause()
  {
    return assert_clause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssert_clause(AssertClause newAssert_clause, NotificationChain msgs)
  {
    AssertClause oldAssert_clause = assert_clause;
    assert_clause = newAssert_clause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE, oldAssert_clause, newAssert_clause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssert_clause(AssertClause newAssert_clause)
  {
    if (newAssert_clause != assert_clause)
    {
      NotificationChain msgs = null;
      if (assert_clause != null)
        msgs = ((InternalEObject)assert_clause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE, null, msgs);
      if (newAssert_clause != null)
        msgs = ((InternalEObject)newAssert_clause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE, null, msgs);
      msgs = basicSetAssert_clause(newAssert_clause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE, newAssert_clause, newAssert_clause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvariantClause getInvariant()
  {
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInvariant(InvariantClause newInvariant, NotificationChain msgs)
  {
    InvariantClause oldInvariant = invariant;
    invariant = newInvariant;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__INVARIANT, oldInvariant, newInvariant);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInvariant(InvariantClause newInvariant)
  {
    if (newInvariant != invariant)
    {
      NotificationChain msgs = null;
      if (invariant != null)
        msgs = ((InternalEObject)invariant).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__INVARIANT, null, msgs);
      if (newInvariant != null)
        msgs = ((InternalEObject)newInvariant).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__INVARIANT, null, msgs);
      msgs = basicSetInvariant(newInvariant, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__INVARIANT, newInvariant, newInvariant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariablesSection getVariables()
  {
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariables(VariablesSection newVariables, NotificationChain msgs)
  {
    VariablesSection oldVariables = variables;
    variables = newVariables;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__VARIABLES, oldVariables, newVariables);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariables(VariablesSection newVariables)
  {
    if (newVariables != variables)
    {
      NotificationChain msgs = null;
      if (variables != null)
        msgs = ((InternalEObject)variables).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__VARIABLES, null, msgs);
      if (newVariables != null)
        msgs = ((InternalEObject)newVariables).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__VARIABLES, null, msgs);
      msgs = basicSetVariables(newVariables, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__VARIABLES, newVariables, newVariables));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatesSection getStatesSection()
  {
    return statesSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatesSection(StatesSection newStatesSection, NotificationChain msgs)
  {
    StatesSection oldStatesSection = statesSection;
    statesSection = newStatesSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION, oldStatesSection, newStatesSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatesSection(StatesSection newStatesSection)
  {
    if (newStatesSection != statesSection)
    {
      NotificationChain msgs = null;
      if (statesSection != null)
        msgs = ((InternalEObject)statesSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION, null, msgs);
      if (newStatesSection != null)
        msgs = ((InternalEObject)newStatesSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION, null, msgs);
      msgs = basicSetStatesSection(newStatesSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION, newStatesSection, newStatesSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Transitions getTransitions()
  {
    return transitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTransitions(Transitions newTransitions, NotificationChain msgs)
  {
    Transitions oldTransitions = transitions;
    transitions = newTransitions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS, oldTransitions, newTransitions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTransitions(Transitions newTransitions)
  {
    if (newTransitions != transitions)
    {
      NotificationChain msgs = null;
      if (transitions != null)
        msgs = ((InternalEObject)transitions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS, null, msgs);
      if (newTransitions != null)
        msgs = ((InternalEObject)newTransitions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS, null, msgs);
      msgs = basicSetTransitions(newTransitions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS, newTransitions, newTransitions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE:
        return basicSetAssert_clause(null, msgs);
      case BLESSPackage.BLESS_SUBCLAUSE__INVARIANT:
        return basicSetInvariant(null, msgs);
      case BLESSPackage.BLESS_SUBCLAUSE__VARIABLES:
        return basicSetVariables(null, msgs);
      case BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION:
        return basicSetStatesSection(null, msgs);
      case BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS:
        return basicSetTransitions(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.BLESS_SUBCLAUSE__NO_PROOF:
        return isNo_proof();
      case BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE:
        return getAssert_clause();
      case BLESSPackage.BLESS_SUBCLAUSE__INVARIANT:
        return getInvariant();
      case BLESSPackage.BLESS_SUBCLAUSE__VARIABLES:
        return getVariables();
      case BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION:
        return getStatesSection();
      case BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS:
        return getTransitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.BLESS_SUBCLAUSE__NO_PROOF:
        setNo_proof((Boolean)newValue);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE:
        setAssert_clause((AssertClause)newValue);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__INVARIANT:
        setInvariant((InvariantClause)newValue);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__VARIABLES:
        setVariables((VariablesSection)newValue);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION:
        setStatesSection((StatesSection)newValue);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS:
        setTransitions((Transitions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BLESS_SUBCLAUSE__NO_PROOF:
        setNo_proof(NO_PROOF_EDEFAULT);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE:
        setAssert_clause((AssertClause)null);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__INVARIANT:
        setInvariant((InvariantClause)null);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__VARIABLES:
        setVariables((VariablesSection)null);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION:
        setStatesSection((StatesSection)null);
        return;
      case BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS:
        setTransitions((Transitions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BLESS_SUBCLAUSE__NO_PROOF:
        return no_proof != NO_PROOF_EDEFAULT;
      case BLESSPackage.BLESS_SUBCLAUSE__ASSERT_CLAUSE:
        return assert_clause != null;
      case BLESSPackage.BLESS_SUBCLAUSE__INVARIANT:
        return invariant != null;
      case BLESSPackage.BLESS_SUBCLAUSE__VARIABLES:
        return variables != null;
      case BLESSPackage.BLESS_SUBCLAUSE__STATES_SECTION:
        return statesSection != null;
      case BLESSPackage.BLESS_SUBCLAUSE__TRANSITIONS:
        return transitions != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (no_proof: ");
    result.append(no_proof);
    result.append(')');
    return result.toString();
  }

} //BLESSSubclauseImpl
