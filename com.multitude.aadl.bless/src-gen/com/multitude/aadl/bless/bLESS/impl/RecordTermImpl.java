/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.RecordTerm;
import com.multitude.aadl.bless.bLESS.RecordValue;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Record Term</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RecordTermImpl#getRecord_type <em>Record type</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.RecordTermImpl#getRecord_value <em>Record value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RecordTermImpl extends ElementImpl implements RecordTerm
{
  /**
   * The cached value of the '{@link #getRecord_type() <em>Record type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecord_type()
   * @generated
   * @ordered
   */
  protected TypeDeclaration record_type;

  /**
   * The cached value of the '{@link #getRecord_value() <em>Record value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecord_value()
   * @generated
   * @ordered
   */
  protected EList<RecordValue> record_value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RecordTermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getRecordTerm();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeDeclaration getRecord_type()
  {
    if (record_type != null && record_type.eIsProxy())
    {
      InternalEObject oldRecord_type = (InternalEObject)record_type;
      record_type = (TypeDeclaration)eResolveProxy(oldRecord_type);
      if (record_type != oldRecord_type)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BLESSPackage.RECORD_TERM__RECORD_TYPE, oldRecord_type, record_type));
      }
    }
    return record_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclaration basicGetRecord_type()
  {
    return record_type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRecord_type(TypeDeclaration newRecord_type)
  {
    TypeDeclaration oldRecord_type = record_type;
    record_type = newRecord_type;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.RECORD_TERM__RECORD_TYPE, oldRecord_type, record_type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<RecordValue> getRecord_value()
  {
    if (record_value == null)
    {
      record_value = new EObjectContainmentEList<RecordValue>(RecordValue.class, this, BLESSPackage.RECORD_TERM__RECORD_VALUE);
    }
    return record_value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.RECORD_TERM__RECORD_VALUE:
        return ((InternalEList<?>)getRecord_value()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.RECORD_TERM__RECORD_TYPE:
        if (resolve) return getRecord_type();
        return basicGetRecord_type();
      case BLESSPackage.RECORD_TERM__RECORD_VALUE:
        return getRecord_value();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.RECORD_TERM__RECORD_TYPE:
        setRecord_type((TypeDeclaration)newValue);
        return;
      case BLESSPackage.RECORD_TERM__RECORD_VALUE:
        getRecord_value().clear();
        getRecord_value().addAll((Collection<? extends RecordValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.RECORD_TERM__RECORD_TYPE:
        setRecord_type((TypeDeclaration)null);
        return;
      case BLESSPackage.RECORD_TERM__RECORD_VALUE:
        getRecord_value().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.RECORD_TERM__RECORD_TYPE:
        return record_type != null;
      case BLESSPackage.RECORD_TERM__RECORD_VALUE:
        return record_value != null && !record_value.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RecordTermImpl
