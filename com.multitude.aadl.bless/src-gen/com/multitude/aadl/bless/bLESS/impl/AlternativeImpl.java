/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.Alternative;
import com.multitude.aadl.bless.bLESS.BAAlternative;
import com.multitude.aadl.bless.bLESS.BLESSAlternative;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BooleanExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alternative</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.AlternativeImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.AlternativeImpl#getBlessalt <em>Blessalt</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.AlternativeImpl#getBaalt <em>Baalt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AlternativeImpl extends ElementImpl implements Alternative
{
  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected BooleanExpression guard;

  /**
   * The cached value of the '{@link #getBlessalt() <em>Blessalt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlessalt()
   * @generated
   * @ordered
   */
  protected BLESSAlternative blessalt;

  /**
   * The cached value of the '{@link #getBaalt() <em>Baalt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaalt()
   * @generated
   * @ordered
   */
  protected BAAlternative baalt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AlternativeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getAlternative();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(BooleanExpression newGuard, NotificationChain msgs)
  {
    BooleanExpression oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(BooleanExpression newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLESSAlternative getBlessalt()
  {
    return blessalt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlessalt(BLESSAlternative newBlessalt, NotificationChain msgs)
  {
    BLESSAlternative oldBlessalt = blessalt;
    blessalt = newBlessalt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__BLESSALT, oldBlessalt, newBlessalt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlessalt(BLESSAlternative newBlessalt)
  {
    if (newBlessalt != blessalt)
    {
      NotificationChain msgs = null;
      if (blessalt != null)
        msgs = ((InternalEObject)blessalt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__BLESSALT, null, msgs);
      if (newBlessalt != null)
        msgs = ((InternalEObject)newBlessalt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__BLESSALT, null, msgs);
      msgs = basicSetBlessalt(newBlessalt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__BLESSALT, newBlessalt, newBlessalt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BAAlternative getBaalt()
  {
    return baalt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBaalt(BAAlternative newBaalt, NotificationChain msgs)
  {
    BAAlternative oldBaalt = baalt;
    baalt = newBaalt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__BAALT, oldBaalt, newBaalt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaalt(BAAlternative newBaalt)
  {
    if (newBaalt != baalt)
    {
      NotificationChain msgs = null;
      if (baalt != null)
        msgs = ((InternalEObject)baalt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__BAALT, null, msgs);
      if (newBaalt != null)
        msgs = ((InternalEObject)newBaalt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ALTERNATIVE__BAALT, null, msgs);
      msgs = basicSetBaalt(newBaalt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ALTERNATIVE__BAALT, newBaalt, newBaalt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.ALTERNATIVE__GUARD:
        return basicSetGuard(null, msgs);
      case BLESSPackage.ALTERNATIVE__BLESSALT:
        return basicSetBlessalt(null, msgs);
      case BLESSPackage.ALTERNATIVE__BAALT:
        return basicSetBaalt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.ALTERNATIVE__GUARD:
        return getGuard();
      case BLESSPackage.ALTERNATIVE__BLESSALT:
        return getBlessalt();
      case BLESSPackage.ALTERNATIVE__BAALT:
        return getBaalt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.ALTERNATIVE__GUARD:
        setGuard((BooleanExpression)newValue);
        return;
      case BLESSPackage.ALTERNATIVE__BLESSALT:
        setBlessalt((BLESSAlternative)newValue);
        return;
      case BLESSPackage.ALTERNATIVE__BAALT:
        setBaalt((BAAlternative)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ALTERNATIVE__GUARD:
        setGuard((BooleanExpression)null);
        return;
      case BLESSPackage.ALTERNATIVE__BLESSALT:
        setBlessalt((BLESSAlternative)null);
        return;
      case BLESSPackage.ALTERNATIVE__BAALT:
        setBaalt((BAAlternative)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ALTERNATIVE__GUARD:
        return guard != null;
      case BLESSPackage.ALTERNATIVE__BLESSALT:
        return blessalt != null;
      case BLESSPackage.ALTERNATIVE__BAALT:
        return baalt != null;
    }
    return super.eIsSet(featureID);
  }

} //AlternativeImpl
