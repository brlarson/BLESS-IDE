/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.DispatchConjunction;
import com.multitude.aadl.bless.bLESS.DispatchExpression;
import com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dispatch Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchExpressionImpl#getDc <em>Dc</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchExpressionImpl#isOr <em>Or</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchExpressionImpl#getSubprogramaccessdispatch <em>Subprogramaccessdispatch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DispatchExpressionImpl extends ElementImpl implements DispatchExpression
{
  /**
   * The cached value of the '{@link #getDc() <em>Dc</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDc()
   * @generated
   * @ordered
   */
  protected EList<DispatchConjunction> dc;

  /**
   * The default value of the '{@link #isOr() <em>Or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOr()
   * @generated
   * @ordered
   */
  protected static final boolean OR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOr() <em>Or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOr()
   * @generated
   * @ordered
   */
  protected boolean or = OR_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubprogramaccessdispatch() <em>Subprogramaccessdispatch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubprogramaccessdispatch()
   * @generated
   * @ordered
   */
  protected SubprogramAccessDispatch subprogramaccessdispatch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DispatchExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getDispatchExpression();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DispatchConjunction> getDc()
  {
    if (dc == null)
    {
      dc = new EObjectContainmentEList<DispatchConjunction>(DispatchConjunction.class, this, BLESSPackage.DISPATCH_EXPRESSION__DC);
    }
    return dc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOr()
  {
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOr(boolean newOr)
  {
    boolean oldOr = or;
    or = newOr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_EXPRESSION__OR, oldOr, or));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubprogramAccessDispatch getSubprogramaccessdispatch()
  {
    return subprogramaccessdispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubprogramaccessdispatch(SubprogramAccessDispatch newSubprogramaccessdispatch, NotificationChain msgs)
  {
    SubprogramAccessDispatch oldSubprogramaccessdispatch = subprogramaccessdispatch;
    subprogramaccessdispatch = newSubprogramaccessdispatch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH, oldSubprogramaccessdispatch, newSubprogramaccessdispatch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubprogramaccessdispatch(SubprogramAccessDispatch newSubprogramaccessdispatch)
  {
    if (newSubprogramaccessdispatch != subprogramaccessdispatch)
    {
      NotificationChain msgs = null;
      if (subprogramaccessdispatch != null)
        msgs = ((InternalEObject)subprogramaccessdispatch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH, null, msgs);
      if (newSubprogramaccessdispatch != null)
        msgs = ((InternalEObject)newSubprogramaccessdispatch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH, null, msgs);
      msgs = basicSetSubprogramaccessdispatch(newSubprogramaccessdispatch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH, newSubprogramaccessdispatch, newSubprogramaccessdispatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_EXPRESSION__DC:
        return ((InternalEList<?>)getDc()).basicRemove(otherEnd, msgs);
      case BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH:
        return basicSetSubprogramaccessdispatch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_EXPRESSION__DC:
        return getDc();
      case BLESSPackage.DISPATCH_EXPRESSION__OR:
        return isOr();
      case BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH:
        return getSubprogramaccessdispatch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_EXPRESSION__DC:
        getDc().clear();
        getDc().addAll((Collection<? extends DispatchConjunction>)newValue);
        return;
      case BLESSPackage.DISPATCH_EXPRESSION__OR:
        setOr((Boolean)newValue);
        return;
      case BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH:
        setSubprogramaccessdispatch((SubprogramAccessDispatch)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_EXPRESSION__DC:
        getDc().clear();
        return;
      case BLESSPackage.DISPATCH_EXPRESSION__OR:
        setOr(OR_EDEFAULT);
        return;
      case BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH:
        setSubprogramaccessdispatch((SubprogramAccessDispatch)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_EXPRESSION__DC:
        return dc != null && !dc.isEmpty();
      case BLESSPackage.DISPATCH_EXPRESSION__OR:
        return or != OR_EDEFAULT;
      case BLESSPackage.DISPATCH_EXPRESSION__SUBPROGRAMACCESSDISPATCH:
        return subprogramaccessdispatch != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (or: ");
    result.append(or);
    result.append(')');
    return result.toString();
  }

} //DispatchExpressionImpl
