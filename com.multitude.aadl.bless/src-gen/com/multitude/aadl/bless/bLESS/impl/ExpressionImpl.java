/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.CountingQuantification;
import com.multitude.aadl.bless.bLESS.Disjunction;
import com.multitude.aadl.bless.bLESS.ExistentialQuantification;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.ProductQuantification;
import com.multitude.aadl.bless.bLESS.SumQuantification;
import com.multitude.aadl.bless.bLESS.UniversalQuantification;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getAll <em>All</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getExists <em>Exists</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getSum <em>Sum</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getProduct <em>Product</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getNumberof <em>Numberof</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getL <em>L</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getSym <em>Sym</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExpressionImpl#getR <em>R</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends PredicateImpl implements Expression
{
  /**
   * The cached value of the '{@link #getAll() <em>All</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAll()
   * @generated
   * @ordered
   */
  protected UniversalQuantification all;

  /**
   * The cached value of the '{@link #getExists() <em>Exists</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExists()
   * @generated
   * @ordered
   */
  protected ExistentialQuantification exists;

  /**
   * The cached value of the '{@link #getSum() <em>Sum</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSum()
   * @generated
   * @ordered
   */
  protected SumQuantification sum;

  /**
   * The cached value of the '{@link #getProduct() <em>Product</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProduct()
   * @generated
   * @ordered
   */
  protected ProductQuantification product;

  /**
   * The cached value of the '{@link #getNumberof() <em>Numberof</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumberof()
   * @generated
   * @ordered
   */
  protected CountingQuantification numberof;

  /**
   * The cached value of the '{@link #getL() <em>L</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected Disjunction l;

  /**
   * The default value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected static final String SYM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSym() <em>Sym</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSym()
   * @generated
   * @ordered
   */
  protected String sym = SYM_EDEFAULT;

  /**
   * The cached value of the '{@link #getR() <em>R</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getR()
   * @generated
   * @ordered
   */
  protected Disjunction r;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getExpression();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniversalQuantification getAll()
  {
    return all;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAll(UniversalQuantification newAll, NotificationChain msgs)
  {
    UniversalQuantification oldAll = all;
    all = newAll;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__ALL, oldAll, newAll);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAll(UniversalQuantification newAll)
  {
    if (newAll != all)
    {
      NotificationChain msgs = null;
      if (all != null)
        msgs = ((InternalEObject)all).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__ALL, null, msgs);
      if (newAll != null)
        msgs = ((InternalEObject)newAll).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__ALL, null, msgs);
      msgs = basicSetAll(newAll, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__ALL, newAll, newAll));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentialQuantification getExists()
  {
    return exists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExists(ExistentialQuantification newExists, NotificationChain msgs)
  {
    ExistentialQuantification oldExists = exists;
    exists = newExists;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__EXISTS, oldExists, newExists);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExists(ExistentialQuantification newExists)
  {
    if (newExists != exists)
    {
      NotificationChain msgs = null;
      if (exists != null)
        msgs = ((InternalEObject)exists).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__EXISTS, null, msgs);
      if (newExists != null)
        msgs = ((InternalEObject)newExists).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__EXISTS, null, msgs);
      msgs = basicSetExists(newExists, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__EXISTS, newExists, newExists));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SumQuantification getSum()
  {
    return sum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSum(SumQuantification newSum, NotificationChain msgs)
  {
    SumQuantification oldSum = sum;
    sum = newSum;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__SUM, oldSum, newSum);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSum(SumQuantification newSum)
  {
    if (newSum != sum)
    {
      NotificationChain msgs = null;
      if (sum != null)
        msgs = ((InternalEObject)sum).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__SUM, null, msgs);
      if (newSum != null)
        msgs = ((InternalEObject)newSum).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__SUM, null, msgs);
      msgs = basicSetSum(newSum, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__SUM, newSum, newSum));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductQuantification getProduct()
  {
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProduct(ProductQuantification newProduct, NotificationChain msgs)
  {
    ProductQuantification oldProduct = product;
    product = newProduct;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__PRODUCT, oldProduct, newProduct);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProduct(ProductQuantification newProduct)
  {
    if (newProduct != product)
    {
      NotificationChain msgs = null;
      if (product != null)
        msgs = ((InternalEObject)product).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__PRODUCT, null, msgs);
      if (newProduct != null)
        msgs = ((InternalEObject)newProduct).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__PRODUCT, null, msgs);
      msgs = basicSetProduct(newProduct, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__PRODUCT, newProduct, newProduct));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CountingQuantification getNumberof()
  {
    return numberof;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNumberof(CountingQuantification newNumberof, NotificationChain msgs)
  {
    CountingQuantification oldNumberof = numberof;
    numberof = newNumberof;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__NUMBEROF, oldNumberof, newNumberof);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumberof(CountingQuantification newNumberof)
  {
    if (newNumberof != numberof)
    {
      NotificationChain msgs = null;
      if (numberof != null)
        msgs = ((InternalEObject)numberof).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__NUMBEROF, null, msgs);
      if (newNumberof != null)
        msgs = ((InternalEObject)newNumberof).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__NUMBEROF, null, msgs);
      msgs = basicSetNumberof(newNumberof, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__NUMBEROF, newNumberof, newNumberof));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disjunction getL()
  {
    return l;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetL(Disjunction newL, NotificationChain msgs)
  {
    Disjunction oldL = l;
    l = newL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__L, oldL, newL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setL(Disjunction newL)
  {
    if (newL != l)
    {
      NotificationChain msgs = null;
      if (l != null)
        msgs = ((InternalEObject)l).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__L, null, msgs);
      if (newL != null)
        msgs = ((InternalEObject)newL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__L, null, msgs);
      msgs = basicSetL(newL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__L, newL, newL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSym()
  {
    return sym;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSym(String newSym)
  {
    String oldSym = sym;
    sym = newSym;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__SYM, oldSym, sym));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disjunction getR()
  {
    return r;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetR(Disjunction newR, NotificationChain msgs)
  {
    Disjunction oldR = r;
    r = newR;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__R, oldR, newR);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setR(Disjunction newR)
  {
    if (newR != r)
    {
      NotificationChain msgs = null;
      if (r != null)
        msgs = ((InternalEObject)r).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__R, null, msgs);
      if (newR != null)
        msgs = ((InternalEObject)newR).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXPRESSION__R, null, msgs);
      msgs = basicSetR(newR, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXPRESSION__R, newR, newR));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.EXPRESSION__ALL:
        return basicSetAll(null, msgs);
      case BLESSPackage.EXPRESSION__EXISTS:
        return basicSetExists(null, msgs);
      case BLESSPackage.EXPRESSION__SUM:
        return basicSetSum(null, msgs);
      case BLESSPackage.EXPRESSION__PRODUCT:
        return basicSetProduct(null, msgs);
      case BLESSPackage.EXPRESSION__NUMBEROF:
        return basicSetNumberof(null, msgs);
      case BLESSPackage.EXPRESSION__L:
        return basicSetL(null, msgs);
      case BLESSPackage.EXPRESSION__R:
        return basicSetR(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.EXPRESSION__ALL:
        return getAll();
      case BLESSPackage.EXPRESSION__EXISTS:
        return getExists();
      case BLESSPackage.EXPRESSION__SUM:
        return getSum();
      case BLESSPackage.EXPRESSION__PRODUCT:
        return getProduct();
      case BLESSPackage.EXPRESSION__NUMBEROF:
        return getNumberof();
      case BLESSPackage.EXPRESSION__L:
        return getL();
      case BLESSPackage.EXPRESSION__SYM:
        return getSym();
      case BLESSPackage.EXPRESSION__R:
        return getR();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.EXPRESSION__ALL:
        setAll((UniversalQuantification)newValue);
        return;
      case BLESSPackage.EXPRESSION__EXISTS:
        setExists((ExistentialQuantification)newValue);
        return;
      case BLESSPackage.EXPRESSION__SUM:
        setSum((SumQuantification)newValue);
        return;
      case BLESSPackage.EXPRESSION__PRODUCT:
        setProduct((ProductQuantification)newValue);
        return;
      case BLESSPackage.EXPRESSION__NUMBEROF:
        setNumberof((CountingQuantification)newValue);
        return;
      case BLESSPackage.EXPRESSION__L:
        setL((Disjunction)newValue);
        return;
      case BLESSPackage.EXPRESSION__SYM:
        setSym((String)newValue);
        return;
      case BLESSPackage.EXPRESSION__R:
        setR((Disjunction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EXPRESSION__ALL:
        setAll((UniversalQuantification)null);
        return;
      case BLESSPackage.EXPRESSION__EXISTS:
        setExists((ExistentialQuantification)null);
        return;
      case BLESSPackage.EXPRESSION__SUM:
        setSum((SumQuantification)null);
        return;
      case BLESSPackage.EXPRESSION__PRODUCT:
        setProduct((ProductQuantification)null);
        return;
      case BLESSPackage.EXPRESSION__NUMBEROF:
        setNumberof((CountingQuantification)null);
        return;
      case BLESSPackage.EXPRESSION__L:
        setL((Disjunction)null);
        return;
      case BLESSPackage.EXPRESSION__SYM:
        setSym(SYM_EDEFAULT);
        return;
      case BLESSPackage.EXPRESSION__R:
        setR((Disjunction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EXPRESSION__ALL:
        return all != null;
      case BLESSPackage.EXPRESSION__EXISTS:
        return exists != null;
      case BLESSPackage.EXPRESSION__SUM:
        return sum != null;
      case BLESSPackage.EXPRESSION__PRODUCT:
        return product != null;
      case BLESSPackage.EXPRESSION__NUMBEROF:
        return numberof != null;
      case BLESSPackage.EXPRESSION__L:
        return l != null;
      case BLESSPackage.EXPRESSION__SYM:
        return SYM_EDEFAULT == null ? sym != null : !SYM_EDEFAULT.equals(sym);
      case BLESSPackage.EXPRESSION__R:
        return r != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sym: ");
    result.append(sym);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
