/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.DispatchCondition;
import com.multitude.aadl.bless.bLESS.DispatchExpression;
import com.multitude.aadl.bless.bLESS.FreezePort;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dispatch Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchConditionImpl#getDispatch <em>Dispatch</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchConditionImpl#getDe <em>De</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchConditionImpl#getFrozen <em>Frozen</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DispatchConditionImpl extends ElementImpl implements DispatchCondition
{
  /**
   * The default value of the '{@link #getDispatch() <em>Dispatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDispatch()
   * @generated
   * @ordered
   */
  protected static final String DISPATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDispatch() <em>Dispatch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDispatch()
   * @generated
   * @ordered
   */
  protected String dispatch = DISPATCH_EDEFAULT;

  /**
   * The cached value of the '{@link #getDe() <em>De</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDe()
   * @generated
   * @ordered
   */
  protected DispatchExpression de;

  /**
   * The cached value of the '{@link #getFrozen() <em>Frozen</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrozen()
   * @generated
   * @ordered
   */
  protected FreezePort frozen;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DispatchConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getDispatchCondition();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDispatch()
  {
    return dispatch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDispatch(String newDispatch)
  {
    String oldDispatch = dispatch;
    dispatch = newDispatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_CONDITION__DISPATCH, oldDispatch, dispatch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DispatchExpression getDe()
  {
    return de;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDe(DispatchExpression newDe, NotificationChain msgs)
  {
    DispatchExpression oldDe = de;
    de = newDe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_CONDITION__DE, oldDe, newDe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDe(DispatchExpression newDe)
  {
    if (newDe != de)
    {
      NotificationChain msgs = null;
      if (de != null)
        msgs = ((InternalEObject)de).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_CONDITION__DE, null, msgs);
      if (newDe != null)
        msgs = ((InternalEObject)newDe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_CONDITION__DE, null, msgs);
      msgs = basicSetDe(newDe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_CONDITION__DE, newDe, newDe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FreezePort getFrozen()
  {
    return frozen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrozen(FreezePort newFrozen, NotificationChain msgs)
  {
    FreezePort oldFrozen = frozen;
    frozen = newFrozen;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_CONDITION__FROZEN, oldFrozen, newFrozen);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrozen(FreezePort newFrozen)
  {
    if (newFrozen != frozen)
    {
      NotificationChain msgs = null;
      if (frozen != null)
        msgs = ((InternalEObject)frozen).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_CONDITION__FROZEN, null, msgs);
      if (newFrozen != null)
        msgs = ((InternalEObject)newFrozen).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_CONDITION__FROZEN, null, msgs);
      msgs = basicSetFrozen(newFrozen, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_CONDITION__FROZEN, newFrozen, newFrozen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_CONDITION__DE:
        return basicSetDe(null, msgs);
      case BLESSPackage.DISPATCH_CONDITION__FROZEN:
        return basicSetFrozen(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_CONDITION__DISPATCH:
        return getDispatch();
      case BLESSPackage.DISPATCH_CONDITION__DE:
        return getDe();
      case BLESSPackage.DISPATCH_CONDITION__FROZEN:
        return getFrozen();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_CONDITION__DISPATCH:
        setDispatch((String)newValue);
        return;
      case BLESSPackage.DISPATCH_CONDITION__DE:
        setDe((DispatchExpression)newValue);
        return;
      case BLESSPackage.DISPATCH_CONDITION__FROZEN:
        setFrozen((FreezePort)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_CONDITION__DISPATCH:
        setDispatch(DISPATCH_EDEFAULT);
        return;
      case BLESSPackage.DISPATCH_CONDITION__DE:
        setDe((DispatchExpression)null);
        return;
      case BLESSPackage.DISPATCH_CONDITION__FROZEN:
        setFrozen((FreezePort)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_CONDITION__DISPATCH:
        return DISPATCH_EDEFAULT == null ? dispatch != null : !DISPATCH_EDEFAULT.equals(dispatch);
      case BLESSPackage.DISPATCH_CONDITION__DE:
        return de != null;
      case BLESSPackage.DISPATCH_CONDITION__FROZEN:
        return frozen != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dispatch: ");
    result.append(dispatch);
    result.append(')');
    return result.toString();
  }

} //DispatchConditionImpl
