/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.AssertionLibrary;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.GhostVariables;
import com.multitude.aadl.bless.bLESS.NamedAssertion;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.AnnexLibraryImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assertion Library</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.AssertionLibraryImpl#getGhosts <em>Ghosts</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.AssertionLibraryImpl#getAssertion_list <em>Assertion list</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssertionLibraryImpl extends AnnexLibraryImpl implements AssertionLibrary
{
  /**
   * The cached value of the '{@link #getGhosts() <em>Ghosts</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGhosts()
   * @generated
   * @ordered
   */
  protected GhostVariables ghosts;

  /**
   * The cached value of the '{@link #getAssertion_list() <em>Assertion list</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertion_list()
   * @generated
   * @ordered
   */
  protected EList<NamedAssertion> assertion_list;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssertionLibraryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getAssertionLibrary();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GhostVariables getGhosts()
  {
    return ghosts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGhosts(GhostVariables newGhosts, NotificationChain msgs)
  {
    GhostVariables oldGhosts = ghosts;
    ghosts = newGhosts;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.ASSERTION_LIBRARY__GHOSTS, oldGhosts, newGhosts);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGhosts(GhostVariables newGhosts)
  {
    if (newGhosts != ghosts)
    {
      NotificationChain msgs = null;
      if (ghosts != null)
        msgs = ((InternalEObject)ghosts).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ASSERTION_LIBRARY__GHOSTS, null, msgs);
      if (newGhosts != null)
        msgs = ((InternalEObject)newGhosts).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.ASSERTION_LIBRARY__GHOSTS, null, msgs);
      msgs = basicSetGhosts(newGhosts, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.ASSERTION_LIBRARY__GHOSTS, newGhosts, newGhosts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedAssertion> getAssertion_list()
  {
    if (assertion_list == null)
    {
      assertion_list = new EObjectContainmentEList<NamedAssertion>(NamedAssertion.class, this, BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST);
    }
    return assertion_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.ASSERTION_LIBRARY__GHOSTS:
        return basicSetGhosts(null, msgs);
      case BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST:
        return ((InternalEList<?>)getAssertion_list()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.ASSERTION_LIBRARY__GHOSTS:
        return getGhosts();
      case BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST:
        return getAssertion_list();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.ASSERTION_LIBRARY__GHOSTS:
        setGhosts((GhostVariables)newValue);
        return;
      case BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST:
        getAssertion_list().clear();
        getAssertion_list().addAll((Collection<? extends NamedAssertion>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ASSERTION_LIBRARY__GHOSTS:
        setGhosts((GhostVariables)null);
        return;
      case BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST:
        getAssertion_list().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.ASSERTION_LIBRARY__GHOSTS:
        return ghosts != null;
      case BLESSPackage.ASSERTION_LIBRARY__ASSERTION_LIST:
        return assertion_list != null && !assertion_list.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AssertionLibraryImpl
