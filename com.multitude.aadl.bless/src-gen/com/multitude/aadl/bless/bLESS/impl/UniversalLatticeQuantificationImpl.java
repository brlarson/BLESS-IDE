/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.ForallVariable;
import com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Universal Lattice Quantification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UniversalLatticeQuantificationImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UniversalLatticeQuantificationImpl#getLower_bound <em>Lower bound</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UniversalLatticeQuantificationImpl#getUpper_bound <em>Upper bound</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.UniversalLatticeQuantificationImpl#getElq <em>Elq</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UniversalLatticeQuantificationImpl extends ElementImpl implements UniversalLatticeQuantification
{
  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<ForallVariable> variables;

  /**
   * The cached value of the '{@link #getLower_bound() <em>Lower bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLower_bound()
   * @generated
   * @ordered
   */
  protected Expression lower_bound;

  /**
   * The cached value of the '{@link #getUpper_bound() <em>Upper bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpper_bound()
   * @generated
   * @ordered
   */
  protected Expression upper_bound;

  /**
   * The cached value of the '{@link #getElq() <em>Elq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElq()
   * @generated
   * @ordered
   */
  protected ExistentialLatticeQuantification elq;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UniversalLatticeQuantificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getUniversalLatticeQuantification();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ForallVariable> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<ForallVariable>(ForallVariable.class, this, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLower_bound()
  {
    return lower_bound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLower_bound(Expression newLower_bound, NotificationChain msgs)
  {
    Expression oldLower_bound = lower_bound;
    lower_bound = newLower_bound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND, oldLower_bound, newLower_bound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLower_bound(Expression newLower_bound)
  {
    if (newLower_bound != lower_bound)
    {
      NotificationChain msgs = null;
      if (lower_bound != null)
        msgs = ((InternalEObject)lower_bound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND, null, msgs);
      if (newLower_bound != null)
        msgs = ((InternalEObject)newLower_bound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND, null, msgs);
      msgs = basicSetLower_bound(newLower_bound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND, newLower_bound, newLower_bound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getUpper_bound()
  {
    return upper_bound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpper_bound(Expression newUpper_bound, NotificationChain msgs)
  {
    Expression oldUpper_bound = upper_bound;
    upper_bound = newUpper_bound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND, oldUpper_bound, newUpper_bound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpper_bound(Expression newUpper_bound)
  {
    if (newUpper_bound != upper_bound)
    {
      NotificationChain msgs = null;
      if (upper_bound != null)
        msgs = ((InternalEObject)upper_bound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND, null, msgs);
      if (newUpper_bound != null)
        msgs = ((InternalEObject)newUpper_bound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND, null, msgs);
      msgs = basicSetUpper_bound(newUpper_bound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND, newUpper_bound, newUpper_bound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistentialLatticeQuantification getElq()
  {
    return elq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElq(ExistentialLatticeQuantification newElq, NotificationChain msgs)
  {
    ExistentialLatticeQuantification oldElq = elq;
    elq = newElq;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ, oldElq, newElq);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElq(ExistentialLatticeQuantification newElq)
  {
    if (newElq != elq)
    {
      NotificationChain msgs = null;
      if (elq != null)
        msgs = ((InternalEObject)elq).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ, null, msgs);
      if (newElq != null)
        msgs = ((InternalEObject)newElq).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ, null, msgs);
      msgs = basicSetElq(newElq, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ, newElq, newElq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND:
        return basicSetLower_bound(null, msgs);
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND:
        return basicSetUpper_bound(null, msgs);
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ:
        return basicSetElq(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES:
        return getVariables();
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND:
        return getLower_bound();
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND:
        return getUpper_bound();
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ:
        return getElq();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends ForallVariable>)newValue);
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND:
        setLower_bound((Expression)newValue);
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND:
        setUpper_bound((Expression)newValue);
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ:
        setElq((ExistentialLatticeQuantification)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES:
        getVariables().clear();
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND:
        setLower_bound((Expression)null);
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND:
        setUpper_bound((Expression)null);
        return;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ:
        setElq((ExistentialLatticeQuantification)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__VARIABLES:
        return variables != null && !variables.isEmpty();
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__LOWER_BOUND:
        return lower_bound != null;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__UPPER_BOUND:
        return upper_bound != null;
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION__ELQ:
        return elq != null;
    }
    return super.eIsSet(featureID);
  }

} //UniversalLatticeQuantificationImpl
