/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.AssertedAction;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BehaviorActions;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior Actions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorActionsImpl#getAction <em>Action</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorActionsImpl#isSemi <em>Semi</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorActionsImpl#isAmp <em>Amp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorActionsImpl extends ElementImpl implements BehaviorActions
{
  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EList<AssertedAction> action;

  /**
   * The default value of the '{@link #isSemi() <em>Semi</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemi()
   * @generated
   * @ordered
   */
  protected static final boolean SEMI_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSemi() <em>Semi</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemi()
   * @generated
   * @ordered
   */
  protected boolean semi = SEMI_EDEFAULT;

  /**
   * The default value of the '{@link #isAmp() <em>Amp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmp()
   * @generated
   * @ordered
   */
  protected static final boolean AMP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAmp() <em>Amp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmp()
   * @generated
   * @ordered
   */
  protected boolean amp = AMP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorActionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getBehaviorActions();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssertedAction> getAction()
  {
    if (action == null)
    {
      action = new EObjectContainmentEList<AssertedAction>(AssertedAction.class, this, BLESSPackage.BEHAVIOR_ACTIONS__ACTION);
    }
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSemi()
  {
    return semi;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSemi(boolean newSemi)
  {
    boolean oldSemi = semi;
    semi = newSemi;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_ACTIONS__SEMI, oldSemi, semi));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAmp()
  {
    return amp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAmp(boolean newAmp)
  {
    boolean oldAmp = amp;
    amp = newAmp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_ACTIONS__AMP, oldAmp, amp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_ACTIONS__ACTION:
        return ((InternalEList<?>)getAction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_ACTIONS__ACTION:
        return getAction();
      case BLESSPackage.BEHAVIOR_ACTIONS__SEMI:
        return isSemi();
      case BLESSPackage.BEHAVIOR_ACTIONS__AMP:
        return isAmp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_ACTIONS__ACTION:
        getAction().clear();
        getAction().addAll((Collection<? extends AssertedAction>)newValue);
        return;
      case BLESSPackage.BEHAVIOR_ACTIONS__SEMI:
        setSemi((Boolean)newValue);
        return;
      case BLESSPackage.BEHAVIOR_ACTIONS__AMP:
        setAmp((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_ACTIONS__ACTION:
        getAction().clear();
        return;
      case BLESSPackage.BEHAVIOR_ACTIONS__SEMI:
        setSemi(SEMI_EDEFAULT);
        return;
      case BLESSPackage.BEHAVIOR_ACTIONS__AMP:
        setAmp(AMP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_ACTIONS__ACTION:
        return action != null && !action.isEmpty();
      case BLESSPackage.BEHAVIOR_ACTIONS__SEMI:
        return semi != SEMI_EDEFAULT;
      case BLESSPackage.BEHAVIOR_ACTIONS__AMP:
        return amp != AMP_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (semi: ");
    result.append(semi);
    result.append(", amp: ");
    result.append(amp);
    result.append(')');
    return result.toString();
  }

} //BehaviorActionsImpl
