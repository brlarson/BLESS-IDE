/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BehaviorState;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.NamedElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorStateImpl#isInitial <em>Initial</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorStateImpl#isComplete <em>Complete</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorStateImpl#isFinal <em>Final</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorStateImpl#isMode <em>Mode</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.BehaviorStateImpl#getState_assertion <em>State assertion</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorStateImpl extends NamedElementImpl implements BehaviorState
{
  /**
   * The default value of the '{@link #isInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitial()
   * @generated
   * @ordered
   */
  protected static final boolean INITIAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInitial() <em>Initial</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInitial()
   * @generated
   * @ordered
   */
  protected boolean initial = INITIAL_EDEFAULT;

  /**
   * The default value of the '{@link #isComplete() <em>Complete</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComplete()
   * @generated
   * @ordered
   */
  protected static final boolean COMPLETE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isComplete() <em>Complete</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComplete()
   * @generated
   * @ordered
   */
  protected boolean complete = COMPLETE_EDEFAULT;

  /**
   * The default value of the '{@link #isFinal() <em>Final</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFinal()
   * @generated
   * @ordered
   */
  protected static final boolean FINAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFinal() <em>Final</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFinal()
   * @generated
   * @ordered
   */
  protected boolean final_ = FINAL_EDEFAULT;

  /**
   * The default value of the '{@link #isMode() <em>Mode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMode()
   * @generated
   * @ordered
   */
  protected static final boolean MODE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMode() <em>Mode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMode()
   * @generated
   * @ordered
   */
  protected boolean mode = MODE_EDEFAULT;

  /**
   * The cached value of the '{@link #getState_assertion() <em>State assertion</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState_assertion()
   * @generated
   * @ordered
   */
  protected Assertion state_assertion;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorStateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getBehaviorState();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInitial()
  {
    return initial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitial(boolean newInitial)
  {
    boolean oldInitial = initial;
    initial = newInitial;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__INITIAL, oldInitial, initial));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isComplete()
  {
    return complete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComplete(boolean newComplete)
  {
    boolean oldComplete = complete;
    complete = newComplete;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__COMPLETE, oldComplete, complete));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFinal()
  {
    return final_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFinal(boolean newFinal)
  {
    boolean oldFinal = final_;
    final_ = newFinal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__FINAL, oldFinal, final_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMode()
  {
    return mode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMode(boolean newMode)
  {
    boolean oldMode = mode;
    mode = newMode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__MODE, oldMode, mode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assertion getState_assertion()
  {
    return state_assertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetState_assertion(Assertion newState_assertion, NotificationChain msgs)
  {
    Assertion oldState_assertion = state_assertion;
    state_assertion = newState_assertion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION, oldState_assertion, newState_assertion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState_assertion(Assertion newState_assertion)
  {
    if (newState_assertion != state_assertion)
    {
      NotificationChain msgs = null;
      if (state_assertion != null)
        msgs = ((InternalEObject)state_assertion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION, null, msgs);
      if (newState_assertion != null)
        msgs = ((InternalEObject)newState_assertion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION, null, msgs);
      msgs = basicSetState_assertion(newState_assertion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION, newState_assertion, newState_assertion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION:
        return basicSetState_assertion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_STATE__INITIAL:
        return isInitial();
      case BLESSPackage.BEHAVIOR_STATE__COMPLETE:
        return isComplete();
      case BLESSPackage.BEHAVIOR_STATE__FINAL:
        return isFinal();
      case BLESSPackage.BEHAVIOR_STATE__MODE:
        return isMode();
      case BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION:
        return getState_assertion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_STATE__INITIAL:
        setInitial((Boolean)newValue);
        return;
      case BLESSPackage.BEHAVIOR_STATE__COMPLETE:
        setComplete((Boolean)newValue);
        return;
      case BLESSPackage.BEHAVIOR_STATE__FINAL:
        setFinal((Boolean)newValue);
        return;
      case BLESSPackage.BEHAVIOR_STATE__MODE:
        setMode((Boolean)newValue);
        return;
      case BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION:
        setState_assertion((Assertion)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_STATE__INITIAL:
        setInitial(INITIAL_EDEFAULT);
        return;
      case BLESSPackage.BEHAVIOR_STATE__COMPLETE:
        setComplete(COMPLETE_EDEFAULT);
        return;
      case BLESSPackage.BEHAVIOR_STATE__FINAL:
        setFinal(FINAL_EDEFAULT);
        return;
      case BLESSPackage.BEHAVIOR_STATE__MODE:
        setMode(MODE_EDEFAULT);
        return;
      case BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION:
        setState_assertion((Assertion)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.BEHAVIOR_STATE__INITIAL:
        return initial != INITIAL_EDEFAULT;
      case BLESSPackage.BEHAVIOR_STATE__COMPLETE:
        return complete != COMPLETE_EDEFAULT;
      case BLESSPackage.BEHAVIOR_STATE__FINAL:
        return final_ != FINAL_EDEFAULT;
      case BLESSPackage.BEHAVIOR_STATE__MODE:
        return mode != MODE_EDEFAULT;
      case BLESSPackage.BEHAVIOR_STATE__STATE_ASSERTION:
        return state_assertion != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (initial: ");
    result.append(initial);
    result.append(", complete: ");
    result.append(complete);
    result.append(", final: ");
    result.append(final_);
    result.append(", mode: ");
    result.append(mode);
    result.append(')');
    return result.toString();
  }

} //BehaviorStateImpl
