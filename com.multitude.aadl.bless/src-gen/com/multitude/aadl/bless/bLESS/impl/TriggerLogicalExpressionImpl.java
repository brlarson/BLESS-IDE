/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.EventTrigger;
import com.multitude.aadl.bless.bLESS.LogicalOperator;
import com.multitude.aadl.bless.bLESS.TriggerLogicalExpression;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trigger Logical Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TriggerLogicalExpressionImpl#getFirst <em>First</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TriggerLogicalExpressionImpl#getOp <em>Op</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TriggerLogicalExpressionImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.TriggerLogicalExpressionImpl#getOps <em>Ops</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriggerLogicalExpressionImpl extends ElementImpl implements TriggerLogicalExpression
{
  /**
   * The cached value of the '{@link #getFirst() <em>First</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirst()
   * @generated
   * @ordered
   */
  protected EventTrigger first;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected LogicalOperator op;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected EList<EventTrigger> trigger;

  /**
   * The cached value of the '{@link #getOps() <em>Ops</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOps()
   * @generated
   * @ordered
   */
  protected EList<LogicalOperator> ops;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerLogicalExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getTriggerLogicalExpression();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventTrigger getFirst()
  {
    return first;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirst(EventTrigger newFirst, NotificationChain msgs)
  {
    EventTrigger oldFirst = first;
    first = newFirst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST, oldFirst, newFirst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFirst(EventTrigger newFirst)
  {
    if (newFirst != first)
    {
      NotificationChain msgs = null;
      if (first != null)
        msgs = ((InternalEObject)first).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST, null, msgs);
      if (newFirst != null)
        msgs = ((InternalEObject)newFirst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST, null, msgs);
      msgs = basicSetFirst(newFirst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST, newFirst, newFirst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperator getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOp(LogicalOperator newOp, NotificationChain msgs)
  {
    LogicalOperator oldOp = op;
    op = newOp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP, oldOp, newOp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(LogicalOperator newOp)
  {
    if (newOp != op)
    {
      NotificationChain msgs = null;
      if (op != null)
        msgs = ((InternalEObject)op).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP, null, msgs);
      if (newOp != null)
        msgs = ((InternalEObject)newOp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP, null, msgs);
      msgs = basicSetOp(newOp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP, newOp, newOp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EventTrigger> getTrigger()
  {
    if (trigger == null)
    {
      trigger = new EObjectContainmentEList<EventTrigger>(EventTrigger.class, this, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER);
    }
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LogicalOperator> getOps()
  {
    if (ops == null)
    {
      ops = new EObjectContainmentEList<LogicalOperator>(LogicalOperator.class, this, BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS);
    }
    return ops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST:
        return basicSetFirst(null, msgs);
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP:
        return basicSetOp(null, msgs);
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER:
        return ((InternalEList<?>)getTrigger()).basicRemove(otherEnd, msgs);
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS:
        return ((InternalEList<?>)getOps()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST:
        return getFirst();
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP:
        return getOp();
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER:
        return getTrigger();
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS:
        return getOps();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST:
        setFirst((EventTrigger)newValue);
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP:
        setOp((LogicalOperator)newValue);
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER:
        getTrigger().clear();
        getTrigger().addAll((Collection<? extends EventTrigger>)newValue);
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS:
        getOps().clear();
        getOps().addAll((Collection<? extends LogicalOperator>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST:
        setFirst((EventTrigger)null);
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP:
        setOp((LogicalOperator)null);
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER:
        getTrigger().clear();
        return;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS:
        getOps().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__FIRST:
        return first != null;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OP:
        return op != null;
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__TRIGGER:
        return trigger != null && !trigger.isEmpty();
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION__OPS:
        return ops != null && !ops.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TriggerLogicalExpressionImpl
