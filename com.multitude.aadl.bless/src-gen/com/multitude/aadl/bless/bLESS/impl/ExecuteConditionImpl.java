/**
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BooleanExpression;
import com.multitude.aadl.bless.bLESS.ExecuteCondition;
import com.multitude.aadl.bless.bLESS.Otherwise;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Execute Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExecuteConditionImpl#getEor <em>Eor</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.ExecuteConditionImpl#getOtherwise <em>Otherwise</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExecuteConditionImpl extends ElementImpl implements ExecuteCondition
{
  /**
   * The cached value of the '{@link #getEor() <em>Eor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEor()
   * @generated
   * @ordered
   */
  protected BooleanExpression eor;

  /**
   * The cached value of the '{@link #getOtherwise() <em>Otherwise</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherwise()
   * @generated
   * @ordered
   */
  protected Otherwise otherwise;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExecuteConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getExecuteCondition();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression getEor()
  {
    return eor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEor(BooleanExpression newEor, NotificationChain msgs)
  {
    BooleanExpression oldEor = eor;
    eor = newEor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXECUTE_CONDITION__EOR, oldEor, newEor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEor(BooleanExpression newEor)
  {
    if (newEor != eor)
    {
      NotificationChain msgs = null;
      if (eor != null)
        msgs = ((InternalEObject)eor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXECUTE_CONDITION__EOR, null, msgs);
      if (newEor != null)
        msgs = ((InternalEObject)newEor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXECUTE_CONDITION__EOR, null, msgs);
      msgs = basicSetEor(newEor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXECUTE_CONDITION__EOR, newEor, newEor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Otherwise getOtherwise()
  {
    return otherwise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOtherwise(Otherwise newOtherwise, NotificationChain msgs)
  {
    Otherwise oldOtherwise = otherwise;
    otherwise = newOtherwise;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.EXECUTE_CONDITION__OTHERWISE, oldOtherwise, newOtherwise);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOtherwise(Otherwise newOtherwise)
  {
    if (newOtherwise != otherwise)
    {
      NotificationChain msgs = null;
      if (otherwise != null)
        msgs = ((InternalEObject)otherwise).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXECUTE_CONDITION__OTHERWISE, null, msgs);
      if (newOtherwise != null)
        msgs = ((InternalEObject)newOtherwise).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.EXECUTE_CONDITION__OTHERWISE, null, msgs);
      msgs = basicSetOtherwise(newOtherwise, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.EXECUTE_CONDITION__OTHERWISE, newOtherwise, newOtherwise));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.EXECUTE_CONDITION__EOR:
        return basicSetEor(null, msgs);
      case BLESSPackage.EXECUTE_CONDITION__OTHERWISE:
        return basicSetOtherwise(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.EXECUTE_CONDITION__EOR:
        return getEor();
      case BLESSPackage.EXECUTE_CONDITION__OTHERWISE:
        return getOtherwise();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.EXECUTE_CONDITION__EOR:
        setEor((BooleanExpression)newValue);
        return;
      case BLESSPackage.EXECUTE_CONDITION__OTHERWISE:
        setOtherwise((Otherwise)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EXECUTE_CONDITION__EOR:
        setEor((BooleanExpression)null);
        return;
      case BLESSPackage.EXECUTE_CONDITION__OTHERWISE:
        setOtherwise((Otherwise)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.EXECUTE_CONDITION__EOR:
        return eor != null;
      case BLESSPackage.EXECUTE_CONDITION__OTHERWISE:
        return otherwise != null;
    }
    return super.eIsSet(featureID);
  }

} //ExecuteConditionImpl
