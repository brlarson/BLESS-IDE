/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.ExpressionOrAny;
import com.multitude.aadl.bless.bLESS.NameTick;
import com.multitude.aadl.bless.bLESS.SimultaneousAssignment;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simultaneous Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.SimultaneousAssignmentImpl#getLhs <em>Lhs</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.SimultaneousAssignmentImpl#getAsgn <em>Asgn</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.SimultaneousAssignmentImpl#getRhs <em>Rhs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimultaneousAssignmentImpl extends ElementImpl implements SimultaneousAssignment
{
  /**
   * The cached value of the '{@link #getLhs() <em>Lhs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLhs()
   * @generated
   * @ordered
   */
  protected EList<NameTick> lhs;

  /**
   * The default value of the '{@link #getAsgn() <em>Asgn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsgn()
   * @generated
   * @ordered
   */
  protected static final String ASGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAsgn() <em>Asgn</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsgn()
   * @generated
   * @ordered
   */
  protected String asgn = ASGN_EDEFAULT;

  /**
   * The cached value of the '{@link #getRhs() <em>Rhs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRhs()
   * @generated
   * @ordered
   */
  protected EList<ExpressionOrAny> rhs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimultaneousAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getSimultaneousAssignment();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NameTick> getLhs()
  {
    if (lhs == null)
    {
      lhs = new EObjectContainmentEList<NameTick>(NameTick.class, this, BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS);
    }
    return lhs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAsgn()
  {
    return asgn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsgn(String newAsgn)
  {
    String oldAsgn = asgn;
    asgn = newAsgn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.SIMULTANEOUS_ASSIGNMENT__ASGN, oldAsgn, asgn));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ExpressionOrAny> getRhs()
  {
    if (rhs == null)
    {
      rhs = new EObjectContainmentEList<ExpressionOrAny>(ExpressionOrAny.class, this, BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS);
    }
    return rhs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS:
        return ((InternalEList<?>)getLhs()).basicRemove(otherEnd, msgs);
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS:
        return ((InternalEList<?>)getRhs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS:
        return getLhs();
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__ASGN:
        return getAsgn();
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS:
        return getRhs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS:
        getLhs().clear();
        getLhs().addAll((Collection<? extends NameTick>)newValue);
        return;
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__ASGN:
        setAsgn((String)newValue);
        return;
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS:
        getRhs().clear();
        getRhs().addAll((Collection<? extends ExpressionOrAny>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS:
        getLhs().clear();
        return;
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__ASGN:
        setAsgn(ASGN_EDEFAULT);
        return;
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS:
        getRhs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__LHS:
        return lhs != null && !lhs.isEmpty();
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__ASGN:
        return ASGN_EDEFAULT == null ? asgn != null : !ASGN_EDEFAULT.equals(asgn);
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT__RHS:
        return rhs != null && !rhs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (asgn: ");
    result.append(asgn);
    result.append(')');
    return result.toString();
  }

} //SimultaneousAssignmentImpl
