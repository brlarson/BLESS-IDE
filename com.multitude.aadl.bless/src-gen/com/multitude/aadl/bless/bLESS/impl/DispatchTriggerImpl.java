/**
 * (C) Multitude Corporation 2021
 * generated by Xtext 2.27.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.impl;

import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BehaviorTime;
import com.multitude.aadl.bless.bLESS.DispatchTrigger;
import com.multitude.aadl.bless.bLESS.PortName;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.osate.aadl2.NamedElement;

import org.osate.aadl2.impl.ElementImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dispatch Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchTriggerImpl#getPort <em>Port</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchTriggerImpl#getTimeout <em>Timeout</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchTriggerImpl#isLp <em>Lp</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchTriggerImpl#getPorts <em>Ports</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.impl.DispatchTriggerImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DispatchTriggerImpl extends ElementImpl implements DispatchTrigger
{
  /**
   * The cached value of the '{@link #getPort() <em>Port</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected PortName port;

  /**
   * The default value of the '{@link #getTimeout() <em>Timeout</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected static final String TIMEOUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeout() <em>Timeout</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeout()
   * @generated
   * @ordered
   */
  protected String timeout = TIMEOUT_EDEFAULT;

  /**
   * The default value of the '{@link #isLp() <em>Lp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLp()
   * @generated
   * @ordered
   */
  protected static final boolean LP_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLp() <em>Lp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLp()
   * @generated
   * @ordered
   */
  protected boolean lp = LP_EDEFAULT;

  /**
   * The cached value of the '{@link #getPorts() <em>Ports</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPorts()
   * @generated
   * @ordered
   */
  protected EList<NamedElement> ports;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected BehaviorTime time;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DispatchTriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BLESSPackage.eINSTANCE.getDispatchTrigger();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortName getPort()
  {
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPort(PortName newPort, NotificationChain msgs)
  {
    PortName oldPort = port;
    port = newPort;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__PORT, oldPort, newPort);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPort(PortName newPort)
  {
    if (newPort != port)
    {
      NotificationChain msgs = null;
      if (port != null)
        msgs = ((InternalEObject)port).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_TRIGGER__PORT, null, msgs);
      if (newPort != null)
        msgs = ((InternalEObject)newPort).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_TRIGGER__PORT, null, msgs);
      msgs = basicSetPort(newPort, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__PORT, newPort, newPort));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTimeout()
  {
    return timeout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeout(String newTimeout)
  {
    String oldTimeout = timeout;
    timeout = newTimeout;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__TIMEOUT, oldTimeout, timeout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLp()
  {
    return lp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLp(boolean newLp)
  {
    boolean oldLp = lp;
    lp = newLp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__LP, oldLp, lp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedElement> getPorts()
  {
    if (ports == null)
    {
      ports = new EObjectResolvingEList<NamedElement>(NamedElement.class, this, BLESSPackage.DISPATCH_TRIGGER__PORTS);
    }
    return ports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BehaviorTime getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(BehaviorTime newTime, NotificationChain msgs)
  {
    BehaviorTime oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(BehaviorTime newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_TRIGGER__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BLESSPackage.DISPATCH_TRIGGER__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BLESSPackage.DISPATCH_TRIGGER__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_TRIGGER__PORT:
        return basicSetPort(null, msgs);
      case BLESSPackage.DISPATCH_TRIGGER__TIME:
        return basicSetTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_TRIGGER__PORT:
        return getPort();
      case BLESSPackage.DISPATCH_TRIGGER__TIMEOUT:
        return getTimeout();
      case BLESSPackage.DISPATCH_TRIGGER__LP:
        return isLp();
      case BLESSPackage.DISPATCH_TRIGGER__PORTS:
        return getPorts();
      case BLESSPackage.DISPATCH_TRIGGER__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_TRIGGER__PORT:
        setPort((PortName)newValue);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__TIMEOUT:
        setTimeout((String)newValue);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__LP:
        setLp((Boolean)newValue);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__PORTS:
        getPorts().clear();
        getPorts().addAll((Collection<? extends NamedElement>)newValue);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__TIME:
        setTime((BehaviorTime)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_TRIGGER__PORT:
        setPort((PortName)null);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__TIMEOUT:
        setTimeout(TIMEOUT_EDEFAULT);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__LP:
        setLp(LP_EDEFAULT);
        return;
      case BLESSPackage.DISPATCH_TRIGGER__PORTS:
        getPorts().clear();
        return;
      case BLESSPackage.DISPATCH_TRIGGER__TIME:
        setTime((BehaviorTime)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BLESSPackage.DISPATCH_TRIGGER__PORT:
        return port != null;
      case BLESSPackage.DISPATCH_TRIGGER__TIMEOUT:
        return TIMEOUT_EDEFAULT == null ? timeout != null : !TIMEOUT_EDEFAULT.equals(timeout);
      case BLESSPackage.DISPATCH_TRIGGER__LP:
        return lp != LP_EDEFAULT;
      case BLESSPackage.DISPATCH_TRIGGER__PORTS:
        return ports != null && !ports.isEmpty();
      case BLESSPackage.DISPATCH_TRIGGER__TIME:
        return time != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (timeout: ");
    result.append(timeout);
    result.append(", lp: ");
    result.append(lp);
    result.append(')');
    return result.toString();
  }

} //DispatchTriggerImpl
