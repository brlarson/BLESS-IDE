/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.30.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.util;

import com.multitude.aadl.bless.bLESS.ANumber;
import com.multitude.aadl.bless.bLESS.Action;
import com.multitude.aadl.bless.bLESS.ActionSubclause;
import com.multitude.aadl.bless.bLESS.ActionTimeout;
import com.multitude.aadl.bless.bLESS.ActualParameter;
import com.multitude.aadl.bless.bLESS.AddSub;
import com.multitude.aadl.bless.bLESS.Alternative;
import com.multitude.aadl.bless.bLESS.ArrayRange;
import com.multitude.aadl.bless.bLESS.ArrayRangeList;
import com.multitude.aadl.bless.bLESS.ArrayType;
import com.multitude.aadl.bless.bLESS.AssertClause;
import com.multitude.aadl.bless.bLESS.AssertedAction;
import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.AssertionEnumeration;
import com.multitude.aadl.bless.bLESS.AssertionFunctionValue;
import com.multitude.aadl.bless.bLESS.AssertionLibrary;
import com.multitude.aadl.bless.bLESS.AssertionNumericExpression;
import com.multitude.aadl.bless.bLESS.Assignment;
import com.multitude.aadl.bless.bLESS.BAAlternative;
import com.multitude.aadl.bless.bLESS.BLESSAlternative;
import com.multitude.aadl.bless.bLESS.BLESSGrammarRoots;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BLESSSubclause;
import com.multitude.aadl.bless.bLESS.BasicAction;
import com.multitude.aadl.bless.bLESS.BehaviorActions;
import com.multitude.aadl.bless.bLESS.BehaviorState;
import com.multitude.aadl.bless.bLESS.BehaviorTime;
import com.multitude.aadl.bless.bLESS.BehaviorTransition;
import com.multitude.aadl.bless.bLESS.BooleanExpression;
import com.multitude.aadl.bless.bLESS.BooleanType;
import com.multitude.aadl.bless.bLESS.CaseChoice;
import com.multitude.aadl.bless.bLESS.CaseExpression;
import com.multitude.aadl.bless.bLESS.CatchClause;
import com.multitude.aadl.bless.bLESS.CatchClauseTerm;
import com.multitude.aadl.bless.bLESS.CombinableOperation;
import com.multitude.aadl.bless.bLESS.CommunicationAction;
import com.multitude.aadl.bless.bLESS.Computation;
import com.multitude.aadl.bless.bLESS.ConditionValuePair;
import com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction;
import com.multitude.aadl.bless.bLESS.ConditionalExpression;
import com.multitude.aadl.bless.bLESS.Conjunction;
import com.multitude.aadl.bless.bLESS.Constant;
import com.multitude.aadl.bless.bLESS.CountingQuantification;
import com.multitude.aadl.bless.bLESS.Disjunction;
import com.multitude.aadl.bless.bLESS.DispatchCondition;
import com.multitude.aadl.bless.bLESS.DispatchConjunction;
import com.multitude.aadl.bless.bLESS.DispatchExpression;
import com.multitude.aadl.bless.bLESS.DispatchTrigger;
import com.multitude.aadl.bless.bLESS.DoUntilLoop;
import com.multitude.aadl.bless.bLESS.ElseAlternative;
import com.multitude.aadl.bless.bLESS.ElseifAlternative;
import com.multitude.aadl.bless.bLESS.EnumerationPair;
import com.multitude.aadl.bless.bLESS.EnumerationType;
import com.multitude.aadl.bless.bLESS.EnumerationValue;
import com.multitude.aadl.bless.bLESS.EventTrigger;
import com.multitude.aadl.bless.bLESS.ExceptionLibrary;
import com.multitude.aadl.bless.bLESS.ExecuteCondition;
import com.multitude.aadl.bless.bLESS.ExecuteTimeout;
import com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification;
import com.multitude.aadl.bless.bLESS.ExistentialQuantification;
import com.multitude.aadl.bless.bLESS.Exp;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.ExpressionOrAny;
import com.multitude.aadl.bless.bLESS.ForLoop;
import com.multitude.aadl.bless.bLESS.ForallVariable;
import com.multitude.aadl.bless.bLESS.FormalActual;
import com.multitude.aadl.bless.bLESS.FormalActualList;
import com.multitude.aadl.bless.bLESS.FormalExpressionPair;
import com.multitude.aadl.bless.bLESS.FreezePort;
import com.multitude.aadl.bless.bLESS.FunctionParameters;
import com.multitude.aadl.bless.bLESS.GhostVariable;
import com.multitude.aadl.bless.bLESS.GhostVariables;
import com.multitude.aadl.bless.bLESS.GuardedAction;
import com.multitude.aadl.bless.bLESS.IndexExpression;
import com.multitude.aadl.bless.bLESS.IndexExpressionOrRange;
import com.multitude.aadl.bless.bLESS.InternalCondition;
import com.multitude.aadl.bless.bLESS.InvariantClause;
import com.multitude.aadl.bless.bLESS.Invocation;
import com.multitude.aadl.bless.bLESS.IssueException;
import com.multitude.aadl.bless.bLESS.LockingAction;
import com.multitude.aadl.bless.bLESS.LogicVariables;
import com.multitude.aadl.bless.bLESS.LogicalOperator;
import com.multitude.aadl.bless.bLESS.ModeCondition;
import com.multitude.aadl.bless.bLESS.MultDiv;
import com.multitude.aadl.bless.bLESS.NameTick;
import com.multitude.aadl.bless.bLESS.NamedAssertion;
import com.multitude.aadl.bless.bLESS.NamelessAssertion;
import com.multitude.aadl.bless.bLESS.NamelessEnumeration;
import com.multitude.aadl.bless.bLESS.NamelessFunction;
import com.multitude.aadl.bless.bLESS.NonNumericProperty;
import com.multitude.aadl.bless.bLESS.NullType;
import com.multitude.aadl.bless.bLESS.NumericExpression;
import com.multitude.aadl.bless.bLESS.Otherwise;
import com.multitude.aadl.bless.bLESS.ParenthesizedSubexpression;
import com.multitude.aadl.bless.bLESS.PartialName;
import com.multitude.aadl.bless.bLESS.Pause;
import com.multitude.aadl.bless.bLESS.PeriodShift;
import com.multitude.aadl.bless.bLESS.PortInput;
import com.multitude.aadl.bless.bLESS.PortName;
import com.multitude.aadl.bless.bLESS.PortOutput;
import com.multitude.aadl.bless.bLESS.Predicate;
import com.multitude.aadl.bless.bLESS.Priority;
import com.multitude.aadl.bless.bLESS.ProductQuantification;
import com.multitude.aadl.bless.bLESS.PropertyField;
import com.multitude.aadl.bless.bLESS.PropertyReference;
import com.multitude.aadl.bless.bLESS.QuantifiedVariables;
import com.multitude.aadl.bless.bLESS.Quantity;
import com.multitude.aadl.bless.bLESS.QuantityType;
import com.multitude.aadl.bless.bLESS.Range;
import com.multitude.aadl.bless.bLESS.RecordField;
import com.multitude.aadl.bless.bLESS.RecordTerm;
import com.multitude.aadl.bless.bLESS.RecordType;
import com.multitude.aadl.bless.bLESS.RecordValue;
import com.multitude.aadl.bless.bLESS.Relation;
import com.multitude.aadl.bless.bLESS.RootDeclaration;
import com.multitude.aadl.bless.bLESS.SimultaneousAssignment;
import com.multitude.aadl.bless.bLESS.StatesSection;
import com.multitude.aadl.bless.bLESS.StringType;
import com.multitude.aadl.bless.bLESS.SubProgramParameter;
import com.multitude.aadl.bless.bLESS.Subexpression;
import com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch;
import com.multitude.aadl.bless.bLESS.SubprogramCall;
import com.multitude.aadl.bless.bLESS.SumQuantification;
import com.multitude.aadl.bless.bLESS.ThrowsClause;
import com.multitude.aadl.bless.bLESS.TimedExpression;
import com.multitude.aadl.bless.bLESS.TimedSubject;
import com.multitude.aadl.bless.bLESS.Transitions;
import com.multitude.aadl.bless.bLESS.TriggerLogicalExpression;
import com.multitude.aadl.bless.bLESS.Type;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;
import com.multitude.aadl.bless.bLESS.TypeLibrary;
import com.multitude.aadl.bless.bLESS.TypeOrReference;
import com.multitude.aadl.bless.bLESS.UnaryOperator;
import com.multitude.aadl.bless.bLESS.UnitDeclaration;
import com.multitude.aadl.bless.bLESS.UnitExtension;
import com.multitude.aadl.bless.bLESS.UnitFactor;
import com.multitude.aadl.bless.bLESS.UnitFormula;
import com.multitude.aadl.bless.bLESS.UnitLibrary;
import com.multitude.aadl.bless.bLESS.UnitName;
import com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification;
import com.multitude.aadl.bless.bLESS.UniversalQuantification;
import com.multitude.aadl.bless.bLESS.Value;
import com.multitude.aadl.bless.bLESS.ValueName;
import com.multitude.aadl.bless.bLESS.Variable;
import com.multitude.aadl.bless.bLESS.VariableDeclaration;
import com.multitude.aadl.bless.bLESS.VariableList;
import com.multitude.aadl.bless.bLESS.VariablesSection;
import com.multitude.aadl.bless.bLESS.WhenThrow;
import com.multitude.aadl.bless.bLESS.WhileLoop;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.AnnexSubclause;
import org.osate.aadl2.Element;
import org.osate.aadl2.ModalElement;
import org.osate.aadl2.NamedElement;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.multitude.aadl.bless.bLESS.BLESSPackage
 * @generated
 */
public class BLESSSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BLESSPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BLESSSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = BLESSPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case BLESSPackage.BLESS_GRAMMAR_ROOTS:
      {
        BLESSGrammarRoots blessGrammarRoots = (BLESSGrammarRoots)theEObject;
        T result = caseBLESSGrammarRoots(blessGrammarRoots);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BLESS_SUBCLAUSE:
      {
        BLESSSubclause blessSubclause = (BLESSSubclause)theEObject;
        T result = caseBLESSSubclause(blessSubclause);
        if (result == null) result = caseAnnexSubclause(blessSubclause);
        if (result == null) result = caseModalElement(blessSubclause);
        if (result == null) result = caseNamedElement(blessSubclause);
        if (result == null) result = caseElement(blessSubclause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_LIBRARY:
      {
        UnitLibrary unitLibrary = (UnitLibrary)theEObject;
        T result = caseUnitLibrary(unitLibrary);
        if (result == null) result = caseAnnexLibrary(unitLibrary);
        if (result == null) result = caseNamedElement(unitLibrary);
        if (result == null) result = caseElement(unitLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTION_LIBRARY:
      {
        AssertionLibrary assertionLibrary = (AssertionLibrary)theEObject;
        T result = caseAssertionLibrary(assertionLibrary);
        if (result == null) result = caseAnnexLibrary(assertionLibrary);
        if (result == null) result = caseNamedElement(assertionLibrary);
        if (result == null) result = caseElement(assertionLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXCEPTION_LIBRARY:
      {
        ExceptionLibrary exceptionLibrary = (ExceptionLibrary)theEObject;
        T result = caseExceptionLibrary(exceptionLibrary);
        if (result == null) result = caseAnnexLibrary(exceptionLibrary);
        if (result == null) result = caseNamedElement(exceptionLibrary);
        if (result == null) result = caseElement(exceptionLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ACTION_SUBCLAUSE:
      {
        ActionSubclause actionSubclause = (ActionSubclause)theEObject;
        T result = caseActionSubclause(actionSubclause);
        if (result == null) result = caseAnnexSubclause(actionSubclause);
        if (result == null) result = caseModalElement(actionSubclause);
        if (result == null) result = caseNamedElement(actionSubclause);
        if (result == null) result = caseElement(actionSubclause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.INVARIANT_CLAUSE:
      {
        InvariantClause invariantClause = (InvariantClause)theEObject;
        T result = caseInvariantClause(invariantClause);
        if (result == null) result = caseElement(invariantClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VARIABLES_SECTION:
      {
        VariablesSection variablesSection = (VariablesSection)theEObject;
        T result = caseVariablesSection(variablesSection);
        if (result == null) result = caseElement(variablesSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.STATES_SECTION:
      {
        StatesSection statesSection = (StatesSection)theEObject;
        T result = caseStatesSection(statesSection);
        if (result == null) result = caseElement(statesSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BEHAVIOR_STATE:
      {
        BehaviorState behaviorState = (BehaviorState)theEObject;
        T result = caseBehaviorState(behaviorState);
        if (result == null) result = caseNamedElement(behaviorState);
        if (result == null) result = caseElement(behaviorState);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TRANSITIONS:
      {
        Transitions transitions = (Transitions)theEObject;
        T result = caseTransitions(transitions);
        if (result == null) result = caseElement(transitions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BEHAVIOR_TRANSITION:
      {
        BehaviorTransition behaviorTransition = (BehaviorTransition)theEObject;
        T result = caseBehaviorTransition(behaviorTransition);
        if (result == null) result = caseNamedElement(behaviorTransition);
        if (result == null) result = caseElement(behaviorTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PRIORITY:
      {
        Priority priority = (Priority)theEObject;
        T result = casePriority(priority);
        if (result == null) result = caseElement(priority);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DISPATCH_CONDITION:
      {
        DispatchCondition dispatchCondition = (DispatchCondition)theEObject;
        T result = caseDispatchCondition(dispatchCondition);
        if (result == null) result = caseElement(dispatchCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DISPATCH_EXPRESSION:
      {
        DispatchExpression dispatchExpression = (DispatchExpression)theEObject;
        T result = caseDispatchExpression(dispatchExpression);
        if (result == null) result = caseElement(dispatchExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SUBPROGRAM_ACCESS_DISPATCH:
      {
        SubprogramAccessDispatch subprogramAccessDispatch = (SubprogramAccessDispatch)theEObject;
        T result = caseSubprogramAccessDispatch(subprogramAccessDispatch);
        if (result == null) result = caseElement(subprogramAccessDispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DISPATCH_CONJUNCTION:
      {
        DispatchConjunction dispatchConjunction = (DispatchConjunction)theEObject;
        T result = caseDispatchConjunction(dispatchConjunction);
        if (result == null) result = caseElement(dispatchConjunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DISPATCH_TRIGGER:
      {
        DispatchTrigger dispatchTrigger = (DispatchTrigger)theEObject;
        T result = caseDispatchTrigger(dispatchTrigger);
        if (result == null) result = caseElement(dispatchTrigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PORT_NAME:
      {
        PortName portName = (PortName)theEObject;
        T result = casePortName(portName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXECUTE_CONDITION:
      {
        ExecuteCondition executeCondition = (ExecuteCondition)theEObject;
        T result = caseExecuteCondition(executeCondition);
        if (result == null) result = caseElement(executeCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXECUTE_TIMEOUT:
      {
        ExecuteTimeout executeTimeout = (ExecuteTimeout)theEObject;
        T result = caseExecuteTimeout(executeTimeout);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.OTHERWISE:
      {
        Otherwise otherwise = (Otherwise)theEObject;
        T result = caseOtherwise(otherwise);
        if (result == null) result = caseElement(otherwise);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.MODE_CONDITION:
      {
        ModeCondition modeCondition = (ModeCondition)theEObject;
        T result = caseModeCondition(modeCondition);
        if (result == null) result = caseElement(modeCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TRIGGER_LOGICAL_EXPRESSION:
      {
        TriggerLogicalExpression triggerLogicalExpression = (TriggerLogicalExpression)theEObject;
        T result = caseTriggerLogicalExpression(triggerLogicalExpression);
        if (result == null) result = caseElement(triggerLogicalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EVENT_TRIGGER:
      {
        EventTrigger eventTrigger = (EventTrigger)theEObject;
        T result = caseEventTrigger(eventTrigger);
        if (result == null) result = caseElement(eventTrigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.LOGICAL_OPERATOR:
      {
        LogicalOperator logicalOperator = (LogicalOperator)theEObject;
        T result = caseLogicalOperator(logicalOperator);
        if (result == null) result = caseElement(logicalOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.INTERNAL_CONDITION:
      {
        InternalCondition internalCondition = (InternalCondition)theEObject;
        T result = caseInternalCondition(internalCondition);
        if (result == null) result = caseElement(internalCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERT_CLAUSE:
      {
        AssertClause assertClause = (AssertClause)theEObject;
        T result = caseAssertClause(assertClause);
        if (result == null) result = caseElement(assertClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXISTENTIAL_LATTICE_QUANTIFICATION:
      {
        ExistentialLatticeQuantification existentialLatticeQuantification = (ExistentialLatticeQuantification)theEObject;
        T result = caseExistentialLatticeQuantification(existentialLatticeQuantification);
        if (result == null) result = caseElement(existentialLatticeQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.QUANTIFIED_VARIABLES:
      {
        QuantifiedVariables quantifiedVariables = (QuantifiedVariables)theEObject;
        T result = caseQuantifiedVariables(quantifiedVariables);
        if (result == null) result = caseElement(quantifiedVariables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIVERSAL_LATTICE_QUANTIFICATION:
      {
        UniversalLatticeQuantification universalLatticeQuantification = (UniversalLatticeQuantification)theEObject;
        T result = caseUniversalLatticeQuantification(universalLatticeQuantification);
        if (result == null) result = caseElement(universalLatticeQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FORALL_VARIABLE:
      {
        ForallVariable forallVariable = (ForallVariable)theEObject;
        T result = caseForallVariable(forallVariable);
        if (result == null) result = caseNamedElement(forallVariable);
        if (result == null) result = caseElement(forallVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VARIABLE_DECLARATION:
      {
        VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
        T result = caseVariableDeclaration(variableDeclaration);
        if (result == null) result = caseElement(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FUNCTION_PARAMETERS:
      {
        FunctionParameters functionParameters = (FunctionParameters)theEObject;
        T result = caseFunctionParameters(functionParameters);
        if (result == null) result = caseElement(functionParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FORMAL_EXPRESSION_PAIR:
      {
        FormalExpressionPair formalExpressionPair = (FormalExpressionPair)theEObject;
        T result = caseFormalExpressionPair(formalExpressionPair);
        if (result == null) result = caseElement(formalExpressionPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BEHAVIOR_ACTIONS:
      {
        BehaviorActions behaviorActions = (BehaviorActions)theEObject;
        T result = caseBehaviorActions(behaviorActions);
        if (result == null) result = caseElement(behaviorActions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTED_ACTION:
      {
        AssertedAction assertedAction = (AssertedAction)theEObject;
        T result = caseAssertedAction(assertedAction);
        if (result == null) result = caseElement(assertedAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = caseElement(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BASIC_ACTION:
      {
        BasicAction basicAction = (BasicAction)theEObject;
        T result = caseBasicAction(basicAction);
        if (result == null) result = caseElement(basicAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.COMBINABLE_OPERATION:
      {
        CombinableOperation combinableOperation = (CombinableOperation)theEObject;
        T result = caseCombinableOperation(combinableOperation);
        if (result == null) result = caseElement(combinableOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.COMMUNICATION_ACTION:
      {
        CommunicationAction communicationAction = (CommunicationAction)theEObject;
        T result = caseCommunicationAction(communicationAction);
        if (result == null) result = caseElement(communicationAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SUBPROGRAM_CALL:
      {
        SubprogramCall subprogramCall = (SubprogramCall)theEObject;
        T result = caseSubprogramCall(subprogramCall);
        if (result == null) result = caseElement(subprogramCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FORMAL_ACTUAL_LIST:
      {
        FormalActualList formalActualList = (FormalActualList)theEObject;
        T result = caseFormalActualList(formalActualList);
        if (result == null) result = caseElement(formalActualList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FORMAL_ACTUAL:
      {
        FormalActual formalActual = (FormalActual)theEObject;
        T result = caseFormalActual(formalActual);
        if (result == null) result = caseElement(formalActual);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SUB_PROGRAM_PARAMETER:
      {
        SubProgramParameter subProgramParameter = (SubProgramParameter)theEObject;
        T result = caseSubProgramParameter(subProgramParameter);
        if (result == null) result = caseElement(subProgramParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PORT_OUTPUT:
      {
        PortOutput portOutput = (PortOutput)theEObject;
        T result = casePortOutput(portOutput);
        if (result == null) result = caseElement(portOutput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PORT_INPUT:
      {
        PortInput portInput = (PortInput)theEObject;
        T result = casePortInput(portInput);
        if (result == null) result = caseElement(portInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseElement(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NAME_TICK:
      {
        NameTick nameTick = (NameTick)theEObject;
        T result = caseNameTick(nameTick);
        if (result == null) result = caseElement(nameTick);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXPRESSION_OR_ANY:
      {
        ExpressionOrAny expressionOrAny = (ExpressionOrAny)theEObject;
        T result = caseExpressionOrAny(expressionOrAny);
        if (result == null) result = caseElement(expressionOrAny);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SIMULTANEOUS_ASSIGNMENT:
      {
        SimultaneousAssignment simultaneousAssignment = (SimultaneousAssignment)theEObject;
        T result = caseSimultaneousAssignment(simultaneousAssignment);
        if (result == null) result = caseElement(simultaneousAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ALTERNATIVE:
      {
        Alternative alternative = (Alternative)theEObject;
        T result = caseAlternative(alternative);
        if (result == null) result = caseElement(alternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BLESS_ALTERNATIVE:
      {
        BLESSAlternative blessAlternative = (BLESSAlternative)theEObject;
        T result = caseBLESSAlternative(blessAlternative);
        if (result == null) result = caseElement(blessAlternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.GUARDED_ACTION:
      {
        GuardedAction guardedAction = (GuardedAction)theEObject;
        T result = caseGuardedAction(guardedAction);
        if (result == null) result = caseElement(guardedAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.WHILE_LOOP:
      {
        WhileLoop whileLoop = (WhileLoop)theEObject;
        T result = caseWhileLoop(whileLoop);
        if (result == null) result = caseElement(whileLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FOR_LOOP:
      {
        ForLoop forLoop = (ForLoop)theEObject;
        T result = caseForLoop(forLoop);
        if (result == null) result = caseElement(forLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DO_UNTIL_LOOP:
      {
        DoUntilLoop doUntilLoop = (DoUntilLoop)theEObject;
        T result = caseDoUntilLoop(doUntilLoop);
        if (result == null) result = caseElement(doUntilLoop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.THROWS_CLAUSE:
      {
        ThrowsClause throwsClause = (ThrowsClause)theEObject;
        T result = caseThrowsClause(throwsClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CATCH_CLAUSE:
      {
        CatchClause catchClause = (CatchClause)theEObject;
        T result = caseCatchClause(catchClause);
        if (result == null) result = caseElement(catchClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CATCH_CLAUSE_TERM:
      {
        CatchClauseTerm catchClauseTerm = (CatchClauseTerm)theEObject;
        T result = caseCatchClauseTerm(catchClauseTerm);
        if (result == null) result = caseElement(catchClauseTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.WHEN_THROW:
      {
        WhenThrow whenThrow = (WhenThrow)theEObject;
        T result = caseWhenThrow(whenThrow);
        if (result == null) result = caseElement(whenThrow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.COMPUTATION:
      {
        Computation computation = (Computation)theEObject;
        T result = caseComputation(computation);
        if (result == null) result = caseElement(computation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BA_ALTERNATIVE:
      {
        BAAlternative baAlternative = (BAAlternative)theEObject;
        T result = caseBAAlternative(baAlternative);
        if (result == null) result = caseElement(baAlternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ELSEIF_ALTERNATIVE:
      {
        ElseifAlternative elseifAlternative = (ElseifAlternative)theEObject;
        T result = caseElseifAlternative(elseifAlternative);
        if (result == null) result = caseElement(elseifAlternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ELSE_ALTERNATIVE:
      {
        ElseAlternative elseAlternative = (ElseAlternative)theEObject;
        T result = caseElseAlternative(elseAlternative);
        if (result == null) result = caseElement(elseAlternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ISSUE_EXCEPTION:
      {
        IssueException issueException = (IssueException)theEObject;
        T result = caseIssueException(issueException);
        if (result == null) result = caseElement(issueException);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.LOCKING_ACTION:
      {
        LockingAction lockingAction = (LockingAction)theEObject;
        T result = caseLockingAction(lockingAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.FREEZE_PORT:
      {
        FreezePort freezePort = (FreezePort)theEObject;
        T result = caseFreezePort(freezePort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PAUSE:
      {
        Pause pause = (Pause)theEObject;
        T result = casePause(pause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ACTION_TIMEOUT:
      {
        ActionTimeout actionTimeout = (ActionTimeout)theEObject;
        T result = caseActionTimeout(actionTimeout);
        if (result == null) result = caseElement(actionTimeout);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BEHAVIOR_TIME:
      {
        BehaviorTime behaviorTime = (BehaviorTime)theEObject;
        T result = caseBehaviorTime(behaviorTime);
        if (result == null) result = caseElement(behaviorTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXCEPTION:
      {
        com.multitude.aadl.bless.bLESS.Exception exception = (com.multitude.aadl.bless.bLESS.Exception)theEObject;
        T result = caseException(exception);
        if (result == null) result = caseNamedElement(exception);
        if (result == null) result = caseElement(exception);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.GHOST_VARIABLES:
      {
        GhostVariables ghostVariables = (GhostVariables)theEObject;
        T result = caseGhostVariables(ghostVariables);
        if (result == null) result = caseElement(ghostVariables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.GHOST_VARIABLE:
      {
        GhostVariable ghostVariable = (GhostVariable)theEObject;
        T result = caseGhostVariable(ghostVariable);
        if (result == null) result = caseNamedElement(ghostVariable);
        if (result == null) result = caseElement(ghostVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTION:
      {
        Assertion assertion = (Assertion)theEObject;
        T result = caseAssertion(assertion);
        if (result == null) result = caseElement(assertion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NAMED_ASSERTION:
      {
        NamedAssertion namedAssertion = (NamedAssertion)theEObject;
        T result = caseNamedAssertion(namedAssertion);
        if (result == null) result = caseNamedElement(namedAssertion);
        if (result == null) result = caseElement(namedAssertion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NAMELESS_ASSERTION:
      {
        NamelessAssertion namelessAssertion = (NamelessAssertion)theEObject;
        T result = caseNamelessAssertion(namelessAssertion);
        if (result == null) result = caseElement(namelessAssertion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NAMELESS_FUNCTION:
      {
        NamelessFunction namelessFunction = (NamelessFunction)theEObject;
        T result = caseNamelessFunction(namelessFunction);
        if (result == null) result = caseElement(namelessFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NAMELESS_ENUMERATION:
      {
        NamelessEnumeration namelessEnumeration = (NamelessEnumeration)theEObject;
        T result = caseNamelessEnumeration(namelessEnumeration);
        if (result == null) result = caseElement(namelessEnumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PREDICATE:
      {
        Predicate predicate = (Predicate)theEObject;
        T result = casePredicate(predicate);
        if (result == null) result = caseElement(predicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTION_NUMERIC_EXPRESSION:
      {
        AssertionNumericExpression assertionNumericExpression = (AssertionNumericExpression)theEObject;
        T result = caseAssertionNumericExpression(assertionNumericExpression);
        if (result == null) result = caseElement(assertionNumericExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BOOLEAN_EXPRESSION:
      {
        BooleanExpression booleanExpression = (BooleanExpression)theEObject;
        T result = caseBooleanExpression(booleanExpression);
        if (result == null) result = caseElement(booleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NUMERIC_EXPRESSION:
      {
        NumericExpression numericExpression = (NumericExpression)theEObject;
        T result = caseNumericExpression(numericExpression);
        if (result == null) result = caseElement(numericExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = casePredicate(expression);
        if (result == null) result = caseAssertionNumericExpression(expression);
        if (result == null) result = caseBooleanExpression(expression);
        if (result == null) result = caseNumericExpression(expression);
        if (result == null) result = caseElement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.DISJUNCTION:
      {
        Disjunction disjunction = (Disjunction)theEObject;
        T result = caseDisjunction(disjunction);
        if (result == null) result = caseElement(disjunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CONJUNCTION:
      {
        Conjunction conjunction = (Conjunction)theEObject;
        T result = caseConjunction(conjunction);
        if (result == null) result = caseElement(conjunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RELATION:
      {
        Relation relation = (Relation)theEObject;
        T result = caseRelation(relation);
        if (result == null) result = caseElement(relation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ADD_SUB:
      {
        AddSub addSub = (AddSub)theEObject;
        T result = caseAddSub(addSub);
        if (result == null) result = caseElement(addSub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.MULT_DIV:
      {
        MultDiv multDiv = (MultDiv)theEObject;
        T result = caseMultDiv(multDiv);
        if (result == null) result = caseElement(multDiv);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXP:
      {
        Exp exp = (Exp)theEObject;
        T result = caseExp(exp);
        if (result == null) result = caseElement(exp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SUBEXPRESSION:
      {
        Subexpression subexpression = (Subexpression)theEObject;
        T result = caseSubexpression(subexpression);
        if (result == null) result = caseElement(subexpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TIMED_EXPRESSION:
      {
        TimedExpression timedExpression = (TimedExpression)theEObject;
        T result = caseTimedExpression(timedExpression);
        if (result == null) result = caseElement(timedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TIMED_SUBJECT:
      {
        TimedSubject timedSubject = (TimedSubject)theEObject;
        T result = caseTimedSubject(timedSubject);
        if (result == null) result = caseElement(timedSubject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PARENTHESIZED_SUBEXPRESSION:
      {
        ParenthesizedSubexpression parenthesizedSubexpression = (ParenthesizedSubexpression)theEObject;
        T result = caseParenthesizedSubexpression(parenthesizedSubexpression);
        if (result == null) result = caseElement(parenthesizedSubexpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNARY_OPERATOR:
      {
        UnaryOperator unaryOperator = (UnaryOperator)theEObject;
        T result = caseUnaryOperator(unaryOperator);
        if (result == null) result = caseElement(unaryOperator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RANGE:
      {
        Range range = (Range)theEObject;
        T result = caseRange(range);
        if (result == null) result = caseElement(range);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CONDITIONAL_EXPRESSION:
      {
        ConditionalExpression conditionalExpression = (ConditionalExpression)theEObject;
        T result = caseConditionalExpression(conditionalExpression);
        if (result == null) result = caseElement(conditionalExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = caseElement(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ENUMERATION_VALUE:
      {
        EnumerationValue enumerationValue = (EnumerationValue)theEObject;
        T result = caseEnumerationValue(enumerationValue);
        if (result == null) result = caseElement(enumerationValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CONSTANT:
      {
        Constant constant = (Constant)theEObject;
        T result = caseConstant(constant);
        if (result == null) result = caseElement(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NON_NUMERIC_PROPERTY:
      {
        NonNumericProperty nonNumericProperty = (NonNumericProperty)theEObject;
        T result = caseNonNumericProperty(nonNumericProperty);
        if (result == null) result = caseElement(nonNumericProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = caseNamedElement(variable);
        if (result == null) result = caseElement(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VALUE_NAME:
      {
        ValueName valueName = (ValueName)theEObject;
        T result = caseValueName(valueName);
        if (result == null) result = caseElement(valueName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PARTIAL_NAME:
      {
        PartialName partialName = (PartialName)theEObject;
        T result = casePartialName(partialName);
        if (result == null) result = caseElement(partialName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.INDEX_EXPRESSION_OR_RANGE:
      {
        IndexExpressionOrRange indexExpressionOrRange = (IndexExpressionOrRange)theEObject;
        T result = caseIndexExpressionOrRange(indexExpressionOrRange);
        if (result == null) result = caseElement(indexExpressionOrRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PERIOD_SHIFT:
      {
        PeriodShift periodShift = (PeriodShift)theEObject;
        T result = casePeriodShift(periodShift);
        if (result == null) result = caseElement(periodShift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.INDEX_EXPRESSION:
      {
        IndexExpression indexExpression = (IndexExpression)theEObject;
        T result = caseIndexExpression(indexExpression);
        if (result == null) result = caseElement(indexExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CASE_EXPRESSION:
      {
        CaseExpression caseExpression = (CaseExpression)theEObject;
        T result = caseCaseExpression(caseExpression);
        if (result == null) result = caseElement(caseExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CASE_CHOICE:
      {
        CaseChoice caseChoice = (CaseChoice)theEObject;
        T result = caseCaseChoice(caseChoice);
        if (result == null) result = caseElement(caseChoice);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.LOGIC_VARIABLES:
      {
        LogicVariables logicVariables = (LogicVariables)theEObject;
        T result = caseLogicVariables(logicVariables);
        if (result == null) result = caseElement(logicVariables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.SUM_QUANTIFICATION:
      {
        SumQuantification sumQuantification = (SumQuantification)theEObject;
        T result = caseSumQuantification(sumQuantification);
        if (result == null) result = caseElement(sumQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PRODUCT_QUANTIFICATION:
      {
        ProductQuantification productQuantification = (ProductQuantification)theEObject;
        T result = caseProductQuantification(productQuantification);
        if (result == null) result = caseElement(productQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.COUNTING_QUANTIFICATION:
      {
        CountingQuantification countingQuantification = (CountingQuantification)theEObject;
        T result = caseCountingQuantification(countingQuantification);
        if (result == null) result = caseElement(countingQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIVERSAL_QUANTIFICATION:
      {
        UniversalQuantification universalQuantification = (UniversalQuantification)theEObject;
        T result = caseUniversalQuantification(universalQuantification);
        if (result == null) result = caseElement(universalQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.EXISTENTIAL_QUANTIFICATION:
      {
        ExistentialQuantification existentialQuantification = (ExistentialQuantification)theEObject;
        T result = caseExistentialQuantification(existentialQuantification);
        if (result == null) result = caseElement(existentialQuantification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RECORD_TERM:
      {
        RecordTerm recordTerm = (RecordTerm)theEObject;
        T result = caseRecordTerm(recordTerm);
        if (result == null) result = caseElement(recordTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RECORD_VALUE:
      {
        RecordValue recordValue = (RecordValue)theEObject;
        T result = caseRecordValue(recordValue);
        if (result == null) result = caseElement(recordValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.INVOCATION:
      {
        Invocation invocation = (Invocation)theEObject;
        T result = caseInvocation(invocation);
        if (result == null) result = caseElement(invocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ACTUAL_PARAMETER:
      {
        ActualParameter actualParameter = (ActualParameter)theEObject;
        T result = caseActualParameter(actualParameter);
        if (result == null) result = caseElement(actualParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.VARIABLE_LIST:
      {
        VariableList variableList = (VariableList)theEObject;
        T result = caseVariableList(variableList);
        if (result == null) result = caseElement(variableList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTION_FUNCTION_VALUE:
      {
        AssertionFunctionValue assertionFunctionValue = (AssertionFunctionValue)theEObject;
        T result = caseAssertionFunctionValue(assertionFunctionValue);
        if (result == null) result = caseElement(assertionFunctionValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CONDITIONAL_ASSERTION_FUNCTION:
      {
        ConditionalAssertionFunction conditionalAssertionFunction = (ConditionalAssertionFunction)theEObject;
        T result = caseConditionalAssertionFunction(conditionalAssertionFunction);
        if (result == null) result = caseElement(conditionalAssertionFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.CONDITION_VALUE_PAIR:
      {
        ConditionValuePair conditionValuePair = (ConditionValuePair)theEObject;
        T result = caseConditionValuePair(conditionValuePair);
        if (result == null) result = caseElement(conditionValuePair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ASSERTION_ENUMERATION:
      {
        AssertionEnumeration assertionEnumeration = (AssertionEnumeration)theEObject;
        T result = caseAssertionEnumeration(assertionEnumeration);
        if (result == null) result = caseElement(assertionEnumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ENUMERATION_PAIR:
      {
        EnumerationPair enumerationPair = (EnumerationPair)theEObject;
        T result = caseEnumerationPair(enumerationPair);
        if (result == null) result = caseElement(enumerationPair);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TYPE_LIBRARY:
      {
        TypeLibrary typeLibrary = (TypeLibrary)theEObject;
        T result = caseTypeLibrary(typeLibrary);
        if (result == null) result = caseAnnexLibrary(typeLibrary);
        if (result == null) result = caseNamedElement(typeLibrary);
        if (result == null) result = caseElement(typeLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TYPE_DECLARATION:
      {
        TypeDeclaration typeDeclaration = (TypeDeclaration)theEObject;
        T result = caseTypeDeclaration(typeDeclaration);
        if (result == null) result = caseNamedElement(typeDeclaration);
        if (result == null) result = caseElement(typeDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TYPE_OR_REFERENCE:
      {
        TypeOrReference typeOrReference = (TypeOrReference)theEObject;
        T result = caseTypeOrReference(typeOrReference);
        if (result == null) result = caseElement(typeOrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.BOOLEAN_TYPE:
      {
        BooleanType booleanType = (BooleanType)theEObject;
        T result = caseBooleanType(booleanType);
        if (result == null) result = caseElement(booleanType);
        if (result == null) result = caseType(booleanType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.STRING_TYPE:
      {
        StringType stringType = (StringType)theEObject;
        T result = caseStringType(stringType);
        if (result == null) result = caseElement(stringType);
        if (result == null) result = caseType(stringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.NULL_TYPE:
      {
        NullType nullType = (NullType)theEObject;
        T result = caseNullType(nullType);
        if (result == null) result = caseElement(nullType);
        if (result == null) result = caseType(nullType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ENUMERATION_TYPE:
      {
        EnumerationType enumerationType = (EnumerationType)theEObject;
        T result = caseEnumerationType(enumerationType);
        if (result == null) result = caseElement(enumerationType);
        if (result == null) result = caseType(enumerationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.QUANTITY_TYPE:
      {
        QuantityType quantityType = (QuantityType)theEObject;
        T result = caseQuantityType(quantityType);
        if (result == null) result = caseElement(quantityType);
        if (result == null) result = caseType(quantityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ANUMBER:
      {
        ANumber aNumber = (ANumber)theEObject;
        T result = caseANumber(aNumber);
        if (result == null) result = caseElement(aNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ARRAY_TYPE:
      {
        ArrayType arrayType = (ArrayType)theEObject;
        T result = caseArrayType(arrayType);
        if (result == null) result = caseElement(arrayType);
        if (result == null) result = caseType(arrayType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ARRAY_RANGE_LIST:
      {
        ArrayRangeList arrayRangeList = (ArrayRangeList)theEObject;
        T result = caseArrayRangeList(arrayRangeList);
        if (result == null) result = caseElement(arrayRangeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ARRAY_RANGE:
      {
        ArrayRange arrayRange = (ArrayRange)theEObject;
        T result = caseArrayRange(arrayRange);
        if (result == null) result = caseElement(arrayRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RECORD_TYPE:
      {
        RecordType recordType = (RecordType)theEObject;
        T result = caseRecordType(recordType);
        if (result == null) result = caseElement(recordType);
        if (result == null) result = caseType(recordType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.RECORD_FIELD:
      {
        RecordField recordField = (RecordField)theEObject;
        T result = caseRecordField(recordField);
        if (result == null) result = caseElement(recordField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PROPERTY_REFERENCE:
      {
        PropertyReference propertyReference = (PropertyReference)theEObject;
        T result = casePropertyReference(propertyReference);
        if (result == null) result = caseElement(propertyReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.PROPERTY_FIELD:
      {
        PropertyField propertyField = (PropertyField)theEObject;
        T result = casePropertyField(propertyField);
        if (result == null) result = caseElement(propertyField);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_NAME:
      {
        UnitName unitName = (UnitName)theEObject;
        T result = caseUnitName(unitName);
        if (result == null) result = caseNamedElement(unitName);
        if (result == null) result = caseElement(unitName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_FORMULA:
      {
        UnitFormula unitFormula = (UnitFormula)theEObject;
        T result = caseUnitFormula(unitFormula);
        if (result == null) result = caseElement(unitFormula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_DECLARATION:
      {
        UnitDeclaration unitDeclaration = (UnitDeclaration)theEObject;
        T result = caseUnitDeclaration(unitDeclaration);
        if (result == null) result = caseElement(unitDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.ROOT_DECLARATION:
      {
        RootDeclaration rootDeclaration = (RootDeclaration)theEObject;
        T result = caseRootDeclaration(rootDeclaration);
        if (result == null) result = caseUnitDeclaration(rootDeclaration);
        if (result == null) result = caseElement(rootDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_EXTENSION:
      {
        UnitExtension unitExtension = (UnitExtension)theEObject;
        T result = caseUnitExtension(unitExtension);
        if (result == null) result = caseUnitDeclaration(unitExtension);
        if (result == null) result = caseElement(unitExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.UNIT_FACTOR:
      {
        UnitFactor unitFactor = (UnitFactor)theEObject;
        T result = caseUnitFactor(unitFactor);
        if (result == null) result = caseElement(unitFactor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.QUANTITY:
      {
        Quantity quantity = (Quantity)theEObject;
        T result = caseQuantity(quantity);
        if (result == null) result = caseElement(quantity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case BLESSPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Grammar Roots</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Grammar Roots</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBLESSGrammarRoots(BLESSGrammarRoots object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subclause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subclause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBLESSSubclause(BLESSSubclause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitLibrary(UnitLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assertion Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assertion Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertionLibrary(AssertionLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exception Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exception Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExceptionLibrary(ExceptionLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Subclause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Subclause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionSubclause(ActionSubclause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariantClause(InvariantClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variables Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variables Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariablesSection(VariablesSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>States Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>States Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatesSection(StatesSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorState(BehaviorState object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transitions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transitions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransitions(Transitions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorTransition(BehaviorTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Priority</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Priority</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePriority(Priority object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatchCondition(DispatchCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatchExpression(DispatchExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subprogram Access Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subprogram Access Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubprogramAccessDispatch(SubprogramAccessDispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch Conjunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch Conjunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatchConjunction(DispatchConjunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatchTrigger(DispatchTrigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortName(PortName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteCondition(ExecuteCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute Timeout</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute Timeout</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteTimeout(ExecuteTimeout object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Otherwise</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Otherwise</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOtherwise(Otherwise object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mode Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mode Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModeCondition(ModeCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger Logical Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger Logical Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTriggerLogicalExpression(TriggerLogicalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventTrigger(EventTrigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalOperator(LogicalOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Internal Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Internal Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInternalCondition(InternalCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assert Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assert Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertClause(AssertClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existential Lattice Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existential Lattice Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistentialLatticeQuantification(ExistentialLatticeQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quantified Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quantified Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuantifiedVariables(QuantifiedVariables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Universal Lattice Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Universal Lattice Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniversalLatticeQuantification(UniversalLatticeQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forall Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forall Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForallVariable(ForallVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclaration(VariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionParameters(FunctionParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formal Expression Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formal Expression Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormalExpressionPair(FormalExpressionPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Actions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Actions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorActions(BehaviorActions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asserted Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asserted Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertedAction(AssertedAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicAction(BasicAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Combinable Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Combinable Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCombinableOperation(CombinableOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Communication Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Communication Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommunicationAction(CommunicationAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subprogram Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subprogram Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubprogramCall(SubprogramCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formal Actual List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formal Actual List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormalActualList(FormalActualList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Formal Actual</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Formal Actual</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFormalActual(FormalActual object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Program Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Program Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubProgramParameter(SubProgramParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortOutput(PortOutput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortInput(PortInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name Tick</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name Tick</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNameTick(NameTick object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Or Any</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Or Any</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionOrAny(ExpressionOrAny object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simultaneous Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simultaneous Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimultaneousAssignment(SimultaneousAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlternative(Alternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBLESSAlternative(BLESSAlternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guarded Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guarded Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardedAction(GuardedAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileLoop(WhileLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForLoop(ForLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Do Until Loop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Do Until Loop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoUntilLoop(DoUntilLoop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Throws Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Throws Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThrowsClause(ThrowsClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Catch Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Catch Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCatchClause(CatchClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Catch Clause Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Catch Clause Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCatchClauseTerm(CatchClauseTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>When Throw</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>When Throw</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhenThrow(WhenThrow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Computation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Computation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComputation(Computation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BA Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BA Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBAAlternative(BAAlternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elseif Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elseif Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseifAlternative(ElseifAlternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Else Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Else Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElseAlternative(ElseAlternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Issue Exception</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Issue Exception</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIssueException(IssueException object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Locking Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Locking Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLockingAction(LockingAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Freeze Port</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Freeze Port</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFreezePort(FreezePort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePause(Pause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Timeout</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Timeout</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionTimeout(ActionTimeout object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehaviorTime(BehaviorTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exception</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exception</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseException(com.multitude.aadl.bless.bLESS.Exception object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ghost Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ghost Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGhostVariables(GhostVariables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ghost Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ghost Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGhostVariable(GhostVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assertion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assertion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertion(Assertion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Assertion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Assertion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedAssertion(NamedAssertion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nameless Assertion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nameless Assertion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamelessAssertion(NamelessAssertion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nameless Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nameless Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamelessFunction(NamelessFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Nameless Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Nameless Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamelessEnumeration(NamelessEnumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicate(Predicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assertion Numeric Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assertion Numeric Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertionNumericExpression(AssertionNumericExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpression(BooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Numeric Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Numeric Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumericExpression(NumericExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Disjunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Disjunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDisjunction(Disjunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conjunction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conjunction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConjunction(Conjunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelation(Relation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddSub(AddSub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mult Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mult Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultDiv(MultDiv object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExp(Exp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subexpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subexpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubexpression(Subexpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timed Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timed Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimedExpression(TimedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timed Subject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timed Subject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimedSubject(TimedSubject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parenthesized Subexpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parenthesized Subexpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParenthesizedSubexpression(ParenthesizedSubexpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary Operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary Operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnaryOperator(UnaryOperator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRange(Range object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalExpression(ConditionalExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationValue(EnumerationValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstant(Constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Non Numeric Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Non Numeric Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNonNumericProperty(NonNumericProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueName(ValueName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Partial Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Partial Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePartialName(PartialName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Expression Or Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Expression Or Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexExpressionOrRange(IndexExpressionOrRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Period Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Period Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePeriodShift(PeriodShift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexExpression(IndexExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseExpression(CaseExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Choice</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Choice</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseChoice(CaseChoice object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicVariables(LogicVariables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sum Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sum Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSumQuantification(SumQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Product Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Product Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProductQuantification(ProductQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Counting Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Counting Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCountingQuantification(CountingQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Universal Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Universal Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniversalQuantification(UniversalQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existential Quantification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existential Quantification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistentialQuantification(ExistentialQuantification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Record Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Record Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecordTerm(RecordTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Record Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Record Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecordValue(RecordValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvocation(Invocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Actual Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Actual Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActualParameter(ActualParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableList(VariableList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assertion Function Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assertion Function Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertionFunctionValue(AssertionFunctionValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Assertion Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Assertion Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalAssertionFunction(ConditionalAssertionFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Value Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Value Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionValuePair(ConditionValuePair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assertion Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assertion Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertionEnumeration(AssertionEnumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Pair</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Pair</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationPair(EnumerationPair object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeLibrary(TypeLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeDeclaration(TypeDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Or Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Or Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeOrReference(TypeOrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanType(BooleanType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringType(StringType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullType(NullType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationType(EnumerationType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quantity Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quantity Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuantityType(QuantityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ANumber</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ANumber</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseANumber(ANumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayType(ArrayType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Range List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Range List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayRangeList(ArrayRangeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayRange(ArrayRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Record Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Record Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecordType(RecordType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Record Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Record Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecordField(RecordField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyReference(PropertyReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyField(PropertyField object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitName(UnitName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitFormula(UnitFormula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitDeclaration(UnitDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Root Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Root Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRootDeclaration(RootDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitExtension(UnitExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unit Factor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unit Factor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnitFactor(UnitFactor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quantity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quantity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuantity(Quantity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedElement(NamedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modal Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modal Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModalElement(ModalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annex Subclause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annex Subclause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnexSubclause(AnnexSubclause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annex Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annex Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnexLibrary(AnnexLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //BLESSSwitch
