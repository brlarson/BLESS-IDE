/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS.util;

import com.multitude.aadl.bless.bLESS.ANumber;
import com.multitude.aadl.bless.bLESS.Action;
import com.multitude.aadl.bless.bLESS.ActionSubclause;
import com.multitude.aadl.bless.bLESS.ActionTimeout;
import com.multitude.aadl.bless.bLESS.ActualParameter;
import com.multitude.aadl.bless.bLESS.AddSub;
import com.multitude.aadl.bless.bLESS.Alternative;
import com.multitude.aadl.bless.bLESS.ArrayRange;
import com.multitude.aadl.bless.bLESS.ArrayRangeList;
import com.multitude.aadl.bless.bLESS.ArrayType;
import com.multitude.aadl.bless.bLESS.AssertClause;
import com.multitude.aadl.bless.bLESS.AssertedAction;
import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.AssertionEnumeration;
import com.multitude.aadl.bless.bLESS.AssertionFunctionValue;
import com.multitude.aadl.bless.bLESS.AssertionLibrary;
import com.multitude.aadl.bless.bLESS.AssertionNumericExpression;
import com.multitude.aadl.bless.bLESS.Assignment;
import com.multitude.aadl.bless.bLESS.BAAlternative;
import com.multitude.aadl.bless.bLESS.BLESSAlternative;
import com.multitude.aadl.bless.bLESS.BLESSGrammarRoots;
import com.multitude.aadl.bless.bLESS.BLESSPackage;
import com.multitude.aadl.bless.bLESS.BLESSSubclause;
import com.multitude.aadl.bless.bLESS.BasicAction;
import com.multitude.aadl.bless.bLESS.BehaviorActions;
import com.multitude.aadl.bless.bLESS.BehaviorState;
import com.multitude.aadl.bless.bLESS.BehaviorTime;
import com.multitude.aadl.bless.bLESS.BehaviorTransition;
import com.multitude.aadl.bless.bLESS.BooleanExpression;
import com.multitude.aadl.bless.bLESS.BooleanType;
import com.multitude.aadl.bless.bLESS.CaseChoice;
import com.multitude.aadl.bless.bLESS.CaseExpression;
import com.multitude.aadl.bless.bLESS.CatchClause;
import com.multitude.aadl.bless.bLESS.CatchClauseTerm;
import com.multitude.aadl.bless.bLESS.CombinableOperation;
import com.multitude.aadl.bless.bLESS.CommunicationAction;
import com.multitude.aadl.bless.bLESS.Computation;
import com.multitude.aadl.bless.bLESS.ConditionValuePair;
import com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction;
import com.multitude.aadl.bless.bLESS.ConditionalExpression;
import com.multitude.aadl.bless.bLESS.Conjunction;
import com.multitude.aadl.bless.bLESS.Constant;
import com.multitude.aadl.bless.bLESS.CountingQuantification;
import com.multitude.aadl.bless.bLESS.Disjunction;
import com.multitude.aadl.bless.bLESS.DispatchCondition;
import com.multitude.aadl.bless.bLESS.DispatchConjunction;
import com.multitude.aadl.bless.bLESS.DispatchExpression;
import com.multitude.aadl.bless.bLESS.DispatchTrigger;
import com.multitude.aadl.bless.bLESS.DoUntilLoop;
import com.multitude.aadl.bless.bLESS.ElseAlternative;
import com.multitude.aadl.bless.bLESS.ElseifAlternative;
import com.multitude.aadl.bless.bLESS.EnumerationPair;
import com.multitude.aadl.bless.bLESS.EnumerationType;
import com.multitude.aadl.bless.bLESS.EnumerationValue;
import com.multitude.aadl.bless.bLESS.EventTrigger;
import com.multitude.aadl.bless.bLESS.ExceptionLibrary;
import com.multitude.aadl.bless.bLESS.ExecuteCondition;
import com.multitude.aadl.bless.bLESS.ExecuteTimeout;
import com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification;
import com.multitude.aadl.bless.bLESS.ExistentialQuantification;
import com.multitude.aadl.bless.bLESS.Exp;
import com.multitude.aadl.bless.bLESS.Expression;
import com.multitude.aadl.bless.bLESS.ExpressionOrAny;
import com.multitude.aadl.bless.bLESS.ForLoop;
import com.multitude.aadl.bless.bLESS.ForallVariable;
import com.multitude.aadl.bless.bLESS.FormalActual;
import com.multitude.aadl.bless.bLESS.FormalActualList;
import com.multitude.aadl.bless.bLESS.FormalExpressionPair;
import com.multitude.aadl.bless.bLESS.FreezePort;
import com.multitude.aadl.bless.bLESS.FunctionParameters;
import com.multitude.aadl.bless.bLESS.GhostVariable;
import com.multitude.aadl.bless.bLESS.GhostVariables;
import com.multitude.aadl.bless.bLESS.GuardedAction;
import com.multitude.aadl.bless.bLESS.IndexExpression;
import com.multitude.aadl.bless.bLESS.IndexExpressionOrRange;
import com.multitude.aadl.bless.bLESS.InternalCondition;
import com.multitude.aadl.bless.bLESS.InvariantClause;
import com.multitude.aadl.bless.bLESS.Invocation;
import com.multitude.aadl.bless.bLESS.IssueException;
import com.multitude.aadl.bless.bLESS.LockingAction;
import com.multitude.aadl.bless.bLESS.LogicVariables;
import com.multitude.aadl.bless.bLESS.LogicalOperator;
import com.multitude.aadl.bless.bLESS.ModeCondition;
import com.multitude.aadl.bless.bLESS.MultDiv;
import com.multitude.aadl.bless.bLESS.NamedAssertion;
import com.multitude.aadl.bless.bLESS.NamelessAssertion;
import com.multitude.aadl.bless.bLESS.NamelessEnumeration;
import com.multitude.aadl.bless.bLESS.NamelessFunction;
import com.multitude.aadl.bless.bLESS.NonNumericProperty;
import com.multitude.aadl.bless.bLESS.NullType;
import com.multitude.aadl.bless.bLESS.NumericExpression;
import com.multitude.aadl.bless.bLESS.Otherwise;
import com.multitude.aadl.bless.bLESS.ParenthesizedSubexpression;
import com.multitude.aadl.bless.bLESS.PartialName;
import com.multitude.aadl.bless.bLESS.Pause;
import com.multitude.aadl.bless.bLESS.PeriodShift;
import com.multitude.aadl.bless.bLESS.PortInput;
import com.multitude.aadl.bless.bLESS.PortName;
import com.multitude.aadl.bless.bLESS.PortOutput;
import com.multitude.aadl.bless.bLESS.Predicate;
import com.multitude.aadl.bless.bLESS.Priority;
import com.multitude.aadl.bless.bLESS.ProductQuantification;
import com.multitude.aadl.bless.bLESS.PropertyField;
import com.multitude.aadl.bless.bLESS.PropertyReference;
import com.multitude.aadl.bless.bLESS.QuantifiedVariables;
import com.multitude.aadl.bless.bLESS.Quantity;
import com.multitude.aadl.bless.bLESS.QuantityType;
import com.multitude.aadl.bless.bLESS.Range;
import com.multitude.aadl.bless.bLESS.RecordField;
import com.multitude.aadl.bless.bLESS.RecordTerm;
import com.multitude.aadl.bless.bLESS.RecordType;
import com.multitude.aadl.bless.bLESS.RecordValue;
import com.multitude.aadl.bless.bLESS.Relation;
import com.multitude.aadl.bless.bLESS.RootDeclaration;
import com.multitude.aadl.bless.bLESS.SimultaneousAssignment;
import com.multitude.aadl.bless.bLESS.StatesSection;
import com.multitude.aadl.bless.bLESS.StringType;
import com.multitude.aadl.bless.bLESS.SubProgramParameter;
import com.multitude.aadl.bless.bLESS.Subexpression;
import com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch;
import com.multitude.aadl.bless.bLESS.SubprogramCall;
import com.multitude.aadl.bless.bLESS.SumQuantification;
import com.multitude.aadl.bless.bLESS.ThrowsClause;
import com.multitude.aadl.bless.bLESS.TimedExpression;
import com.multitude.aadl.bless.bLESS.TimedSubject;
import com.multitude.aadl.bless.bLESS.Transitions;
import com.multitude.aadl.bless.bLESS.TriggerLogicalExpression;
import com.multitude.aadl.bless.bLESS.Type;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;
import com.multitude.aadl.bless.bLESS.TypeLibrary;
import com.multitude.aadl.bless.bLESS.TypeOrReference;
import com.multitude.aadl.bless.bLESS.UnaryOperator;
import com.multitude.aadl.bless.bLESS.UnitDeclaration;
import com.multitude.aadl.bless.bLESS.UnitExtension;
import com.multitude.aadl.bless.bLESS.UnitFactor;
import com.multitude.aadl.bless.bLESS.UnitFormula;
import com.multitude.aadl.bless.bLESS.UnitLibrary;
import com.multitude.aadl.bless.bLESS.UnitName;
import com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification;
import com.multitude.aadl.bless.bLESS.UniversalQuantification;
import com.multitude.aadl.bless.bLESS.Value;
import com.multitude.aadl.bless.bLESS.ValueName;
import com.multitude.aadl.bless.bLESS.Variable;
import com.multitude.aadl.bless.bLESS.VariableDeclaration;
import com.multitude.aadl.bless.bLESS.VariableList;
import com.multitude.aadl.bless.bLESS.VariablesSection;
import com.multitude.aadl.bless.bLESS.WhenThrow;
import com.multitude.aadl.bless.bLESS.WhileLoop;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.AnnexSubclause;
import org.osate.aadl2.Element;
import org.osate.aadl2.ModalElement;
import org.osate.aadl2.NamedElement;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.multitude.aadl.bless.bLESS.BLESSPackage
 * @generated
 */
public class BLESSAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BLESSPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BLESSAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BLESSPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BLESSSwitch<Adapter> modelSwitch =
    new BLESSSwitch<Adapter>()
    {
      @Override
      public Adapter caseBLESSGrammarRoots(BLESSGrammarRoots object)
      {
        return createBLESSGrammarRootsAdapter();
      }
      @Override
      public Adapter caseBLESSSubclause(BLESSSubclause object)
      {
        return createBLESSSubclauseAdapter();
      }
      @Override
      public Adapter caseUnitLibrary(UnitLibrary object)
      {
        return createUnitLibraryAdapter();
      }
      @Override
      public Adapter caseAssertionLibrary(AssertionLibrary object)
      {
        return createAssertionLibraryAdapter();
      }
      @Override
      public Adapter caseExceptionLibrary(ExceptionLibrary object)
      {
        return createExceptionLibraryAdapter();
      }
      @Override
      public Adapter caseActionSubclause(ActionSubclause object)
      {
        return createActionSubclauseAdapter();
      }
      @Override
      public Adapter caseInvariantClause(InvariantClause object)
      {
        return createInvariantClauseAdapter();
      }
      @Override
      public Adapter caseVariablesSection(VariablesSection object)
      {
        return createVariablesSectionAdapter();
      }
      @Override
      public Adapter caseStatesSection(StatesSection object)
      {
        return createStatesSectionAdapter();
      }
      @Override
      public Adapter caseBehaviorState(BehaviorState object)
      {
        return createBehaviorStateAdapter();
      }
      @Override
      public Adapter caseTransitions(Transitions object)
      {
        return createTransitionsAdapter();
      }
      @Override
      public Adapter caseBehaviorTransition(BehaviorTransition object)
      {
        return createBehaviorTransitionAdapter();
      }
      @Override
      public Adapter casePriority(Priority object)
      {
        return createPriorityAdapter();
      }
      @Override
      public Adapter caseDispatchCondition(DispatchCondition object)
      {
        return createDispatchConditionAdapter();
      }
      @Override
      public Adapter caseDispatchExpression(DispatchExpression object)
      {
        return createDispatchExpressionAdapter();
      }
      @Override
      public Adapter caseSubprogramAccessDispatch(SubprogramAccessDispatch object)
      {
        return createSubprogramAccessDispatchAdapter();
      }
      @Override
      public Adapter caseDispatchConjunction(DispatchConjunction object)
      {
        return createDispatchConjunctionAdapter();
      }
      @Override
      public Adapter caseDispatchTrigger(DispatchTrigger object)
      {
        return createDispatchTriggerAdapter();
      }
      @Override
      public Adapter casePortName(PortName object)
      {
        return createPortNameAdapter();
      }
      @Override
      public Adapter caseExecuteCondition(ExecuteCondition object)
      {
        return createExecuteConditionAdapter();
      }
      @Override
      public Adapter caseExecuteTimeout(ExecuteTimeout object)
      {
        return createExecuteTimeoutAdapter();
      }
      @Override
      public Adapter caseOtherwise(Otherwise object)
      {
        return createOtherwiseAdapter();
      }
      @Override
      public Adapter caseModeCondition(ModeCondition object)
      {
        return createModeConditionAdapter();
      }
      @Override
      public Adapter caseTriggerLogicalExpression(TriggerLogicalExpression object)
      {
        return createTriggerLogicalExpressionAdapter();
      }
      @Override
      public Adapter caseEventTrigger(EventTrigger object)
      {
        return createEventTriggerAdapter();
      }
      @Override
      public Adapter caseLogicalOperator(LogicalOperator object)
      {
        return createLogicalOperatorAdapter();
      }
      @Override
      public Adapter caseInternalCondition(InternalCondition object)
      {
        return createInternalConditionAdapter();
      }
      @Override
      public Adapter caseAssertClause(AssertClause object)
      {
        return createAssertClauseAdapter();
      }
      @Override
      public Adapter caseExistentialLatticeQuantification(ExistentialLatticeQuantification object)
      {
        return createExistentialLatticeQuantificationAdapter();
      }
      @Override
      public Adapter caseQuantifiedVariables(QuantifiedVariables object)
      {
        return createQuantifiedVariablesAdapter();
      }
      @Override
      public Adapter caseUniversalLatticeQuantification(UniversalLatticeQuantification object)
      {
        return createUniversalLatticeQuantificationAdapter();
      }
      @Override
      public Adapter caseForallVariable(ForallVariable object)
      {
        return createForallVariableAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseFunctionParameters(FunctionParameters object)
      {
        return createFunctionParametersAdapter();
      }
      @Override
      public Adapter caseFormalExpressionPair(FormalExpressionPair object)
      {
        return createFormalExpressionPairAdapter();
      }
      @Override
      public Adapter caseBehaviorActions(BehaviorActions object)
      {
        return createBehaviorActionsAdapter();
      }
      @Override
      public Adapter caseAssertedAction(AssertedAction object)
      {
        return createAssertedActionAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseBasicAction(BasicAction object)
      {
        return createBasicActionAdapter();
      }
      @Override
      public Adapter caseCombinableOperation(CombinableOperation object)
      {
        return createCombinableOperationAdapter();
      }
      @Override
      public Adapter caseCommunicationAction(CommunicationAction object)
      {
        return createCommunicationActionAdapter();
      }
      @Override
      public Adapter caseSubprogramCall(SubprogramCall object)
      {
        return createSubprogramCallAdapter();
      }
      @Override
      public Adapter caseFormalActualList(FormalActualList object)
      {
        return createFormalActualListAdapter();
      }
      @Override
      public Adapter caseFormalActual(FormalActual object)
      {
        return createFormalActualAdapter();
      }
      @Override
      public Adapter caseSubProgramParameter(SubProgramParameter object)
      {
        return createSubProgramParameterAdapter();
      }
      @Override
      public Adapter casePortOutput(PortOutput object)
      {
        return createPortOutputAdapter();
      }
      @Override
      public Adapter casePortInput(PortInput object)
      {
        return createPortInputAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseExpressionOrAny(ExpressionOrAny object)
      {
        return createExpressionOrAnyAdapter();
      }
      @Override
      public Adapter caseSimultaneousAssignment(SimultaneousAssignment object)
      {
        return createSimultaneousAssignmentAdapter();
      }
      @Override
      public Adapter caseAlternative(Alternative object)
      {
        return createAlternativeAdapter();
      }
      @Override
      public Adapter caseBLESSAlternative(BLESSAlternative object)
      {
        return createBLESSAlternativeAdapter();
      }
      @Override
      public Adapter caseGuardedAction(GuardedAction object)
      {
        return createGuardedActionAdapter();
      }
      @Override
      public Adapter caseWhileLoop(WhileLoop object)
      {
        return createWhileLoopAdapter();
      }
      @Override
      public Adapter caseForLoop(ForLoop object)
      {
        return createForLoopAdapter();
      }
      @Override
      public Adapter caseDoUntilLoop(DoUntilLoop object)
      {
        return createDoUntilLoopAdapter();
      }
      @Override
      public Adapter caseThrowsClause(ThrowsClause object)
      {
        return createThrowsClauseAdapter();
      }
      @Override
      public Adapter caseCatchClause(CatchClause object)
      {
        return createCatchClauseAdapter();
      }
      @Override
      public Adapter caseCatchClauseTerm(CatchClauseTerm object)
      {
        return createCatchClauseTermAdapter();
      }
      @Override
      public Adapter caseWhenThrow(WhenThrow object)
      {
        return createWhenThrowAdapter();
      }
      @Override
      public Adapter caseComputation(Computation object)
      {
        return createComputationAdapter();
      }
      @Override
      public Adapter caseBAAlternative(BAAlternative object)
      {
        return createBAAlternativeAdapter();
      }
      @Override
      public Adapter caseElseifAlternative(ElseifAlternative object)
      {
        return createElseifAlternativeAdapter();
      }
      @Override
      public Adapter caseElseAlternative(ElseAlternative object)
      {
        return createElseAlternativeAdapter();
      }
      @Override
      public Adapter caseIssueException(IssueException object)
      {
        return createIssueExceptionAdapter();
      }
      @Override
      public Adapter caseLockingAction(LockingAction object)
      {
        return createLockingActionAdapter();
      }
      @Override
      public Adapter caseFreezePort(FreezePort object)
      {
        return createFreezePortAdapter();
      }
      @Override
      public Adapter casePause(Pause object)
      {
        return createPauseAdapter();
      }
      @Override
      public Adapter caseActionTimeout(ActionTimeout object)
      {
        return createActionTimeoutAdapter();
      }
      @Override
      public Adapter caseBehaviorTime(BehaviorTime object)
      {
        return createBehaviorTimeAdapter();
      }
      @Override
      public Adapter caseException(com.multitude.aadl.bless.bLESS.Exception object)
      {
        return createExceptionAdapter();
      }
      @Override
      public Adapter caseGhostVariables(GhostVariables object)
      {
        return createGhostVariablesAdapter();
      }
      @Override
      public Adapter caseGhostVariable(GhostVariable object)
      {
        return createGhostVariableAdapter();
      }
      @Override
      public Adapter caseAssertion(Assertion object)
      {
        return createAssertionAdapter();
      }
      @Override
      public Adapter caseNamedAssertion(NamedAssertion object)
      {
        return createNamedAssertionAdapter();
      }
      @Override
      public Adapter caseNamelessAssertion(NamelessAssertion object)
      {
        return createNamelessAssertionAdapter();
      }
      @Override
      public Adapter caseNamelessFunction(NamelessFunction object)
      {
        return createNamelessFunctionAdapter();
      }
      @Override
      public Adapter caseNamelessEnumeration(NamelessEnumeration object)
      {
        return createNamelessEnumerationAdapter();
      }
      @Override
      public Adapter casePredicate(Predicate object)
      {
        return createPredicateAdapter();
      }
      @Override
      public Adapter caseAssertionNumericExpression(AssertionNumericExpression object)
      {
        return createAssertionNumericExpressionAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseNumericExpression(NumericExpression object)
      {
        return createNumericExpressionAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseDisjunction(Disjunction object)
      {
        return createDisjunctionAdapter();
      }
      @Override
      public Adapter caseConjunction(Conjunction object)
      {
        return createConjunctionAdapter();
      }
      @Override
      public Adapter caseRelation(Relation object)
      {
        return createRelationAdapter();
      }
      @Override
      public Adapter caseAddSub(AddSub object)
      {
        return createAddSubAdapter();
      }
      @Override
      public Adapter caseMultDiv(MultDiv object)
      {
        return createMultDivAdapter();
      }
      @Override
      public Adapter caseExp(Exp object)
      {
        return createExpAdapter();
      }
      @Override
      public Adapter caseSubexpression(Subexpression object)
      {
        return createSubexpressionAdapter();
      }
      @Override
      public Adapter caseTimedExpression(TimedExpression object)
      {
        return createTimedExpressionAdapter();
      }
      @Override
      public Adapter caseTimedSubject(TimedSubject object)
      {
        return createTimedSubjectAdapter();
      }
      @Override
      public Adapter caseParenthesizedSubexpression(ParenthesizedSubexpression object)
      {
        return createParenthesizedSubexpressionAdapter();
      }
      @Override
      public Adapter caseUnaryOperator(UnaryOperator object)
      {
        return createUnaryOperatorAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseConditionalExpression(ConditionalExpression object)
      {
        return createConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseEnumerationValue(EnumerationValue object)
      {
        return createEnumerationValueAdapter();
      }
      @Override
      public Adapter caseConstant(Constant object)
      {
        return createConstantAdapter();
      }
      @Override
      public Adapter caseNonNumericProperty(NonNumericProperty object)
      {
        return createNonNumericPropertyAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseValueName(ValueName object)
      {
        return createValueNameAdapter();
      }
      @Override
      public Adapter casePartialName(PartialName object)
      {
        return createPartialNameAdapter();
      }
      @Override
      public Adapter caseIndexExpressionOrRange(IndexExpressionOrRange object)
      {
        return createIndexExpressionOrRangeAdapter();
      }
      @Override
      public Adapter casePeriodShift(PeriodShift object)
      {
        return createPeriodShiftAdapter();
      }
      @Override
      public Adapter caseIndexExpression(IndexExpression object)
      {
        return createIndexExpressionAdapter();
      }
      @Override
      public Adapter caseCaseExpression(CaseExpression object)
      {
        return createCaseExpressionAdapter();
      }
      @Override
      public Adapter caseCaseChoice(CaseChoice object)
      {
        return createCaseChoiceAdapter();
      }
      @Override
      public Adapter caseLogicVariables(LogicVariables object)
      {
        return createLogicVariablesAdapter();
      }
      @Override
      public Adapter caseSumQuantification(SumQuantification object)
      {
        return createSumQuantificationAdapter();
      }
      @Override
      public Adapter caseProductQuantification(ProductQuantification object)
      {
        return createProductQuantificationAdapter();
      }
      @Override
      public Adapter caseCountingQuantification(CountingQuantification object)
      {
        return createCountingQuantificationAdapter();
      }
      @Override
      public Adapter caseUniversalQuantification(UniversalQuantification object)
      {
        return createUniversalQuantificationAdapter();
      }
      @Override
      public Adapter caseExistentialQuantification(ExistentialQuantification object)
      {
        return createExistentialQuantificationAdapter();
      }
      @Override
      public Adapter caseRecordTerm(RecordTerm object)
      {
        return createRecordTermAdapter();
      }
      @Override
      public Adapter caseRecordValue(RecordValue object)
      {
        return createRecordValueAdapter();
      }
      @Override
      public Adapter caseInvocation(Invocation object)
      {
        return createInvocationAdapter();
      }
      @Override
      public Adapter caseActualParameter(ActualParameter object)
      {
        return createActualParameterAdapter();
      }
      @Override
      public Adapter caseVariableList(VariableList object)
      {
        return createVariableListAdapter();
      }
      @Override
      public Adapter caseAssertionFunctionValue(AssertionFunctionValue object)
      {
        return createAssertionFunctionValueAdapter();
      }
      @Override
      public Adapter caseConditionalAssertionFunction(ConditionalAssertionFunction object)
      {
        return createConditionalAssertionFunctionAdapter();
      }
      @Override
      public Adapter caseConditionValuePair(ConditionValuePair object)
      {
        return createConditionValuePairAdapter();
      }
      @Override
      public Adapter caseAssertionEnumeration(AssertionEnumeration object)
      {
        return createAssertionEnumerationAdapter();
      }
      @Override
      public Adapter caseEnumerationPair(EnumerationPair object)
      {
        return createEnumerationPairAdapter();
      }
      @Override
      public Adapter caseTypeLibrary(TypeLibrary object)
      {
        return createTypeLibraryAdapter();
      }
      @Override
      public Adapter caseTypeDeclaration(TypeDeclaration object)
      {
        return createTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseTypeOrReference(TypeOrReference object)
      {
        return createTypeOrReferenceAdapter();
      }
      @Override
      public Adapter caseBooleanType(BooleanType object)
      {
        return createBooleanTypeAdapter();
      }
      @Override
      public Adapter caseStringType(StringType object)
      {
        return createStringTypeAdapter();
      }
      @Override
      public Adapter caseNullType(NullType object)
      {
        return createNullTypeAdapter();
      }
      @Override
      public Adapter caseEnumerationType(EnumerationType object)
      {
        return createEnumerationTypeAdapter();
      }
      @Override
      public Adapter caseQuantityType(QuantityType object)
      {
        return createQuantityTypeAdapter();
      }
      @Override
      public Adapter caseANumber(ANumber object)
      {
        return createANumberAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter caseArrayRangeList(ArrayRangeList object)
      {
        return createArrayRangeListAdapter();
      }
      @Override
      public Adapter caseArrayRange(ArrayRange object)
      {
        return createArrayRangeAdapter();
      }
      @Override
      public Adapter caseRecordType(RecordType object)
      {
        return createRecordTypeAdapter();
      }
      @Override
      public Adapter caseRecordField(RecordField object)
      {
        return createRecordFieldAdapter();
      }
      @Override
      public Adapter casePropertyReference(PropertyReference object)
      {
        return createPropertyReferenceAdapter();
      }
      @Override
      public Adapter casePropertyField(PropertyField object)
      {
        return createPropertyFieldAdapter();
      }
      @Override
      public Adapter caseUnitName(UnitName object)
      {
        return createUnitNameAdapter();
      }
      @Override
      public Adapter caseUnitFormula(UnitFormula object)
      {
        return createUnitFormulaAdapter();
      }
      @Override
      public Adapter caseUnitDeclaration(UnitDeclaration object)
      {
        return createUnitDeclarationAdapter();
      }
      @Override
      public Adapter caseRootDeclaration(RootDeclaration object)
      {
        return createRootDeclarationAdapter();
      }
      @Override
      public Adapter caseUnitExtension(UnitExtension object)
      {
        return createUnitExtensionAdapter();
      }
      @Override
      public Adapter caseUnitFactor(UnitFactor object)
      {
        return createUnitFactorAdapter();
      }
      @Override
      public Adapter caseQuantity(Quantity object)
      {
        return createQuantityAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseNamedElement(NamedElement object)
      {
        return createNamedElementAdapter();
      }
      @Override
      public Adapter caseModalElement(ModalElement object)
      {
        return createModalElementAdapter();
      }
      @Override
      public Adapter caseAnnexSubclause(AnnexSubclause object)
      {
        return createAnnexSubclauseAdapter();
      }
      @Override
      public Adapter caseAnnexLibrary(AnnexLibrary object)
      {
        return createAnnexLibraryAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BLESSGrammarRoots <em>Grammar Roots</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BLESSGrammarRoots
   * @generated
   */
  public Adapter createBLESSGrammarRootsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BLESSSubclause <em>Subclause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BLESSSubclause
   * @generated
   */
  public Adapter createBLESSSubclauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitLibrary <em>Unit Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitLibrary
   * @generated
   */
  public Adapter createUnitLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertionLibrary <em>Assertion Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertionLibrary
   * @generated
   */
  public Adapter createAssertionLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExceptionLibrary <em>Exception Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExceptionLibrary
   * @generated
   */
  public Adapter createExceptionLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ActionSubclause <em>Action Subclause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ActionSubclause
   * @generated
   */
  public Adapter createActionSubclauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.InvariantClause <em>Invariant Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.InvariantClause
   * @generated
   */
  public Adapter createInvariantClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.VariablesSection <em>Variables Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.VariablesSection
   * @generated
   */
  public Adapter createVariablesSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.StatesSection <em>States Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.StatesSection
   * @generated
   */
  public Adapter createStatesSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BehaviorState <em>Behavior State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BehaviorState
   * @generated
   */
  public Adapter createBehaviorStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Transitions <em>Transitions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Transitions
   * @generated
   */
  public Adapter createTransitionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BehaviorTransition <em>Behavior Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BehaviorTransition
   * @generated
   */
  public Adapter createBehaviorTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Priority <em>Priority</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Priority
   * @generated
   */
  public Adapter createPriorityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.DispatchCondition <em>Dispatch Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.DispatchCondition
   * @generated
   */
  public Adapter createDispatchConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.DispatchExpression <em>Dispatch Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.DispatchExpression
   * @generated
   */
  public Adapter createDispatchExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch <em>Subprogram Access Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.SubprogramAccessDispatch
   * @generated
   */
  public Adapter createSubprogramAccessDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.DispatchConjunction <em>Dispatch Conjunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.DispatchConjunction
   * @generated
   */
  public Adapter createDispatchConjunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.DispatchTrigger <em>Dispatch Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.DispatchTrigger
   * @generated
   */
  public Adapter createDispatchTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PortName <em>Port Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PortName
   * @generated
   */
  public Adapter createPortNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExecuteCondition <em>Execute Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExecuteCondition
   * @generated
   */
  public Adapter createExecuteConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExecuteTimeout <em>Execute Timeout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExecuteTimeout
   * @generated
   */
  public Adapter createExecuteTimeoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Otherwise <em>Otherwise</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Otherwise
   * @generated
   */
  public Adapter createOtherwiseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ModeCondition <em>Mode Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ModeCondition
   * @generated
   */
  public Adapter createModeConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TriggerLogicalExpression <em>Trigger Logical Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TriggerLogicalExpression
   * @generated
   */
  public Adapter createTriggerLogicalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.EventTrigger <em>Event Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.EventTrigger
   * @generated
   */
  public Adapter createEventTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.LogicalOperator <em>Logical Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.LogicalOperator
   * @generated
   */
  public Adapter createLogicalOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.InternalCondition <em>Internal Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.InternalCondition
   * @generated
   */
  public Adapter createInternalConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertClause <em>Assert Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertClause
   * @generated
   */
  public Adapter createAssertClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification <em>Existential Lattice Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExistentialLatticeQuantification
   * @generated
   */
  public Adapter createExistentialLatticeQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.QuantifiedVariables <em>Quantified Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.QuantifiedVariables
   * @generated
   */
  public Adapter createQuantifiedVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification <em>Universal Lattice Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification
   * @generated
   */
  public Adapter createUniversalLatticeQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ForallVariable <em>Forall Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ForallVariable
   * @generated
   */
  public Adapter createForallVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.FunctionParameters <em>Function Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.FunctionParameters
   * @generated
   */
  public Adapter createFunctionParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.FormalExpressionPair <em>Formal Expression Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.FormalExpressionPair
   * @generated
   */
  public Adapter createFormalExpressionPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BehaviorActions <em>Behavior Actions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BehaviorActions
   * @generated
   */
  public Adapter createBehaviorActionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertedAction <em>Asserted Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertedAction
   * @generated
   */
  public Adapter createAssertedActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BasicAction <em>Basic Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BasicAction
   * @generated
   */
  public Adapter createBasicActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CombinableOperation <em>Combinable Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CombinableOperation
   * @generated
   */
  public Adapter createCombinableOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CommunicationAction <em>Communication Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CommunicationAction
   * @generated
   */
  public Adapter createCommunicationActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.SubprogramCall <em>Subprogram Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.SubprogramCall
   * @generated
   */
  public Adapter createSubprogramCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.FormalActualList <em>Formal Actual List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.FormalActualList
   * @generated
   */
  public Adapter createFormalActualListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.FormalActual <em>Formal Actual</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.FormalActual
   * @generated
   */
  public Adapter createFormalActualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.SubProgramParameter <em>Sub Program Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.SubProgramParameter
   * @generated
   */
  public Adapter createSubProgramParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PortOutput <em>Port Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PortOutput
   * @generated
   */
  public Adapter createPortOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PortInput <em>Port Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PortInput
   * @generated
   */
  public Adapter createPortInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExpressionOrAny <em>Expression Or Any</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExpressionOrAny
   * @generated
   */
  public Adapter createExpressionOrAnyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.SimultaneousAssignment <em>Simultaneous Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.SimultaneousAssignment
   * @generated
   */
  public Adapter createSimultaneousAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Alternative <em>Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Alternative
   * @generated
   */
  public Adapter createAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BLESSAlternative <em>Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BLESSAlternative
   * @generated
   */
  public Adapter createBLESSAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.GuardedAction <em>Guarded Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.GuardedAction
   * @generated
   */
  public Adapter createGuardedActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.WhileLoop <em>While Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.WhileLoop
   * @generated
   */
  public Adapter createWhileLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ForLoop <em>For Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ForLoop
   * @generated
   */
  public Adapter createForLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.DoUntilLoop <em>Do Until Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.DoUntilLoop
   * @generated
   */
  public Adapter createDoUntilLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ThrowsClause <em>Throws Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ThrowsClause
   * @generated
   */
  public Adapter createThrowsClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CatchClause <em>Catch Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CatchClause
   * @generated
   */
  public Adapter createCatchClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CatchClauseTerm <em>Catch Clause Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CatchClauseTerm
   * @generated
   */
  public Adapter createCatchClauseTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.WhenThrow <em>When Throw</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.WhenThrow
   * @generated
   */
  public Adapter createWhenThrowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Computation <em>Computation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Computation
   * @generated
   */
  public Adapter createComputationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BAAlternative <em>BA Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BAAlternative
   * @generated
   */
  public Adapter createBAAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ElseifAlternative <em>Elseif Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ElseifAlternative
   * @generated
   */
  public Adapter createElseifAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ElseAlternative <em>Else Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ElseAlternative
   * @generated
   */
  public Adapter createElseAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.IssueException <em>Issue Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.IssueException
   * @generated
   */
  public Adapter createIssueExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.LockingAction <em>Locking Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.LockingAction
   * @generated
   */
  public Adapter createLockingActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.FreezePort <em>Freeze Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.FreezePort
   * @generated
   */
  public Adapter createFreezePortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Pause <em>Pause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Pause
   * @generated
   */
  public Adapter createPauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ActionTimeout <em>Action Timeout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ActionTimeout
   * @generated
   */
  public Adapter createActionTimeoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BehaviorTime <em>Behavior Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BehaviorTime
   * @generated
   */
  public Adapter createBehaviorTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Exception <em>Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Exception
   * @generated
   */
  public Adapter createExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.GhostVariables <em>Ghost Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.GhostVariables
   * @generated
   */
  public Adapter createGhostVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.GhostVariable <em>Ghost Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.GhostVariable
   * @generated
   */
  public Adapter createGhostVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Assertion <em>Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Assertion
   * @generated
   */
  public Adapter createAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NamedAssertion <em>Named Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NamedAssertion
   * @generated
   */
  public Adapter createNamedAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NamelessAssertion <em>Nameless Assertion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NamelessAssertion
   * @generated
   */
  public Adapter createNamelessAssertionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NamelessFunction <em>Nameless Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NamelessFunction
   * @generated
   */
  public Adapter createNamelessFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NamelessEnumeration <em>Nameless Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NamelessEnumeration
   * @generated
   */
  public Adapter createNamelessEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Predicate <em>Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Predicate
   * @generated
   */
  public Adapter createPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertionNumericExpression <em>Assertion Numeric Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertionNumericExpression
   * @generated
   */
  public Adapter createAssertionNumericExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NumericExpression <em>Numeric Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NumericExpression
   * @generated
   */
  public Adapter createNumericExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Disjunction <em>Disjunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Disjunction
   * @generated
   */
  public Adapter createDisjunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Conjunction <em>Conjunction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Conjunction
   * @generated
   */
  public Adapter createConjunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Relation <em>Relation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Relation
   * @generated
   */
  public Adapter createRelationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AddSub <em>Add Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AddSub
   * @generated
   */
  public Adapter createAddSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.MultDiv <em>Mult Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.MultDiv
   * @generated
   */
  public Adapter createMultDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Exp <em>Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Exp
   * @generated
   */
  public Adapter createExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Subexpression <em>Subexpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Subexpression
   * @generated
   */
  public Adapter createSubexpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TimedExpression <em>Timed Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TimedExpression
   * @generated
   */
  public Adapter createTimedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TimedSubject <em>Timed Subject</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TimedSubject
   * @generated
   */
  public Adapter createTimedSubjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ParenthesizedSubexpression <em>Parenthesized Subexpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ParenthesizedSubexpression
   * @generated
   */
  public Adapter createParenthesizedSubexpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnaryOperator <em>Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnaryOperator
   * @generated
   */
  public Adapter createUnaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ConditionalExpression <em>Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ConditionalExpression
   * @generated
   */
  public Adapter createConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.EnumerationValue <em>Enumeration Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.EnumerationValue
   * @generated
   */
  public Adapter createEnumerationValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Constant <em>Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Constant
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NonNumericProperty <em>Non Numeric Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NonNumericProperty
   * @generated
   */
  public Adapter createNonNumericPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ValueName <em>Value Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ValueName
   * @generated
   */
  public Adapter createValueNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PartialName <em>Partial Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PartialName
   * @generated
   */
  public Adapter createPartialNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.IndexExpressionOrRange <em>Index Expression Or Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.IndexExpressionOrRange
   * @generated
   */
  public Adapter createIndexExpressionOrRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PeriodShift <em>Period Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PeriodShift
   * @generated
   */
  public Adapter createPeriodShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.IndexExpression <em>Index Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.IndexExpression
   * @generated
   */
  public Adapter createIndexExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CaseExpression <em>Case Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CaseExpression
   * @generated
   */
  public Adapter createCaseExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CaseChoice <em>Case Choice</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CaseChoice
   * @generated
   */
  public Adapter createCaseChoiceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.LogicVariables <em>Logic Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.LogicVariables
   * @generated
   */
  public Adapter createLogicVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.SumQuantification <em>Sum Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.SumQuantification
   * @generated
   */
  public Adapter createSumQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ProductQuantification <em>Product Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ProductQuantification
   * @generated
   */
  public Adapter createProductQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.CountingQuantification <em>Counting Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.CountingQuantification
   * @generated
   */
  public Adapter createCountingQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UniversalQuantification <em>Universal Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UniversalQuantification
   * @generated
   */
  public Adapter createUniversalQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ExistentialQuantification <em>Existential Quantification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ExistentialQuantification
   * @generated
   */
  public Adapter createExistentialQuantificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.RecordTerm <em>Record Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.RecordTerm
   * @generated
   */
  public Adapter createRecordTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.RecordValue <em>Record Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.RecordValue
   * @generated
   */
  public Adapter createRecordValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Invocation <em>Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Invocation
   * @generated
   */
  public Adapter createInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ActualParameter <em>Actual Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ActualParameter
   * @generated
   */
  public Adapter createActualParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.VariableList <em>Variable List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.VariableList
   * @generated
   */
  public Adapter createVariableListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertionFunctionValue <em>Assertion Function Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertionFunctionValue
   * @generated
   */
  public Adapter createAssertionFunctionValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction <em>Conditional Assertion Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction
   * @generated
   */
  public Adapter createConditionalAssertionFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ConditionValuePair <em>Condition Value Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ConditionValuePair
   * @generated
   */
  public Adapter createConditionValuePairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.AssertionEnumeration <em>Assertion Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.AssertionEnumeration
   * @generated
   */
  public Adapter createAssertionEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.EnumerationPair <em>Enumeration Pair</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.EnumerationPair
   * @generated
   */
  public Adapter createEnumerationPairAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TypeLibrary <em>Type Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TypeLibrary
   * @generated
   */
  public Adapter createTypeLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TypeDeclaration <em>Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TypeDeclaration
   * @generated
   */
  public Adapter createTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.TypeOrReference <em>Type Or Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.TypeOrReference
   * @generated
   */
  public Adapter createTypeOrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.BooleanType <em>Boolean Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.BooleanType
   * @generated
   */
  public Adapter createBooleanTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.StringType <em>String Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.StringType
   * @generated
   */
  public Adapter createStringTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.NullType <em>Null Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.NullType
   * @generated
   */
  public Adapter createNullTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.EnumerationType <em>Enumeration Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.EnumerationType
   * @generated
   */
  public Adapter createEnumerationTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.QuantityType <em>Quantity Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.QuantityType
   * @generated
   */
  public Adapter createQuantityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ANumber <em>ANumber</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ANumber
   * @generated
   */
  public Adapter createANumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ArrayRangeList <em>Array Range List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ArrayRangeList
   * @generated
   */
  public Adapter createArrayRangeListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.ArrayRange <em>Array Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.ArrayRange
   * @generated
   */
  public Adapter createArrayRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.RecordType <em>Record Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.RecordType
   * @generated
   */
  public Adapter createRecordTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.RecordField <em>Record Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.RecordField
   * @generated
   */
  public Adapter createRecordFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PropertyReference <em>Property Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PropertyReference
   * @generated
   */
  public Adapter createPropertyReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.PropertyField <em>Property Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.PropertyField
   * @generated
   */
  public Adapter createPropertyFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitName <em>Unit Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitName
   * @generated
   */
  public Adapter createUnitNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitFormula <em>Unit Formula</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitFormula
   * @generated
   */
  public Adapter createUnitFormulaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitDeclaration <em>Unit Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitDeclaration
   * @generated
   */
  public Adapter createUnitDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.RootDeclaration <em>Root Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.RootDeclaration
   * @generated
   */
  public Adapter createRootDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitExtension <em>Unit Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitExtension
   * @generated
   */
  public Adapter createUnitExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.UnitFactor <em>Unit Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.UnitFactor
   * @generated
   */
  public Adapter createUnitFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Quantity <em>Quantity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Quantity
   * @generated
   */
  public Adapter createQuantityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.multitude.aadl.bless.bLESS.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.multitude.aadl.bless.bLESS.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osate.aadl2.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osate.aadl2.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osate.aadl2.NamedElement <em>Named Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osate.aadl2.NamedElement
   * @generated
   */
  public Adapter createNamedElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osate.aadl2.ModalElement <em>Modal Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osate.aadl2.ModalElement
   * @generated
   */
  public Adapter createModalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osate.aadl2.AnnexSubclause <em>Annex Subclause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osate.aadl2.AnnexSubclause
   * @generated
   */
  public Adapter createAnnexSubclauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osate.aadl2.AnnexLibrary <em>Annex Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osate.aadl2.AnnexLibrary
   * @generated
   */
  public Adapter createAnnexLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BLESSAdapterFactory
