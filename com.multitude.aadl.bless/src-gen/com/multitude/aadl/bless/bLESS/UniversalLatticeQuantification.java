/**
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 *  from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.bLESS;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EObject;

import org.osate.aadl2.Element;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Universal Lattice Quantification</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getVariables <em>Variables</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getLower_bound <em>Lower bound</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getUpper_bound <em>Upper bound</em>}</li>
 *   <li>{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getElq <em>Elq</em>}</li>
 * </ul>
 *
 * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getUniversalLatticeQuantification()
 * @model
 * @generated
 */
public interface UniversalLatticeQuantification extends EObject, Element
{
  /**
   * Returns the value of the '<em><b>Variables</b></em>' containment reference list.
   * The list contents are of type {@link com.multitude.aadl.bless.bLESS.ForallVariable}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Variables</em>' containment reference list.
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getUniversalLatticeQuantification_Variables()
   * @model containment="true"
   * @generated
   */
  EList<ForallVariable> getVariables();

  /**
   * Returns the value of the '<em><b>Lower bound</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Lower bound</em>' containment reference.
   * @see #setLower_bound(Expression)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getUniversalLatticeQuantification_Lower_bound()
   * @model containment="true"
   * @generated
   */
  Expression getLower_bound();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getLower_bound <em>Lower bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Lower bound</em>' containment reference.
   * @see #getLower_bound()
   * @generated
   */
  void setLower_bound(Expression value);

  /**
   * Returns the value of the '<em><b>Upper bound</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Upper bound</em>' containment reference.
   * @see #setUpper_bound(Expression)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getUniversalLatticeQuantification_Upper_bound()
   * @model containment="true"
   * @generated
   */
  Expression getUpper_bound();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getUpper_bound <em>Upper bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Upper bound</em>' containment reference.
   * @see #getUpper_bound()
   * @generated
   */
  void setUpper_bound(Expression value);

  /**
   * Returns the value of the '<em><b>Elq</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the value of the '<em>Elq</em>' containment reference.
   * @see #setElq(ExistentialLatticeQuantification)
   * @see com.multitude.aadl.bless.bLESS.BLESSPackage#getUniversalLatticeQuantification_Elq()
   * @model containment="true"
   * @generated
   */
  ExistentialLatticeQuantification getElq();

  /**
   * Sets the value of the '{@link com.multitude.aadl.bless.bLESS.UniversalLatticeQuantification#getElq <em>Elq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Elq</em>' containment reference.
   * @see #getElq()
   * @generated
   */
  void setElq(ExistentialLatticeQuantification value);

} // UniversalLatticeQuantification
