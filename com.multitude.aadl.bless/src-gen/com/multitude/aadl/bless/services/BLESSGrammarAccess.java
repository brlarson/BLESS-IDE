/*
 * (C) Multitude Corporation 2024
 * generated by Xtext 2.33.0
 from BLESS.xtext, by BRL 
 */
package com.multitude.aadl.bless.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BLESSGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class BLESSGrammarRootsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BLESSGrammarRoots");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUnitlibraryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cUnit_libraryAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnit_libraryUnitLibraryParserRuleCall_0_1_0 = (RuleCall)cUnit_libraryAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTypelibraryKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_libraryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_libraryTypeLibraryParserRuleCall_1_1_0 = (RuleCall)cType_libraryAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAssertionlibraryKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssertion_libraryAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssertion_libraryAssertionLibraryParserRuleCall_2_1_0 = (RuleCall)cAssertion_libraryAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cActionsubclauseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAction_subclauseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAction_subclauseActionSubclauseParserRuleCall_3_1_0 = (RuleCall)cAction_subclauseAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cExceptionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cException_libraryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cException_libraryExceptionLibraryParserRuleCall_4_1_0 = (RuleCall)cException_libraryAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cBlesssubclauseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBless_subclauseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBless_subclauseBLESSSubclauseParserRuleCall_5_1_0 = (RuleCall)cBless_subclauseAssignment_5_1.eContents().get(0);
		
		//BLESSGrammarRoots :
		//  'unitlibrary' unit_library=UnitLibrary
		//  | 'typelibrary' type_library=TypeLibrary
		//  | 'assertionlibrary' assertion_library=AssertionLibrary
		//  | 'actionsubclause'     action_subclause=ActionSubclause
		//    | 'exceptions' exception_library=ExceptionLibrary
		//    | 'blesssubclause' bless_subclause=BLESSSubclause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'unitlibrary' unit_library=UnitLibrary
		//| 'typelibrary' type_library=TypeLibrary
		//| 'assertionlibrary' assertion_library=AssertionLibrary
		//| 'actionsubclause'     action_subclause=ActionSubclause
		//  | 'exceptions' exception_library=ExceptionLibrary
		//  | 'blesssubclause' bless_subclause=BLESSSubclause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'unitlibrary' unit_library=UnitLibrary
		public Group getGroup_0() { return cGroup_0; }
		
		//'unitlibrary'
		public Keyword getUnitlibraryKeyword_0_0() { return cUnitlibraryKeyword_0_0; }
		
		//unit_library=UnitLibrary
		public Assignment getUnit_libraryAssignment_0_1() { return cUnit_libraryAssignment_0_1; }
		
		//UnitLibrary
		public RuleCall getUnit_libraryUnitLibraryParserRuleCall_0_1_0() { return cUnit_libraryUnitLibraryParserRuleCall_0_1_0; }
		
		//'typelibrary' type_library=TypeLibrary
		public Group getGroup_1() { return cGroup_1; }
		
		//'typelibrary'
		public Keyword getTypelibraryKeyword_1_0() { return cTypelibraryKeyword_1_0; }
		
		//type_library=TypeLibrary
		public Assignment getType_libraryAssignment_1_1() { return cType_libraryAssignment_1_1; }
		
		//TypeLibrary
		public RuleCall getType_libraryTypeLibraryParserRuleCall_1_1_0() { return cType_libraryTypeLibraryParserRuleCall_1_1_0; }
		
		//'assertionlibrary' assertion_library=AssertionLibrary
		public Group getGroup_2() { return cGroup_2; }
		
		//'assertionlibrary'
		public Keyword getAssertionlibraryKeyword_2_0() { return cAssertionlibraryKeyword_2_0; }
		
		//assertion_library=AssertionLibrary
		public Assignment getAssertion_libraryAssignment_2_1() { return cAssertion_libraryAssignment_2_1; }
		
		//AssertionLibrary
		public RuleCall getAssertion_libraryAssertionLibraryParserRuleCall_2_1_0() { return cAssertion_libraryAssertionLibraryParserRuleCall_2_1_0; }
		
		//'actionsubclause' 	action_subclause=ActionSubclause
		public Group getGroup_3() { return cGroup_3; }
		
		//'actionsubclause'
		public Keyword getActionsubclauseKeyword_3_0() { return cActionsubclauseKeyword_3_0; }
		
		//action_subclause=ActionSubclause
		public Assignment getAction_subclauseAssignment_3_1() { return cAction_subclauseAssignment_3_1; }
		
		//ActionSubclause
		public RuleCall getAction_subclauseActionSubclauseParserRuleCall_3_1_0() { return cAction_subclauseActionSubclauseParserRuleCall_3_1_0; }
		
		//'exceptions' exception_library=ExceptionLibrary
		public Group getGroup_4() { return cGroup_4; }
		
		//'exceptions'
		public Keyword getExceptionsKeyword_4_0() { return cExceptionsKeyword_4_0; }
		
		//exception_library=ExceptionLibrary
		public Assignment getException_libraryAssignment_4_1() { return cException_libraryAssignment_4_1; }
		
		//ExceptionLibrary
		public RuleCall getException_libraryExceptionLibraryParserRuleCall_4_1_0() { return cException_libraryExceptionLibraryParserRuleCall_4_1_0; }
		
		//'blesssubclause' bless_subclause=BLESSSubclause
		public Group getGroup_5() { return cGroup_5; }
		
		//'blesssubclause'
		public Keyword getBlesssubclauseKeyword_5_0() { return cBlesssubclauseKeyword_5_0; }
		
		//bless_subclause=BLESSSubclause
		public Assignment getBless_subclauseAssignment_5_1() { return cBless_subclauseAssignment_5_1; }
		
		//BLESSSubclause
		public RuleCall getBless_subclauseBLESSSubclauseParserRuleCall_5_1_0() { return cBless_subclauseBLESSSubclauseParserRuleCall_5_1_0; }
	}
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AnnexLibrary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLibraryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertionLibraryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExceptionLibraryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//    UnitLibrary
		//    | TypeLibrary
		//    | AssertionLibrary
		//    | ExceptionLibrary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnitLibrary
		//| TypeLibrary
		//| AssertionLibrary
		//| ExceptionLibrary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitLibrary
		public RuleCall getUnitLibraryParserRuleCall_0() { return cUnitLibraryParserRuleCall_0; }
		
		//TypeLibrary
		public RuleCall getTypeLibraryParserRuleCall_1() { return cTypeLibraryParserRuleCall_1; }
		
		//AssertionLibrary
		public RuleCall getAssertionLibraryParserRuleCall_2() { return cAssertionLibraryParserRuleCall_2; }
		
		//ExceptionLibrary
		public RuleCall getExceptionLibraryParserRuleCall_3() { return cExceptionLibraryParserRuleCall_3; }
	}
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AnnexSubclause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionSubclauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBLESSSubclauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//     ActionSubclause
		//     | BLESSSubclause
		//     ;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionSubclause
		//| BLESSSubclause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionSubclause
		public RuleCall getActionSubclauseParserRuleCall_0() { return cActionSubclauseParserRuleCall_0; }
		
		//BLESSSubclause
		public RuleCall getBLESSSubclauseParserRuleCall_1() { return cBLESSSubclauseParserRuleCall_1; }
	}
	public class BLESSSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BLESSSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBLESSSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNo_proofAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNo_proofDO_NOT_PROVEKeyword_1_0 = (Keyword)cNo_proofAssignment_1.eContents().get(0);
		private final Assignment cAssert_clauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssert_clauseAssertClauseParserRuleCall_2_0 = (RuleCall)cAssert_clauseAssignment_2.eContents().get(0);
		private final Assignment cInvariantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantInvariantClauseParserRuleCall_3_0 = (RuleCall)cInvariantAssignment_3.eContents().get(0);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesVariablesSectionParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Assignment cStatesSectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesSectionStatesSectionParserRuleCall_5_0 = (RuleCall)cStatesSectionAssignment_5.eContents().get(0);
		private final Assignment cTransitionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionsTransitionsParserRuleCall_6_0 = (RuleCall)cTransitionsAssignment_6.eContents().get(0);
		
		//BLESSSubclause returns BLESSSubclause:
		//    {BLESSSubclause}
		//    no_proof ?= 'DO_NOT_PROVE'?
		//  assert_clause=AssertClause?
		//  invariant=InvariantClause?
		//  variables=VariablesSection?
		//  statesSection=StatesSection?
		//  transitions=Transitions?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//  {BLESSSubclause}
		//  no_proof ?= 'DO_NOT_PROVE'?
		//assert_clause=AssertClause?
		//invariant=InvariantClause?
		//variables=VariablesSection?
		//statesSection=StatesSection?
		//transitions=Transitions?
		public Group getGroup() { return cGroup; }
		
		//{BLESSSubclause}
		public Action getBLESSSubclauseAction_0() { return cBLESSSubclauseAction_0; }
		
		//no_proof ?= 'DO_NOT_PROVE'?
		public Assignment getNo_proofAssignment_1() { return cNo_proofAssignment_1; }
		
		//'DO_NOT_PROVE'
		public Keyword getNo_proofDO_NOT_PROVEKeyword_1_0() { return cNo_proofDO_NOT_PROVEKeyword_1_0; }
		
		//assert_clause=AssertClause?
		public Assignment getAssert_clauseAssignment_2() { return cAssert_clauseAssignment_2; }
		
		//AssertClause
		public RuleCall getAssert_clauseAssertClauseParserRuleCall_2_0() { return cAssert_clauseAssertClauseParserRuleCall_2_0; }
		
		//invariant=InvariantClause?
		public Assignment getInvariantAssignment_3() { return cInvariantAssignment_3; }
		
		//InvariantClause
		public RuleCall getInvariantInvariantClauseParserRuleCall_3_0() { return cInvariantInvariantClauseParserRuleCall_3_0; }
		
		//variables=VariablesSection?
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }
		
		//VariablesSection
		public RuleCall getVariablesVariablesSectionParserRuleCall_4_0() { return cVariablesVariablesSectionParserRuleCall_4_0; }
		
		//statesSection=StatesSection?
		public Assignment getStatesSectionAssignment_5() { return cStatesSectionAssignment_5; }
		
		//StatesSection
		public RuleCall getStatesSectionStatesSectionParserRuleCall_5_0() { return cStatesSectionStatesSectionParserRuleCall_5_0; }
		
		//transitions=Transitions?
		public Assignment getTransitionsAssignment_6() { return cTransitionsAssignment_6; }
		
		//Transitions
		public RuleCall getTransitionsTransitionsParserRuleCall_6_0() { return cTransitionsTransitionsParserRuleCall_6_0; }
	}
	public class UnitLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitLibrary");
		private final Assignment cUnitDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cUnitDeclarationsUnitDeclarationParserRuleCall_0 = (RuleCall)cUnitDeclarationsAssignment.eContents().get(0);
		
		//UnitLibrary:
		//    unitDeclarations+=UnitDeclaration+
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//unitDeclarations+=UnitDeclaration+
		public Assignment getUnitDeclarationsAssignment() { return cUnitDeclarationsAssignment; }
		
		//UnitDeclaration
		public RuleCall getUnitDeclarationsUnitDeclarationParserRuleCall_0() { return cUnitDeclarationsUnitDeclarationParserRuleCall_0; }
	}
	public class AssertionLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertionLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssertionLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGhostsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGhostsGhostVariablesParserRuleCall_1_0 = (RuleCall)cGhostsAssignment_1.eContents().get(0);
		private final Assignment cAssertion_listAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertion_listNamedAssertionParserRuleCall_2_0 = (RuleCall)cAssertion_listAssignment_2.eContents().get(0);
		
		////assertion_annex_library
		//AssertionLibrary returns AssertionLibrary:
		//    {AssertionLibrary}
		//    ( ghosts=GhostVariables )?
		//    assertion_list+=NamedAssertion*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssertionLibrary}
		//( ghosts=GhostVariables )?
		//assertion_list+=NamedAssertion*
		public Group getGroup() { return cGroup; }
		
		//{AssertionLibrary}
		public Action getAssertionLibraryAction_0() { return cAssertionLibraryAction_0; }
		
		//( ghosts=GhostVariables )?
		public Assignment getGhostsAssignment_1() { return cGhostsAssignment_1; }
		
		//GhostVariables
		public RuleCall getGhostsGhostVariablesParserRuleCall_1_0() { return cGhostsGhostVariablesParserRuleCall_1_0; }
		
		//assertion_list+=NamedAssertion*
		public Assignment getAssertion_listAssignment_2() { return cAssertion_listAssignment_2; }
		
		//NamedAssertion
		public RuleCall getAssertion_listNamedAssertionParserRuleCall_2_0() { return cAssertion_listNamedAssertionParserRuleCall_2_0; }
	}
	public class ExceptionLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExceptionLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExceptionLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExceptiondefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExceptiondefinitionsExceptionParserRuleCall_1_0 = (RuleCall)cExceptiondefinitionsAssignment_1.eContents().get(0);
		
		//ExceptionLibrary returns ExceptionLibrary:
		//    {ExceptionLibrary}
		//    exceptiondefinitions+=Exception+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExceptionLibrary}
		//exceptiondefinitions+=Exception+
		public Group getGroup() { return cGroup; }
		
		//{ExceptionLibrary}
		public Action getExceptionLibraryAction_0() { return cExceptionLibraryAction_0; }
		
		//exceptiondefinitions+=Exception+
		public Assignment getExceptiondefinitionsAssignment_1() { return cExceptiondefinitionsAssignment_1; }
		
		//Exception
		public RuleCall getExceptiondefinitionsExceptionParserRuleCall_1_0() { return cExceptiondefinitionsExceptionParserRuleCall_1_0; }
	}
	public class ActionSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ActionSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNo_proofAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNo_proofDO_NOT_PROVEKeyword_1_0 = (Keyword)cNo_proofAssignment_1.eContents().get(0);
		private final Assignment cThrows_clauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThrows_clauseThrowsClauseParserRuleCall_2_0 = (RuleCall)cThrows_clauseAssignment_2.eContents().get(0);
		private final Assignment cAssert_clauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssert_clauseAssertClauseParserRuleCall_3_0 = (RuleCall)cAssert_clauseAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPreKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPreconditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPreconditionAssertionParserRuleCall_4_1_0 = (RuleCall)cPreconditionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPostKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPostconditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPostconditionAssertionParserRuleCall_5_1_0 = (RuleCall)cPostconditionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInvariantKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInvariantAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInvariantAssertionParserRuleCall_6_1_0 = (RuleCall)cInvariantAssignment_6_1.eContents().get(0);
		private final Assignment cElqAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElqExistentialLatticeQuantificationParserRuleCall_7_0 = (RuleCall)cElqAssignment_7.eContents().get(0);
		
		//ActionSubclause returns ActionSubclause:
		//    {ActionSubclause}
		//    no_proof ?= 'DO_NOT_PROVE'?
		//  throws_clause=ThrowsClause?
		//  assert_clause=AssertClause?  //optionally set av
		//  ( 'pre' precondition=Assertion )?
		//  ( 'post' postcondition=Assertion )?
		//  ( 'invariant' invariant=Assertion )?
		//  elq=ExistentialLatticeQuantification
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  {ActionSubclause}
		//  no_proof ?= 'DO_NOT_PROVE'?
		//throws_clause=ThrowsClause?
		//assert_clause=AssertClause?  //optionally set av
		//( 'pre' precondition=Assertion )?
		//( 'post' postcondition=Assertion )?
		//( 'invariant' invariant=Assertion )?
		//elq=ExistentialLatticeQuantification
		public Group getGroup() { return cGroup; }
		
		//{ActionSubclause}
		public Action getActionSubclauseAction_0() { return cActionSubclauseAction_0; }
		
		//no_proof ?= 'DO_NOT_PROVE'?
		public Assignment getNo_proofAssignment_1() { return cNo_proofAssignment_1; }
		
		//'DO_NOT_PROVE'
		public Keyword getNo_proofDO_NOT_PROVEKeyword_1_0() { return cNo_proofDO_NOT_PROVEKeyword_1_0; }
		
		//throws_clause=ThrowsClause?
		public Assignment getThrows_clauseAssignment_2() { return cThrows_clauseAssignment_2; }
		
		//ThrowsClause
		public RuleCall getThrows_clauseThrowsClauseParserRuleCall_2_0() { return cThrows_clauseThrowsClauseParserRuleCall_2_0; }
		
		//assert_clause=AssertClause?
		public Assignment getAssert_clauseAssignment_3() { return cAssert_clauseAssignment_3; }
		
		//AssertClause
		public RuleCall getAssert_clauseAssertClauseParserRuleCall_3_0() { return cAssert_clauseAssertClauseParserRuleCall_3_0; }
		
		////optionally set av
		//( 'pre' precondition=Assertion )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'pre'
		public Keyword getPreKeyword_4_0() { return cPreKeyword_4_0; }
		
		//precondition=Assertion
		public Assignment getPreconditionAssignment_4_1() { return cPreconditionAssignment_4_1; }
		
		//Assertion
		public RuleCall getPreconditionAssertionParserRuleCall_4_1_0() { return cPreconditionAssertionParserRuleCall_4_1_0; }
		
		//( 'post' postcondition=Assertion )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'post'
		public Keyword getPostKeyword_5_0() { return cPostKeyword_5_0; }
		
		//postcondition=Assertion
		public Assignment getPostconditionAssignment_5_1() { return cPostconditionAssignment_5_1; }
		
		//Assertion
		public RuleCall getPostconditionAssertionParserRuleCall_5_1_0() { return cPostconditionAssertionParserRuleCall_5_1_0; }
		
		//( 'invariant' invariant=Assertion )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'invariant'
		public Keyword getInvariantKeyword_6_0() { return cInvariantKeyword_6_0; }
		
		//invariant=Assertion
		public Assignment getInvariantAssignment_6_1() { return cInvariantAssignment_6_1; }
		
		//Assertion
		public RuleCall getInvariantAssertionParserRuleCall_6_1_0() { return cInvariantAssertionParserRuleCall_6_1_0; }
		
		//elq=ExistentialLatticeQuantification
		public Assignment getElqAssignment_7() { return cElqAssignment_7; }
		
		//ExistentialLatticeQuantification
		public RuleCall getElqExistentialLatticeQuantificationParserRuleCall_7_0() { return cElqExistentialLatticeQuantificationParserRuleCall_7_0; }
	}
	public class InvariantClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.InvariantClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvAssertionParserRuleCall_1_0 = (RuleCall)cInvAssignment_1.eContents().get(0);
		
		///////////////////////////////////   BLESS   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//InvariantClause:
		//  'invariant' inv=Assertion
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'invariant' inv=Assertion
		public Group getGroup() { return cGroup; }
		
		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//inv=Assertion
		public Assignment getInvAssignment_1() { return cInvAssignment_1; }
		
		//Assertion
		public RuleCall getInvAssertionParserRuleCall_1_0() { return cInvAssertionParserRuleCall_1_0; }
	}
	public class VariablesSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.VariablesSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBehavior_variablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehavior_variablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cBehavior_variablesAssignment_1.eContents().get(0);
		
		//VariablesSection:
		//    'variables' behavior_variables+=VariableDeclaration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'variables' behavior_variables+=VariableDeclaration+
		public Group getGroup() { return cGroup; }
		
		//'variables'
		public Keyword getVariablesKeyword_0() { return cVariablesKeyword_0; }
		
		//behavior_variables+=VariableDeclaration+
		public Assignment getBehavior_variablesAssignment_1() { return cBehavior_variablesAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getBehavior_variablesVariableDeclarationParserRuleCall_1_0() { return cBehavior_variablesVariableDeclarationParserRuleCall_1_0; }
	}
	public class StatesSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.StatesSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStStatesKeyword_0_0 = (Keyword)cStAssignment_0.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesBehaviorStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//StatesSection:
		//      ( st='states' states+=BehaviorState+ )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( st='states' states+=BehaviorState+ )
		public Group getGroup() { return cGroup; }
		
		//st='states'
		public Assignment getStAssignment_0() { return cStAssignment_0; }
		
		//'states'
		public Keyword getStStatesKeyword_0_0() { return cStStatesKeyword_0_0; }
		
		//states+=BehaviorState+
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }
		
		//BehaviorState
		public RuleCall getStatesBehaviorStateParserRuleCall_1_0() { return cStatesBehaviorStateParserRuleCall_1_0; }
	}
	public class BehaviorStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BehaviorState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInitialInitialKeyword_2_0 = (Keyword)cInitialAssignment_2.eContents().get(0);
		private final Assignment cCompleteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cCompleteCompleteKeyword_3_0 = (Keyword)cCompleteAssignment_3.eContents().get(0);
		private final Assignment cFinalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cFinalFinalKeyword_4_0 = (Keyword)cFinalAssignment_4.eContents().get(0);
		private final Assignment cModeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cModeModeKeyword_5_0 = (Keyword)cModeAssignment_5.eContents().get(0);
		private final Keyword cStateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cState_assertionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cState_assertionAssertionParserRuleCall_7_0 = (RuleCall)cState_assertionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////behavior_state
		////allow states to have more than one:  initial complete final
		////for BA2015 reconciliation
		//BehaviorState:
		//  name=ID
		//      ':' initial?='initial'?  complete?='complete'?  final?='final'? mode?='mode'?
		//  'state' state_assertion=Assertion? ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//    ':' initial?='initial'?  complete?='complete'?  final?='final'? mode?='mode'?
		//'state' state_assertion=Assertion? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//initial?='initial'?
		public Assignment getInitialAssignment_2() { return cInitialAssignment_2; }
		
		//'initial'
		public Keyword getInitialInitialKeyword_2_0() { return cInitialInitialKeyword_2_0; }
		
		//complete?='complete'?
		public Assignment getCompleteAssignment_3() { return cCompleteAssignment_3; }
		
		//'complete'
		public Keyword getCompleteCompleteKeyword_3_0() { return cCompleteCompleteKeyword_3_0; }
		
		//final?='final'?
		public Assignment getFinalAssignment_4() { return cFinalAssignment_4; }
		
		//'final'
		public Keyword getFinalFinalKeyword_4_0() { return cFinalFinalKeyword_4_0; }
		
		//mode?='mode'?
		public Assignment getModeAssignment_5() { return cModeAssignment_5; }
		
		//'mode'
		public Keyword getModeModeKeyword_5_0() { return cModeModeKeyword_5_0; }
		
		//'state'
		public Keyword getStateKeyword_6() { return cStateKeyword_6; }
		
		//state_assertion=Assertion?
		public Assignment getState_assertionAssignment_7() { return cState_assertionAssignment_7; }
		
		//Assertion
		public RuleCall getState_assertionAssertionParserRuleCall_7_0() { return cState_assertionAssertionParserRuleCall_7_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class TransitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Transitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBtBehaviorTransitionParserRuleCall_1_0 = (RuleCall)cBtAssignment_1.eContents().get(0);
		
		//Transitions:
		//  'transitions' bt+=BehaviorTransition+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'transitions' bt+=BehaviorTransition+
		public Group getGroup() { return cGroup; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_0() { return cTransitionsKeyword_0; }
		
		//bt+=BehaviorTransition+
		public Assignment getBtAssignment_1() { return cBtAssignment_1; }
		
		//BehaviorTransition
		public RuleCall getBtBehaviorTransitionParserRuleCall_1_0() { return cBtBehaviorTransitionParserRuleCall_1_0; }
	}
	public class BehaviorTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BehaviorTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityPriorityParserRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		private final Assignment cColonAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cColonAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourcesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cSourcesBehaviorStateCrossReference_3_0_0 = (CrossReference)cSourcesAssignment_3_0.eContents().get(0);
		private final RuleCall cSourcesBehaviorStateIDTerminalRuleCall_3_0_0_1 = (RuleCall)cSourcesBehaviorStateCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourcesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cSourcesBehaviorStateCrossReference_3_1_1_0 = (CrossReference)cSourcesAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSourcesBehaviorStateIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cSourcesBehaviorStateCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cDispatchAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cDispatchDispatchConditionParserRuleCall_5_0_0 = (RuleCall)cDispatchAssignment_5_0.eContents().get(0);
		private final Assignment cExecuteAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cExecuteExecuteConditionParserRuleCall_5_1_0 = (RuleCall)cExecuteAssignment_5_1.eContents().get(0);
		private final Assignment cModeAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cModeModeConditionParserRuleCall_5_2_0 = (RuleCall)cModeAssignment_5_2.eContents().get(0);
		private final Assignment cInternalAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cInternalInternalConditionParserRuleCall_5_3_0 = (RuleCall)cInternalAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDestinationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDestinationBehaviorStateCrossReference_7_0 = (CrossReference)cDestinationAssignment_7.eContents().get(0);
		private final RuleCall cDestinationBehaviorStateIDTerminalRuleCall_7_0_1 = (RuleCall)cDestinationBehaviorStateCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cActionsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_8_1_0 = (RuleCall)cActionsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cAssAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAssAssertionParserRuleCall_9_0 = (RuleCall)cAssAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//    /////////////////////////  TRANSITION  /////////////////////////
		////behavior_transition
		//BehaviorTransition returns BehaviorTransition:
		////  {BehaviorTransition}
		////  transition_label=TransitionLabel
		//  name=ID  priority=Priority? colon=':'
		//  ( sources+=[BehaviorState] ( ',' sources+=[BehaviorState] )* )
		//  '-[' //transition_condition
		//  ( dispatch=DispatchCondition |
		//      execute=ExecuteCondition |
		//      mode=ModeCondition |
		//      internal=InternalCondition )?
		//  ']->'
		//  destination=[BehaviorState]
		//  ( '{' actions=BehaviorActions? '}' )? ass=Assertion? ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  {BehaviorTransition}
		////  transition_label=TransitionLabel
		//  name=ID  priority=Priority? colon=':'
		//  ( sources+=[BehaviorState] ( ',' sources+=[BehaviorState] )* )
		//  '-[' //transition_condition
		//  ( dispatch=DispatchCondition |
		//      execute=ExecuteCondition |
		//      mode=ModeCondition |
		//      internal=InternalCondition )?
		//  ']->'
		//  destination=[BehaviorState]
		//  ( '{' actions=BehaviorActions? '}' )? ass=Assertion? ';'?
		public Group getGroup() { return cGroup; }
		
		////  {BehaviorTransition}
		////  transition_label=TransitionLabel
		//  name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//priority=Priority?
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_1_0() { return cPriorityPriorityParserRuleCall_1_0; }
		
		//colon=':'
		public Assignment getColonAssignment_2() { return cColonAssignment_2; }
		
		//':'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//( sources+=[BehaviorState] ( ',' sources+=[BehaviorState] )* )
		public Group getGroup_3() { return cGroup_3; }
		
		//sources+=[BehaviorState]
		public Assignment getSourcesAssignment_3_0() { return cSourcesAssignment_3_0; }
		
		//[BehaviorState]
		public CrossReference getSourcesBehaviorStateCrossReference_3_0_0() { return cSourcesBehaviorStateCrossReference_3_0_0; }
		
		//ID
		public RuleCall getSourcesBehaviorStateIDTerminalRuleCall_3_0_0_1() { return cSourcesBehaviorStateIDTerminalRuleCall_3_0_0_1; }
		
		//( ',' sources+=[BehaviorState] )*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//sources+=[BehaviorState]
		public Assignment getSourcesAssignment_3_1_1() { return cSourcesAssignment_3_1_1; }
		
		//[BehaviorState]
		public CrossReference getSourcesBehaviorStateCrossReference_3_1_1_0() { return cSourcesBehaviorStateCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getSourcesBehaviorStateIDTerminalRuleCall_3_1_1_0_1() { return cSourcesBehaviorStateIDTerminalRuleCall_3_1_1_0_1; }
		
		//'-['
		public Keyword getHyphenMinusLeftSquareBracketKeyword_4() { return cHyphenMinusLeftSquareBracketKeyword_4; }
		
		////transition_condition
		// ( dispatch=DispatchCondition |
		//     execute=ExecuteCondition |
		//     mode=ModeCondition |
		//     internal=InternalCondition )?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//dispatch=DispatchCondition
		public Assignment getDispatchAssignment_5_0() { return cDispatchAssignment_5_0; }
		
		//DispatchCondition
		public RuleCall getDispatchDispatchConditionParserRuleCall_5_0_0() { return cDispatchDispatchConditionParserRuleCall_5_0_0; }
		
		//execute=ExecuteCondition
		public Assignment getExecuteAssignment_5_1() { return cExecuteAssignment_5_1; }
		
		//ExecuteCondition
		public RuleCall getExecuteExecuteConditionParserRuleCall_5_1_0() { return cExecuteExecuteConditionParserRuleCall_5_1_0; }
		
		//mode=ModeCondition
		public Assignment getModeAssignment_5_2() { return cModeAssignment_5_2; }
		
		//ModeCondition
		public RuleCall getModeModeConditionParserRuleCall_5_2_0() { return cModeModeConditionParserRuleCall_5_2_0; }
		
		//internal=InternalCondition
		public Assignment getInternalAssignment_5_3() { return cInternalAssignment_5_3; }
		
		//InternalCondition
		public RuleCall getInternalInternalConditionParserRuleCall_5_3_0() { return cInternalInternalConditionParserRuleCall_5_3_0; }
		
		//']->'
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_6() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_6; }
		
		//destination=[BehaviorState]
		public Assignment getDestinationAssignment_7() { return cDestinationAssignment_7; }
		
		//[BehaviorState]
		public CrossReference getDestinationBehaviorStateCrossReference_7_0() { return cDestinationBehaviorStateCrossReference_7_0; }
		
		//ID
		public RuleCall getDestinationBehaviorStateIDTerminalRuleCall_7_0_1() { return cDestinationBehaviorStateIDTerminalRuleCall_7_0_1; }
		
		//( '{' actions=BehaviorActions? '}' )?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//actions=BehaviorActions?
		public Assignment getActionsAssignment_8_1() { return cActionsAssignment_8_1; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_8_1_0() { return cActionsBehaviorActionsParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }
		
		//ass=Assertion?
		public Assignment getAssAssignment_9() { return cAssAssignment_9; }
		
		//Assertion
		public RuleCall getAssAssertionParserRuleCall_9_0() { return cAssAssertionParserRuleCall_9_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityNUMBERTerminalRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////transition_label
		////TransitionLabel:
		////  id=ID priority=Priority?
		////;
		//@Deprecated
		//Priority:
		//    '[' priority=NUMBER ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' priority=NUMBER ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//priority=NUMBER
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }
		
		//NUMBER
		public RuleCall getPriorityNUMBERTerminalRuleCall_1_0() { return cPriorityNUMBERTerminalRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class DispatchConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DispatchCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDispatchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDispatchDispatchKeyword_1_0 = (Keyword)cDispatchAssignment_1.eContents().get(0);
		private final Assignment cDeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeDispatchExpressionParserRuleCall_2_0 = (RuleCall)cDeAssignment_2.eContents().get(0);
		private final Assignment cFrozenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFrozenFreezePortParserRuleCall_3_0 = (RuleCall)cFrozenAssignment_3.eContents().get(0);
		
		////dispatch_condition
		//DispatchCondition:
		//  'on' dispatch='dispatch' de=DispatchExpression?
		//  //BA2015 reconciliation declare ports to be frozen
		//  frozen=FreezePort?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' dispatch='dispatch' de=DispatchExpression?
		////BA2015 reconciliation declare ports to be frozen
		//frozen=FreezePort?
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//dispatch='dispatch'
		public Assignment getDispatchAssignment_1() { return cDispatchAssignment_1; }
		
		//'dispatch'
		public Keyword getDispatchDispatchKeyword_1_0() { return cDispatchDispatchKeyword_1_0; }
		
		//de=DispatchExpression?
		public Assignment getDeAssignment_2() { return cDeAssignment_2; }
		
		//DispatchExpression
		public RuleCall getDeDispatchExpressionParserRuleCall_2_0() { return cDeDispatchExpressionParserRuleCall_2_0; }
		
		////BA2015 reconciliation declare ports to be frozen
		//frozen=FreezePort?
		public Assignment getFrozenAssignment_3() { return cFrozenAssignment_3; }
		
		//FreezePort
		public RuleCall getFrozenFreezePortParserRuleCall_3_0() { return cFrozenFreezePortParserRuleCall_3_0; }
	}
	public class DispatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DispatchExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDcAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDcDispatchConjunctionParserRuleCall_0_0_0 = (RuleCall)cDcAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOrAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cOrOrKeyword_0_1_0_0 = (Keyword)cOrAssignment_0_1_0.eContents().get(0);
		private final Assignment cDcAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cDcDispatchConjunctionParserRuleCall_0_1_1_0 = (RuleCall)cDcAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cOrKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cDcAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cDcDispatchConjunctionParserRuleCall_0_1_2_1_0 = (RuleCall)cDcAssignment_0_1_2_1.eContents().get(0);
		private final Assignment cSubprogramaccessdispatchAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubprogramaccessdispatchSubprogramAccessDispatchParserRuleCall_1_0 = (RuleCall)cSubprogramaccessdispatchAssignment_1.eContents().get(0);
		
		////dispatch_expression
		//DispatchExpression:
		//  dc+=DispatchConjunction ( or?='or' dc+=DispatchConjunction
		//      ( 'or' dc+=DispatchConjunction )* )?
		//      //BA2015 reconciliation
		//  | subprogramaccessdispatch=SubprogramAccessDispatch
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//dc+=DispatchConjunction ( or?='or' dc+=DispatchConjunction
		//    ( 'or' dc+=DispatchConjunction )* )?
		//    //BA2015 reconciliation
		//| subprogramaccessdispatch=SubprogramAccessDispatch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dc+=DispatchConjunction ( or?='or' dc+=DispatchConjunction
		//    ( 'or' dc+=DispatchConjunction )* )?
		public Group getGroup_0() { return cGroup_0; }
		
		//dc+=DispatchConjunction
		public Assignment getDcAssignment_0_0() { return cDcAssignment_0_0; }
		
		//DispatchConjunction
		public RuleCall getDcDispatchConjunctionParserRuleCall_0_0_0() { return cDcDispatchConjunctionParserRuleCall_0_0_0; }
		
		//( or?='or' dc+=DispatchConjunction
		//     ( 'or' dc+=DispatchConjunction )* )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//or?='or'
		public Assignment getOrAssignment_0_1_0() { return cOrAssignment_0_1_0; }
		
		//'or'
		public Keyword getOrOrKeyword_0_1_0_0() { return cOrOrKeyword_0_1_0_0; }
		
		//dc+=DispatchConjunction
		public Assignment getDcAssignment_0_1_1() { return cDcAssignment_0_1_1; }
		
		//DispatchConjunction
		public RuleCall getDcDispatchConjunctionParserRuleCall_0_1_1_0() { return cDcDispatchConjunctionParserRuleCall_0_1_1_0; }
		
		//( 'or' dc+=DispatchConjunction )*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }
		
		//'or'
		public Keyword getOrKeyword_0_1_2_0() { return cOrKeyword_0_1_2_0; }
		
		//dc+=DispatchConjunction
		public Assignment getDcAssignment_0_1_2_1() { return cDcAssignment_0_1_2_1; }
		
		//DispatchConjunction
		public RuleCall getDcDispatchConjunctionParserRuleCall_0_1_2_1_0() { return cDcDispatchConjunctionParserRuleCall_0_1_2_1_0; }
		
		//subprogramaccessdispatch=SubprogramAccessDispatch
		public Assignment getSubprogramaccessdispatchAssignment_1() { return cSubprogramaccessdispatchAssignment_1; }
		
		//SubprogramAccessDispatch
		public RuleCall getSubprogramaccessdispatchSubprogramAccessDispatchParserRuleCall_1_0() { return cSubprogramaccessdispatchSubprogramAccessDispatchParserRuleCall_1_0; }
	}
	public class SubprogramAccessDispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SubprogramAccessDispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAccessSubprogramAccessCrossReference_1_0 = (CrossReference)cAccessAssignment_1.eContents().get(0);
		private final RuleCall cAccessSubprogramAccessIDTerminalRuleCall_1_0_1 = (RuleCall)cAccessSubprogramAccessCrossReference_1_0.eContents().get(1);
		
		//@Deprecated
		//SubprogramAccessDispatch:
		//    'access' access=[aadl2::SubprogramAccess]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'access' access=[aadl2::SubprogramAccess]
		public Group getGroup() { return cGroup; }
		
		//'access'
		public Keyword getAccessKeyword_0() { return cAccessKeyword_0; }
		
		//access=[aadl2::SubprogramAccess]
		public Assignment getAccessAssignment_1() { return cAccessAssignment_1; }
		
		//[aadl2::SubprogramAccess]
		public CrossReference getAccessSubprogramAccessCrossReference_1_0() { return cAccessSubprogramAccessCrossReference_1_0; }
		
		//ID
		public RuleCall getAccessSubprogramAccessIDTerminalRuleCall_1_0_1() { return cAccessSubprogramAccessIDTerminalRuleCall_1_0_1; }
	}
	public class DispatchConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DispatchConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerDispatchTriggerParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAndAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAndAndKeyword_1_0_0 = (Keyword)cAndAssignment_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTriggerDispatchTriggerParserRuleCall_1_1_0 = (RuleCall)cTriggerAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTriggerAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTriggerDispatchTriggerParserRuleCall_1_2_1_0 = (RuleCall)cTriggerAssignment_1_2_1.eContents().get(0);
		
		////dispatch_conjunction
		//DispatchConjunction:
		//  trigger+=DispatchTrigger
		//    ( and?='and' trigger+=DispatchTrigger
		//        ( 'and' trigger+=DispatchTrigger)* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//trigger+=DispatchTrigger
		//  ( and?='and' trigger+=DispatchTrigger
		//      ( 'and' trigger+=DispatchTrigger)* )?
		public Group getGroup() { return cGroup; }
		
		//trigger+=DispatchTrigger
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }
		
		//DispatchTrigger
		public RuleCall getTriggerDispatchTriggerParserRuleCall_0_0() { return cTriggerDispatchTriggerParserRuleCall_0_0; }
		
		//( and?='and' trigger+=DispatchTrigger
		//    ( 'and' trigger+=DispatchTrigger)* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//and?='and'
		public Assignment getAndAssignment_1_0() { return cAndAssignment_1_0; }
		
		//'and'
		public Keyword getAndAndKeyword_1_0_0() { return cAndAndKeyword_1_0_0; }
		
		//trigger+=DispatchTrigger
		public Assignment getTriggerAssignment_1_1() { return cTriggerAssignment_1_1; }
		
		//DispatchTrigger
		public RuleCall getTriggerDispatchTriggerParserRuleCall_1_1_0() { return cTriggerDispatchTriggerParserRuleCall_1_1_0; }
		
		//( 'and' trigger+=DispatchTrigger)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//trigger+=DispatchTrigger
		public Assignment getTriggerAssignment_1_2_1() { return cTriggerAssignment_1_2_1; }
		
		//DispatchTrigger
		public RuleCall getTriggerDispatchTriggerParserRuleCall_1_2_1_0() { return cTriggerDispatchTriggerParserRuleCall_1_2_1_0; }
	}
	public class DispatchTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DispatchTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPortPortNameParserRuleCall_0_0 = (RuleCall)cPortAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTimeoutAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTimeoutTimeoutKeyword_1_0_0 = (Keyword)cTimeoutAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Assignment cLpAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLpLeftParenthesisKeyword_1_1_0_0_0 = (Keyword)cLpAssignment_1_1_0_0.eContents().get(0);
		private final Assignment cPortsAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final CrossReference cPortsNamedElementCrossReference_1_1_0_1_0 = (CrossReference)cPortsAssignment_1_1_0_1.eContents().get(0);
		private final RuleCall cPortsNamedElementIDTerminalRuleCall_1_1_0_1_0_1 = (RuleCall)cPortsNamedElementCrossReference_1_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cOrKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cPortsAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final CrossReference cPortsNamedElementCrossReference_1_1_0_2_1_0 = (CrossReference)cPortsAssignment_1_1_0_2_1.eContents().get(0);
		private final RuleCall cPortsNamedElementIDTerminalRuleCall_1_1_0_2_1_0_1 = (RuleCall)cPortsNamedElementCrossReference_1_1_0_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Assignment cTimeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTimeBehaviorTimeParserRuleCall_1_1_1_0 = (RuleCall)cTimeAssignment_1_1_1.eContents().get(0);
		
		////dispatch_trigger
		////DOES NOT ALLOW PORT INDEXES ON TIMEOUT PORTS
		//DispatchTrigger:
		//  port=PortName
		//  | timeout='timeout'
		//   ( ( lp?='(' ports+=[aadl2::NamedElement|ID]
		//        ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
		//   )?
		//        time=BehaviorTime )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//port=PortName
		//| timeout='timeout'
		// ( ( lp?='(' ports+=[aadl2::NamedElement|ID]
		//      ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
		// )?
		//      time=BehaviorTime )?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//port=PortName
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//PortName
		public RuleCall getPortPortNameParserRuleCall_0_0() { return cPortPortNameParserRuleCall_0_0; }
		
		//timeout='timeout'
		//  ( ( lp?='(' ports+=[aadl2::NamedElement|ID]
		//       ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
		//  )?
		//       time=BehaviorTime )?
		public Group getGroup_1() { return cGroup_1; }
		
		//timeout='timeout'
		public Assignment getTimeoutAssignment_1_0() { return cTimeoutAssignment_1_0; }
		
		//'timeout'
		public Keyword getTimeoutTimeoutKeyword_1_0_0() { return cTimeoutTimeoutKeyword_1_0_0; }
		
		//( ( lp?='(' ports+=[aadl2::NamedElement|ID]
		//     ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
		//)?
		//     time=BehaviorTime )?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//( lp?='(' ports+=[aadl2::NamedElement|ID]
		//       ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
		//  )?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//lp?='('
		public Assignment getLpAssignment_1_1_0_0() { return cLpAssignment_1_1_0_0; }
		
		//'('
		public Keyword getLpLeftParenthesisKeyword_1_1_0_0_0() { return cLpLeftParenthesisKeyword_1_1_0_0_0; }
		
		//ports+=[aadl2::NamedElement|ID]
		public Assignment getPortsAssignment_1_1_0_1() { return cPortsAssignment_1_1_0_1; }
		
		//[aadl2::NamedElement|ID]
		public CrossReference getPortsNamedElementCrossReference_1_1_0_1_0() { return cPortsNamedElementCrossReference_1_1_0_1_0; }
		
		//ID
		public RuleCall getPortsNamedElementIDTerminalRuleCall_1_1_0_1_0_1() { return cPortsNamedElementIDTerminalRuleCall_1_1_0_1_0_1; }
		
		//('or'? ports+=[aadl2::NamedElement|ID] )*
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//'or'?
		public Keyword getOrKeyword_1_1_0_2_0() { return cOrKeyword_1_1_0_2_0; }
		
		//ports+=[aadl2::NamedElement|ID]
		public Assignment getPortsAssignment_1_1_0_2_1() { return cPortsAssignment_1_1_0_2_1; }
		
		//[aadl2::NamedElement|ID]
		public CrossReference getPortsNamedElementCrossReference_1_1_0_2_1_0() { return cPortsNamedElementCrossReference_1_1_0_2_1_0; }
		
		//ID
		public RuleCall getPortsNamedElementIDTerminalRuleCall_1_1_0_2_1_0_1() { return cPortsNamedElementIDTerminalRuleCall_1_1_0_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_0_3() { return cRightParenthesisKeyword_1_1_0_3; }
		
		//time=BehaviorTime
		public Assignment getTimeAssignment_1_1_1() { return cTimeAssignment_1_1_1; }
		
		//BehaviorTime
		public RuleCall getTimeBehaviorTimeParserRuleCall_1_1_1_0() { return cTimeBehaviorTimeParserRuleCall_1_1_1_0; }
	}
	public class PortNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PortName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortNamedElementCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cPortNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PortName:
		//  port=[aadl2::NamedElement|ID]
		//  ( '[' index=NUMBER ']' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//port=[aadl2::NamedElement|ID]
		//( '[' index=NUMBER ']' )?
		public Group getGroup() { return cGroup; }
		
		//port=[aadl2::NamedElement|ID]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[aadl2::NamedElement|ID]
		public CrossReference getPortNamedElementCrossReference_0_0() { return cPortNamedElementCrossReference_0_0; }
		
		//ID
		public RuleCall getPortNamedElementIDTerminalRuleCall_0_0_1() { return cPortNamedElementIDTerminalRuleCall_0_0_1; }
		
		//( '[' index=NUMBER ']' )?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//index=NUMBER
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }
		
		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_1_1_0() { return cIndexNUMBERTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class ExecuteConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExecuteCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEorBooleanExpressionParserRuleCall_0_0 = (RuleCall)cEorAssignment_0.eContents().get(0);
		private final Assignment cOtherwiseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOtherwiseOtherwiseParserRuleCall_1_0 = (RuleCall)cOtherwiseAssignment_1.eContents().get(0);
		
		//ExecuteCondition:
		//  eor=BooleanExpression
		////  'timeout' can be reach as Value in BooleanExpression
		////  | timeout=ExecuteTimeout  //added for BA2015 reconciliation
		//  | otherwise=Otherwise  //added for BA2015 reconciliation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  eor=BooleanExpression
		////  'timeout' can be reach as Value in BooleanExpression
		////  | timeout=ExecuteTimeout  //added for BA2015 reconciliation
		//  | otherwise=Otherwise
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eor=BooleanExpression
		public Assignment getEorAssignment_0() { return cEorAssignment_0; }
		
		//BooleanExpression
		public RuleCall getEorBooleanExpressionParserRuleCall_0_0() { return cEorBooleanExpressionParserRuleCall_0_0; }
		
		//otherwise=Otherwise
		public Assignment getOtherwiseAssignment_1() { return cOtherwiseAssignment_1; }
		
		//Otherwise
		public RuleCall getOtherwiseOtherwiseParserRuleCall_1_0() { return cOtherwiseOtherwiseParserRuleCall_1_0; }
	}
	public class ExecuteTimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExecuteTimeout");
		private final Assignment cTAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTTimeoutKeyword_0 = (Keyword)cTAssignment.eContents().get(0);
		
		//@Deprecated
		//ExecuteTimeout: t='timeout';
		@Override public ParserRule getRule() { return rule; }
		
		//t='timeout'
		public Assignment getTAssignment() { return cTAssignment; }
		
		//'timeout'
		public Keyword getTTimeoutKeyword_0() { return cTTimeoutKeyword_0; }
	}
	public class OtherwiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Otherwise");
		private final Assignment cOAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOOtherwiseKeyword_0 = (Keyword)cOAssignment.eContents().get(0);
		
		//@Deprecated
		//Otherwise: o='otherwise';
		@Override public ParserRule getRule() { return rule; }
		
		//o='otherwise'
		public Assignment getOAssignment() { return cOAssignment; }
		
		//'otherwise'
		public Keyword getOOtherwiseKeyword_0() { return cOOtherwiseKeyword_0; }
	}
	public class ModeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ModeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTleTriggerLogicalExpressionParserRuleCall_1_0 = (RuleCall)cTleAssignment_1.eContents().get(0);
		
		//ModeCondition:
		//    'on' tle=TriggerLogicalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' tle=TriggerLogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//tle=TriggerLogicalExpression
		public Assignment getTleAssignment_1() { return cTleAssignment_1; }
		
		//TriggerLogicalExpression
		public RuleCall getTleTriggerLogicalExpressionParserRuleCall_1_0() { return cTleTriggerLogicalExpressionParserRuleCall_1_0; }
	}
	public class TriggerLogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TriggerLogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstEventTriggerParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpLogicalOperatorParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTriggerEventTriggerParserRuleCall_1_1_0 = (RuleCall)cTriggerAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOpsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOpsLogicalOperatorParserRuleCall_1_2_0_0 = (RuleCall)cOpsAssignment_1_2_0.eContents().get(0);
		private final Assignment cTriggerAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTriggerEventTriggerParserRuleCall_1_2_1_0 = (RuleCall)cTriggerAssignment_1_2_1.eContents().get(0);
		
		////must check that all the ops are the same
		//TriggerLogicalExpression:
		//    first=EventTrigger ( op=LogicalOperator trigger+=EventTrigger
		//          (ops+=LogicalOperator trigger+=EventTrigger)*)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//first=EventTrigger ( op=LogicalOperator trigger+=EventTrigger
		//      (ops+=LogicalOperator trigger+=EventTrigger)*)?
		public Group getGroup() { return cGroup; }
		
		//first=EventTrigger
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//EventTrigger
		public RuleCall getFirstEventTriggerParserRuleCall_0_0() { return cFirstEventTriggerParserRuleCall_0_0; }
		
		//( op=LogicalOperator trigger+=EventTrigger
		//         (ops+=LogicalOperator trigger+=EventTrigger)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=LogicalOperator
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//LogicalOperator
		public RuleCall getOpLogicalOperatorParserRuleCall_1_0_0() { return cOpLogicalOperatorParserRuleCall_1_0_0; }
		
		//trigger+=EventTrigger
		public Assignment getTriggerAssignment_1_1() { return cTriggerAssignment_1_1; }
		
		//EventTrigger
		public RuleCall getTriggerEventTriggerParserRuleCall_1_1_0() { return cTriggerEventTriggerParserRuleCall_1_1_0; }
		
		//(ops+=LogicalOperator trigger+=EventTrigger)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//ops+=LogicalOperator
		public Assignment getOpsAssignment_1_2_0() { return cOpsAssignment_1_2_0; }
		
		//LogicalOperator
		public RuleCall getOpsLogicalOperatorParserRuleCall_1_2_0_0() { return cOpsLogicalOperatorParserRuleCall_1_2_0_0; }
		
		//trigger+=EventTrigger
		public Assignment getTriggerAssignment_1_2_1() { return cTriggerAssignment_1_2_1; }
		
		//EventTrigger
		public RuleCall getTriggerEventTriggerParserRuleCall_1_2_1_0() { return cTriggerEventTriggerParserRuleCall_1_2_1_0; }
	}
	public class EventTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.EventTrigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSubAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSubIDTerminalRuleCall_0_0_0 = (RuleCall)cSubAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSubAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSubIDTerminalRuleCall_0_1_1_0 = (RuleCall)cSubAssignment_0_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubIDTerminalRuleCall_0_3_0 = (RuleCall)cSubAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cIndexAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cIndexNUMBERTerminalRuleCall_0_4_1_0 = (RuleCall)cIndexAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4_2 = (Keyword)cGroup_0_4.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTleAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTleTriggerLogicalExpressionParserRuleCall_1_1_0 = (RuleCall)cTleAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////event_trigger
		//EventTrigger:
		//  //subcomponent_port_reference
		//  //change to how OSATE references subcomponents?
		////  subcomponent=[aadl2::Subcomponent|ID]    <-just one level down
		//    sub+=ID ( '.' sub+=ID )* '.' sub+=ID ( '[' index=NUMBER ']' )?
		//    | '(' tle=TriggerLogicalExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  //subcomponent_port_reference
		//  //change to how OSATE references subcomponents?
		////  subcomponent=[aadl2::Subcomponent|ID]    <-just one level down
		//    sub+=ID ( '.' sub+=ID )* '.' sub+=ID ( '[' index=NUMBER ']' )?
		//    | '(' tle=TriggerLogicalExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//  //subcomponent_port_reference
		//  //change to how OSATE references subcomponents?
		////  subcomponent=[aadl2::Subcomponent|ID]    <-just one level down
		//    sub+=ID ( '.' sub+=ID )* '.' sub+=ID ( '[' index=NUMBER ']' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//  //subcomponent_port_reference
		//  //change to how OSATE references subcomponents?
		////  subcomponent=[aadl2::Subcomponent|ID]    <-just one level down
		//    sub+=ID
		public Assignment getSubAssignment_0_0() { return cSubAssignment_0_0; }
		
		//ID
		public RuleCall getSubIDTerminalRuleCall_0_0_0() { return cSubIDTerminalRuleCall_0_0_0; }
		
		//( '.' sub+=ID )*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }
		
		//sub+=ID
		public Assignment getSubAssignment_0_1_1() { return cSubAssignment_0_1_1; }
		
		//ID
		public RuleCall getSubIDTerminalRuleCall_0_1_1_0() { return cSubIDTerminalRuleCall_0_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//sub+=ID
		public Assignment getSubAssignment_0_3() { return cSubAssignment_0_3; }
		
		//ID
		public RuleCall getSubIDTerminalRuleCall_0_3_0() { return cSubIDTerminalRuleCall_0_3_0; }
		
		//( '[' index=NUMBER ']' )?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_4_0() { return cLeftSquareBracketKeyword_0_4_0; }
		
		//index=NUMBER
		public Assignment getIndexAssignment_0_4_1() { return cIndexAssignment_0_4_1; }
		
		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_0_4_1_0() { return cIndexNUMBERTerminalRuleCall_0_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4_2() { return cRightSquareBracketKeyword_0_4_2; }
		
		//'(' tle=TriggerLogicalExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//tle=TriggerLogicalExpression
		public Assignment getTleAssignment_1_1() { return cTleAssignment_1_1; }
		
		//TriggerLogicalExpression
		public RuleCall getTleTriggerLogicalExpressionParserRuleCall_1_1_0() { return cTleTriggerLogicalExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOpAndKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cOpXorKeyword_2_0 = (Keyword)cOpAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOpThenKeyword_3_1_0 = (Keyword)cOpAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOpElseKeyword_4_1_0 = (Keyword)cOpAssignment_4_1.eContents().get(0);
		
		//LogicalOperator:
		//    op='and'
		//    | op='or'
		//    | op='xor'
		//    | 'and' op='then'
		//    | 'or' op='else'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op='and'
		//| op='or'
		//| op='xor'
		//| 'and' op='then'
		//| 'or' op='else'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op='and'
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//'and'
		public Keyword getOpAndKeyword_0_0() { return cOpAndKeyword_0_0; }
		
		//op='or'
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//'or'
		public Keyword getOpOrKeyword_1_0() { return cOpOrKeyword_1_0; }
		
		//op='xor'
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//'xor'
		public Keyword getOpXorKeyword_2_0() { return cOpXorKeyword_2_0; }
		
		//'and' op='then'
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//op='then'
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }
		
		//'then'
		public Keyword getOpThenKeyword_3_1_0() { return cOpThenKeyword_3_1_0; }
		
		//'or' op='else'
		public Group getGroup_4() { return cGroup_4; }
		
		//'or'
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }
		
		//op='else'
		public Assignment getOpAssignment_4_1() { return cOpAssignment_4_1; }
		
		//'else'
		public Keyword getOpElseKeyword_4_1_0() { return cOpElseKeyword_4_1_0; }
	}
	public class InternalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.InternalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFirstPortCrossReference_2_0 = (CrossReference)cFirstAssignment_2.eContents().get(0);
		private final RuleCall cFirstPortIDTerminalRuleCall_2_0_1 = (RuleCall)cFirstPortCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPortsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cPortsPortCrossReference_3_1_0 = (CrossReference)cPortsAssignment_3_1.eContents().get(0);
		private final RuleCall cPortsPortIDTerminalRuleCall_3_1_0_1 = (RuleCall)cPortsPortCrossReference_3_1_0.eContents().get(1);
		
		//@Deprecated
		//InternalCondition:
		//    'on' 'internal' first=[aadl2::Port] ( 'or' ports+=[aadl2::Port] )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' 'internal' first=[aadl2::Port] ( 'or' ports+=[aadl2::Port] )*
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//'internal'
		public Keyword getInternalKeyword_1() { return cInternalKeyword_1; }
		
		//first=[aadl2::Port]
		public Assignment getFirstAssignment_2() { return cFirstAssignment_2; }
		
		//[aadl2::Port]
		public CrossReference getFirstPortCrossReference_2_0() { return cFirstPortCrossReference_2_0; }
		
		//ID
		public RuleCall getFirstPortIDTerminalRuleCall_2_0_1() { return cFirstPortIDTerminalRuleCall_2_0_1; }
		
		//( 'or' ports+=[aadl2::Port] )*
		public Group getGroup_3() { return cGroup_3; }
		
		//'or'
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//ports+=[aadl2::Port]
		public Assignment getPortsAssignment_3_1() { return cPortsAssignment_3_1; }
		
		//[aadl2::Port]
		public CrossReference getPortsPortCrossReference_3_1_0() { return cPortsPortCrossReference_3_1_0; }
		
		//ID
		public RuleCall getPortsPortIDTerminalRuleCall_3_1_0_1() { return cPortsPortIDTerminalRuleCall_3_1_0_1; }
	}
	public class AssertClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssertionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssertionsNamedAssertionParserRuleCall_1_0 = (RuleCall)cAssertionsAssignment_1.eContents().get(0);
		
		//  //note may need to make real port Name with index
		//AssertClause:
		//  'assert' (assertions+=NamedAssertion)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' (assertions+=NamedAssertion)+
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//(assertions+=NamedAssertion)+
		public Assignment getAssertionsAssignment_1() { return cAssertionsAssignment_1; }
		
		//NamedAssertion
		public RuleCall getAssertionsNamedAssertionParserRuleCall_1_0() { return cAssertionsNamedAssertionParserRuleCall_1_0; }
	}
	public class ExistentialLatticeQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExistentialLatticeQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantified_variablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantified_variablesQuantifiedVariablesParserRuleCall_0_0 = (RuleCall)cQuantified_variablesAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeoutActionTimeoutParserRuleCall_4_0 = (RuleCall)cTimeoutAssignment_4.eContents().get(0);
		private final Assignment cCatch_clauseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCatch_clauseCatchClauseParserRuleCall_5_0 = (RuleCall)cCatch_clauseAssignment_5.eContents().get(0);
		
		///////////////////////////  LATTICE QUANTIFICATION  ////////////////////////
		////behavior_action_block
		//ExistentialLatticeQuantification:
		//  quantified_variables=QuantifiedVariables?
		//  '{'
		//  actions=BehaviorActions
		//   '}'
		//  timeout=ActionTimeout?
		//  catch_clause=CatchClause?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//quantified_variables=QuantifiedVariables?
		//'{'
		//actions=BehaviorActions
		// '}'
		//timeout=ActionTimeout?
		//catch_clause=CatchClause?
		public Group getGroup() { return cGroup; }
		
		//quantified_variables=QuantifiedVariables?
		public Assignment getQuantified_variablesAssignment_0() { return cQuantified_variablesAssignment_0; }
		
		//QuantifiedVariables
		public RuleCall getQuantified_variablesQuantifiedVariablesParserRuleCall_0_0() { return cQuantified_variablesQuantifiedVariablesParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions=BehaviorActions
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_2_0() { return cActionsBehaviorActionsParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//timeout=ActionTimeout?
		public Assignment getTimeoutAssignment_4() { return cTimeoutAssignment_4; }
		
		//ActionTimeout
		public RuleCall getTimeoutActionTimeoutParserRuleCall_4_0() { return cTimeoutActionTimeoutParserRuleCall_4_0; }
		
		//catch_clause=CatchClause?
		public Assignment getCatch_clauseAssignment_5() { return cCatch_clauseAssignment_5; }
		
		//CatchClause
		public RuleCall getCatch_clauseCatchClauseParserRuleCall_5_0() { return cCatch_clauseCatchClauseParserRuleCall_5_0; }
	}
	public class QuantifiedVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.QuantifiedVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		
		////quanitfied_variables
		//QuantifiedVariables:
		//  'declare' variables+=VariableDeclaration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'declare' variables+=VariableDeclaration+
		public Group getGroup() { return cGroup; }
		
		//'declare'
		public Keyword getDeclareKeyword_0() { return cDeclareKeyword_0; }
		
		//variables+=VariableDeclaration+
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }
	}
	public class UniversalLatticeQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UniversalLatticeQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesForallVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLower_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLower_boundExpressionParserRuleCall_3_0 = (RuleCall)cLower_boundAssignment_3.eContents().get(0);
		private final RuleCall cDOTDOTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cUpper_boundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpper_boundExpressionParserRuleCall_5_0 = (RuleCall)cUpper_boundAssignment_5.eContents().get(0);
		private final Assignment cElqAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElqExistentialLatticeQuantificationParserRuleCall_6_0 = (RuleCall)cElqAssignment_6.eContents().get(0);
		
		////forall_action
		//UniversalLatticeQuantification returns UniversalLatticeQuantification:
		////  {UniversalLatticeQuantification}
		//  'forall'
		//  variables+=ForallVariable+
		//    'in'   lower_bound=Expression  DOTDOT upper_bound=Expression
		//  elq=ExistentialLatticeQuantification
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  {UniversalLatticeQuantification}
		//  'forall'
		//  variables+=ForallVariable+
		//    'in'   lower_bound=Expression  DOTDOT upper_bound=Expression
		//  elq=ExistentialLatticeQuantification
		public Group getGroup() { return cGroup; }
		
		////  {UniversalLatticeQuantification}
		//  'forall'
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }
		
		//variables+=ForallVariable+
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//ForallVariable
		public RuleCall getVariablesForallVariableParserRuleCall_1_0() { return cVariablesForallVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//lower_bound=Expression
		public Assignment getLower_boundAssignment_3() { return cLower_boundAssignment_3; }
		
		//Expression
		public RuleCall getLower_boundExpressionParserRuleCall_3_0() { return cLower_boundExpressionParserRuleCall_3_0; }
		
		//DOTDOT
		public RuleCall getDOTDOTTerminalRuleCall_4() { return cDOTDOTTerminalRuleCall_4; }
		
		//upper_bound=Expression
		public Assignment getUpper_boundAssignment_5() { return cUpper_boundAssignment_5; }
		
		//Expression
		public RuleCall getUpper_boundExpressionParserRuleCall_5_0() { return cUpper_boundExpressionParserRuleCall_5_0; }
		
		//elq=ExistentialLatticeQuantification
		public Assignment getElqAssignment_6() { return cElqAssignment_6; }
		
		//ExistentialLatticeQuantification
		public RuleCall getElqExistentialLatticeQuantificationParserRuleCall_6_0() { return cElqExistentialLatticeQuantificationParserRuleCall_6_0; }
	}
	public class ForallVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ForallVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ForallVariable:
		//  name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNonvolatileAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cNonvolatileNonvolatileKeyword_1_0_0 = (Keyword)cNonvolatileAssignment_1_0.eContents().get(0);
		private final Assignment cSharedAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSharedSharedKeyword_1_1_0 = (Keyword)cSharedAssignment_1_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cConstantConstantKeyword_1_2_0 = (Keyword)cConstantAssignment_1_2.eContents().get(0);
		private final Assignment cSpreadAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cSpreadSpreadKeyword_1_3_0 = (Keyword)cSpreadAssignment_1_3.eContents().get(0);
		private final Assignment cFinalAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final Keyword cFinalFinalKeyword_1_4_0 = (Keyword)cFinalAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cAssignColonEqualsSignKeyword_2_0_0 = (Keyword)cAssignAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Assignment cAssertionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssertionAssertionParserRuleCall_3_0 = (RuleCall)cAssertionAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////////////////////////  Variable  DECLARATION  ////////////////////////////
		//VariableDeclaration:
		//  variable=Variable
		//    ( //modifier
		//      nonvolatile?='nonvolatile'
		//      | shared?='shared'
		//      | constant?='constant'
		//    | spread?='spread'
		//    | final?='final'
		//  )?
		//  ( assign?=':=' expression=Expression )?
		//  assertion=Assertion?
		//  ';'?
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Variable
		//  ( //modifier
		//    nonvolatile?='nonvolatile'
		//    | shared?='shared'
		//    | constant?='constant'
		//  | spread?='spread'
		//  | final?='final'
		//)?
		//( assign?=':=' expression=Expression )?
		//assertion=Assertion?
		//';'?
		public Group getGroup() { return cGroup; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }
		
		//  ( //modifier
		//    nonvolatile?='nonvolatile'
		//    | shared?='shared'
		//    | constant?='constant'
		//  | spread?='spread'
		//  | final?='final'
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		////modifier
		//     nonvolatile?='nonvolatile'
		public Assignment getNonvolatileAssignment_1_0() { return cNonvolatileAssignment_1_0; }
		
		//'nonvolatile'
		public Keyword getNonvolatileNonvolatileKeyword_1_0_0() { return cNonvolatileNonvolatileKeyword_1_0_0; }
		
		//shared?='shared'
		public Assignment getSharedAssignment_1_1() { return cSharedAssignment_1_1; }
		
		//'shared'
		public Keyword getSharedSharedKeyword_1_1_0() { return cSharedSharedKeyword_1_1_0; }
		
		//constant?='constant'
		public Assignment getConstantAssignment_1_2() { return cConstantAssignment_1_2; }
		
		//'constant'
		public Keyword getConstantConstantKeyword_1_2_0() { return cConstantConstantKeyword_1_2_0; }
		
		//spread?='spread'
		public Assignment getSpreadAssignment_1_3() { return cSpreadAssignment_1_3; }
		
		//'spread'
		public Keyword getSpreadSpreadKeyword_1_3_0() { return cSpreadSpreadKeyword_1_3_0; }
		
		//final?='final'
		public Assignment getFinalAssignment_1_4() { return cFinalAssignment_1_4; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_4_0() { return cFinalFinalKeyword_1_4_0; }
		
		//( assign?=':=' expression=Expression )?
		public Group getGroup_2() { return cGroup_2; }
		
		//assign?=':='
		public Assignment getAssignAssignment_2_0() { return cAssignAssignment_2_0; }
		
		//':='
		public Keyword getAssignColonEqualsSignKeyword_2_0_0() { return cAssignColonEqualsSignKeyword_2_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//assertion=Assertion?
		public Assignment getAssertionAssignment_3() { return cAssertionAssignment_3; }
		
		//Assertion
		public RuleCall getAssertionAssertionParserRuleCall_3_0() { return cAssertionAssertionParserRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FunctionParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.FunctionParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersFormalExpressionPairParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaCommaKeyword_1_0_0 = (Keyword)cCommaAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersFormalExpressionPairParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParametersFormalExpressionPairParserRuleCall_1_2_1_0 = (RuleCall)cParametersAssignment_1_2_1.eContents().get(0);
		
		//////////////////////////////////  FUNCTION CALL  //////////////////////////////
		//// put in ValueName
		////FunctionCall:
		////  ( pack+=ID '::' )*
		////    func=ID
		////    '(' //'$' //BA2015 reconciliation remove $
		////    parameters=FunctionParameters? ')'
		////;
		//FunctionParameters:
		//     parameters+=FormalExpressionPair ( comma?=',' parameters+=FormalExpressionPair
		//        ( ',' parameters+=FormalExpressionPair)* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=FormalExpressionPair ( comma?=',' parameters+=FormalExpressionPair
		//   ( ',' parameters+=FormalExpressionPair)* )?
		public Group getGroup() { return cGroup; }
		
		//parameters+=FormalExpressionPair
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//FormalExpressionPair
		public RuleCall getParametersFormalExpressionPairParserRuleCall_0_0() { return cParametersFormalExpressionPairParserRuleCall_0_0; }
		
		//( comma?=',' parameters+=FormalExpressionPair
		//       ( ',' parameters+=FormalExpressionPair)* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//comma?=','
		public Assignment getCommaAssignment_1_0() { return cCommaAssignment_1_0; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_0() { return cCommaCommaKeyword_1_0_0; }
		
		//parameters+=FormalExpressionPair
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//FormalExpressionPair
		public RuleCall getParametersFormalExpressionPairParserRuleCall_1_1_0() { return cParametersFormalExpressionPairParserRuleCall_1_1_0; }
		
		//( ',' parameters+=FormalExpressionPair)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//parameters+=FormalExpressionPair
		public Assignment getParametersAssignment_1_2_1() { return cParametersAssignment_1_2_1; }
		
		//FormalExpressionPair
		public RuleCall getParametersFormalExpressionPairParserRuleCall_1_2_1_0() { return cParametersFormalExpressionPairParserRuleCall_1_2_1_0; }
	}
	public class FormalExpressionPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.FormalExpressionPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalIDTerminalRuleCall_0_0 = (RuleCall)cFormalAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualExpressionParserRuleCall_2_0 = (RuleCall)cActualAssignment_2.eContents().get(0);
		
		//FormalExpressionPair:
		//  formal=ID  //[aadl2::Parameter]
		//    ':' actual=Expression
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//formal=ID  //[aadl2::Parameter]
		//  ':' actual=Expression
		public Group getGroup() { return cGroup; }
		
		//formal=ID
		public Assignment getFormalAssignment_0() { return cFormalAssignment_0; }
		
		//ID
		public RuleCall getFormalIDTerminalRuleCall_0_0() { return cFormalIDTerminalRuleCall_0_0; }
		
		////[aadl2::Parameter]
		//  ':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//actual=Expression
		public Assignment getActualAssignment_2() { return cActualAssignment_2; }
		
		//Expression
		public RuleCall getActualExpressionParserRuleCall_2_0() { return cActualExpressionParserRuleCall_2_0; }
	}
	public class BehaviorActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BehaviorActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionAssertedActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSemiAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSemiSemicolonKeyword_1_0_0_0 = (Keyword)cSemiAssignment_1_0_0.eContents().get(0);
		private final Assignment cActionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cActionAssertedActionParserRuleCall_1_0_1_0 = (RuleCall)cActionAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cActionAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cActionAssertedActionParserRuleCall_1_0_2_1_0 = (RuleCall)cActionAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAmpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cAmpAmpersandKeyword_1_1_0_0 = (Keyword)cAmpAssignment_1_1_0.eContents().get(0);
		private final Assignment cActionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cActionAssertedActionParserRuleCall_1_1_1_0 = (RuleCall)cActionAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cActionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cActionAssertedActionParserRuleCall_1_1_2_1_0 = (RuleCall)cActionAssignment_1_1_2_1.eContents().get(0);
		
		//////////////////////////////  BEHAVIOR ACTIONS  ///////////////////////////////
		////behavior_actions
		//BehaviorActions:
		//  action+=AssertedAction
		//  (  //sequential_composition
		//      ( semi?=';' action+=AssertedAction ( ';' action+=AssertedAction )* )
		//      |  //concurrent_composition
		//      ( amp?='&' action+=AssertedAction ( '&' action+=AssertedAction)* )
		//  )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//action+=AssertedAction
		//(  //sequential_composition
		//    ( semi?=';' action+=AssertedAction ( ';' action+=AssertedAction )* )
		//    |  //concurrent_composition
		//    ( amp?='&' action+=AssertedAction ( '&' action+=AssertedAction)* )
		//)?
		public Group getGroup() { return cGroup; }
		
		//action+=AssertedAction
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_0_0() { return cActionAssertedActionParserRuleCall_0_0; }
		
		//(  //sequential_composition
		//    ( semi?=';' action+=AssertedAction ( ';' action+=AssertedAction )* )
		//    |  //concurrent_composition
		//    ( amp?='&' action+=AssertedAction ( '&' action+=AssertedAction)* )
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		////sequential_composition
		//    ( semi?=';' action+=AssertedAction ( ';' action+=AssertedAction )* )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//semi?=';'
		public Assignment getSemiAssignment_1_0_0() { return cSemiAssignment_1_0_0; }
		
		//';'
		public Keyword getSemiSemicolonKeyword_1_0_0_0() { return cSemiSemicolonKeyword_1_0_0_0; }
		
		//action+=AssertedAction
		public Assignment getActionAssignment_1_0_1() { return cActionAssignment_1_0_1; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_1_0_1_0() { return cActionAssertedActionParserRuleCall_1_0_1_0; }
		
		//( ';' action+=AssertedAction )*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_2_0() { return cSemicolonKeyword_1_0_2_0; }
		
		//action+=AssertedAction
		public Assignment getActionAssignment_1_0_2_1() { return cActionAssignment_1_0_2_1; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_1_0_2_1_0() { return cActionAssertedActionParserRuleCall_1_0_2_1_0; }
		
		////concurrent_composition
		//    ( amp?='&' action+=AssertedAction ( '&' action+=AssertedAction)* )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//amp?='&'
		public Assignment getAmpAssignment_1_1_0() { return cAmpAssignment_1_1_0; }
		
		//'&'
		public Keyword getAmpAmpersandKeyword_1_1_0_0() { return cAmpAmpersandKeyword_1_1_0_0; }
		
		//action+=AssertedAction
		public Assignment getActionAssignment_1_1_1() { return cActionAssignment_1_1_1; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_1_1_1_0() { return cActionAssertedActionParserRuleCall_1_1_1_0; }
		
		//( '&' action+=AssertedAction)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1_2_0() { return cAmpersandKeyword_1_1_2_0; }
		
		//action+=AssertedAction
		public Assignment getActionAssignment_1_1_2_1() { return cActionAssignment_1_1_2_1; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_1_1_2_1_0() { return cActionAssertedActionParserRuleCall_1_1_2_1_0; }
	}
	public class AssertedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreconditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPreconditionAssertionParserRuleCall_0_0 = (RuleCall)cPreconditionAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Assignment cPostconditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPostconditionAssertionParserRuleCall_2_0 = (RuleCall)cPostconditionAssignment_2.eContents().get(0);
		
		////asserted_action
		//AssertedAction:
		//  precondition=Assertion? action=Action postcondition=Assertion?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//precondition=Assertion? action=Action postcondition=Assertion?
		public Group getGroup() { return cGroup; }
		
		//precondition=Assertion?
		public Assignment getPreconditionAssignment_0() { return cPreconditionAssignment_0; }
		
		//Assertion
		public RuleCall getPreconditionAssertionParserRuleCall_0_0() { return cPreconditionAssertionParserRuleCall_0_0; }
		
		//action=Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
		
		//postcondition=Assertion?
		public Assignment getPostconditionAssignment_2() { return cPostconditionAssignment_2; }
		
		//Assertion
		public RuleCall getPostconditionAssertionParserRuleCall_2_0() { return cPostconditionAssertionParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicBasicActionParserRuleCall_0_0 = (RuleCall)cBasicAssignment_0.eContents().get(0);
		private final Assignment cIf_fiAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIf_fiAlternativeParserRuleCall_1_0 = (RuleCall)cIf_fiAssignment_1.eContents().get(0);
		private final Assignment cWlAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cWlWhileLoopParserRuleCall_2_0 = (RuleCall)cWlAssignment_2.eContents().get(0);
		private final Assignment cFlAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFlForLoopParserRuleCall_3_0 = (RuleCall)cFlAssignment_3.eContents().get(0);
		private final Assignment cDuAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDuDoUntilLoopParserRuleCall_4_0 = (RuleCall)cDuAssignment_4.eContents().get(0);
		private final Assignment cElqAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cElqExistentialLatticeQuantificationParserRuleCall_5_0 = (RuleCall)cElqAssignment_5.eContents().get(0);
		private final Assignment cUlqAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cUlqUniversalLatticeQuantificationParserRuleCall_6_0 = (RuleCall)cUlqAssignment_6.eContents().get(0);
		private final Assignment cLaAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cLaLockingActionParserRuleCall_7_0 = (RuleCall)cLaAssignment_7.eContents().get(0);
		
		//Action:
		////  {Action}
		//   basic=BasicAction
		//  | if_fi=Alternative
		//  | wl=WhileLoop
		//  | fl=ForLoop
		//  | du=DoUntilLoop
		//  | elq=ExistentialLatticeQuantification //behavior_action_block
		//  | ulq=UniversalLatticeQuantification   //forall_action
		////  //BA2015 reconciliation add LockingAction
		//  | la=LockingAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  {Action}
		//   basic=BasicAction
		//  | if_fi=Alternative
		//  | wl=WhileLoop
		//  | fl=ForLoop
		//  | du=DoUntilLoop
		//  | elq=ExistentialLatticeQuantification //behavior_action_block
		//  | ulq=UniversalLatticeQuantification   //forall_action
		////  //BA2015 reconciliation add LockingAction
		//  | la=LockingAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////  {Action}
		//   basic=BasicAction
		public Assignment getBasicAssignment_0() { return cBasicAssignment_0; }
		
		//BasicAction
		public RuleCall getBasicBasicActionParserRuleCall_0_0() { return cBasicBasicActionParserRuleCall_0_0; }
		
		//if_fi=Alternative
		public Assignment getIf_fiAssignment_1() { return cIf_fiAssignment_1; }
		
		//Alternative
		public RuleCall getIf_fiAlternativeParserRuleCall_1_0() { return cIf_fiAlternativeParserRuleCall_1_0; }
		
		//wl=WhileLoop
		public Assignment getWlAssignment_2() { return cWlAssignment_2; }
		
		//WhileLoop
		public RuleCall getWlWhileLoopParserRuleCall_2_0() { return cWlWhileLoopParserRuleCall_2_0; }
		
		//fl=ForLoop
		public Assignment getFlAssignment_3() { return cFlAssignment_3; }
		
		//ForLoop
		public RuleCall getFlForLoopParserRuleCall_3_0() { return cFlForLoopParserRuleCall_3_0; }
		
		//du=DoUntilLoop
		public Assignment getDuAssignment_4() { return cDuAssignment_4; }
		
		//DoUntilLoop
		public RuleCall getDuDoUntilLoopParserRuleCall_4_0() { return cDuDoUntilLoopParserRuleCall_4_0; }
		
		//elq=ExistentialLatticeQuantification
		public Assignment getElqAssignment_5() { return cElqAssignment_5; }
		
		//ExistentialLatticeQuantification
		public RuleCall getElqExistentialLatticeQuantificationParserRuleCall_5_0() { return cElqExistentialLatticeQuantificationParserRuleCall_5_0; }
		
		//ulq=UniversalLatticeQuantification
		public Assignment getUlqAssignment_6() { return cUlqAssignment_6; }
		
		//UniversalLatticeQuantification
		public RuleCall getUlqUniversalLatticeQuantificationParserRuleCall_6_0() { return cUlqUniversalLatticeQuantificationParserRuleCall_6_0; }
		
		//la=LockingAction
		public Assignment getLaAssignment_7() { return cLaAssignment_7; }
		
		//LockingAction
		public RuleCall getLaLockingActionParserRuleCall_7_0() { return cLaLockingActionParserRuleCall_7_0; }
	}
	public class BasicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BasicAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSkipAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSkipSkipKeyword_0_0 = (Keyword)cSkipAssignment_0.eContents().get(0);
		private final Assignment cAssignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssignAssignmentParserRuleCall_1_0 = (RuleCall)cAssignAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSetmodeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cModeModeCrossReference_2_1_0 = (CrossReference)cModeAssignment_2_1.eContents().get(0);
		private final RuleCall cModeModeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cModeModeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cWhenAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cWhenWhenThrowParserRuleCall_3_0 = (RuleCall)cWhenAssignment_3.eContents().get(0);
		private final Assignment cCombAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cCombCombinableOperationParserRuleCall_4_0 = (RuleCall)cCombAssignment_4.eContents().get(0);
		private final Assignment cCommunicationAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cCommunicationCommunicationActionParserRuleCall_5_0 = (RuleCall)cCommunicationAssignment_5.eContents().get(0);
		private final Assignment cComputationAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cComputationComputationParserRuleCall_6_0 = (RuleCall)cComputationAssignment_6.eContents().get(0);
		private final Assignment cMulti_assignAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cMulti_assignSimultaneousAssignmentParserRuleCall_7_0 = (RuleCall)cMulti_assignAssignment_7.eContents().get(0);
		private final Assignment cExcAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cExcIssueExceptionParserRuleCall_8_0 = (RuleCall)cExcAssignment_8.eContents().get(0);
		
		////basic_action
		//BasicAction:
		////  {BasicAction}
		//  skip='skip'
		//  | assign=Assignment
		//  | 'setmode' mode=[aadl2::Mode]
		//  | when=WhenThrow
		//  | comb=CombinableOperation
		//  | communication=CommunicationAction
		//  | computation=Computation
		//  | multi_assign=SimultaneousAssignment
		//// //BA2015 reconciliation add IssueException
		//  | exc=IssueException
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  {BasicAction}
		//  skip='skip'
		//  | assign=Assignment
		//  | 'setmode' mode=[aadl2::Mode]
		//  | when=WhenThrow
		//  | comb=CombinableOperation
		//  | communication=CommunicationAction
		//  | computation=Computation
		//  | multi_assign=SimultaneousAssignment
		//// //BA2015 reconciliation add IssueException
		//  | exc=IssueException
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////  {BasicAction}
		//  skip='skip'
		public Assignment getSkipAssignment_0() { return cSkipAssignment_0; }
		
		//'skip'
		public Keyword getSkipSkipKeyword_0_0() { return cSkipSkipKeyword_0_0; }
		
		//assign=Assignment
		public Assignment getAssignAssignment_1() { return cAssignAssignment_1; }
		
		//Assignment
		public RuleCall getAssignAssignmentParserRuleCall_1_0() { return cAssignAssignmentParserRuleCall_1_0; }
		
		//'setmode' mode=[aadl2::Mode]
		public Group getGroup_2() { return cGroup_2; }
		
		//'setmode'
		public Keyword getSetmodeKeyword_2_0() { return cSetmodeKeyword_2_0; }
		
		//mode=[aadl2::Mode]
		public Assignment getModeAssignment_2_1() { return cModeAssignment_2_1; }
		
		//[aadl2::Mode]
		public CrossReference getModeModeCrossReference_2_1_0() { return cModeModeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getModeModeIDTerminalRuleCall_2_1_0_1() { return cModeModeIDTerminalRuleCall_2_1_0_1; }
		
		//when=WhenThrow
		public Assignment getWhenAssignment_3() { return cWhenAssignment_3; }
		
		//WhenThrow
		public RuleCall getWhenWhenThrowParserRuleCall_3_0() { return cWhenWhenThrowParserRuleCall_3_0; }
		
		//comb=CombinableOperation
		public Assignment getCombAssignment_4() { return cCombAssignment_4; }
		
		//CombinableOperation
		public RuleCall getCombCombinableOperationParserRuleCall_4_0() { return cCombCombinableOperationParserRuleCall_4_0; }
		
		//communication=CommunicationAction
		public Assignment getCommunicationAssignment_5() { return cCommunicationAssignment_5; }
		
		//CommunicationAction
		public RuleCall getCommunicationCommunicationActionParserRuleCall_5_0() { return cCommunicationCommunicationActionParserRuleCall_5_0; }
		
		//computation=Computation
		public Assignment getComputationAssignment_6() { return cComputationAssignment_6; }
		
		//Computation
		public RuleCall getComputationComputationParserRuleCall_6_0() { return cComputationComputationParserRuleCall_6_0; }
		
		//multi_assign=SimultaneousAssignment
		public Assignment getMulti_assignAssignment_7() { return cMulti_assignAssignment_7; }
		
		//SimultaneousAssignment
		public RuleCall getMulti_assignSimultaneousAssignmentParserRuleCall_7_0() { return cMulti_assignSimultaneousAssignmentParserRuleCall_7_0; }
		
		//exc=IssueException
		public Assignment getExcAssignment_8() { return cExcAssignment_8; }
		
		//IssueException
		public RuleCall getExcIssueExceptionParserRuleCall_8_0() { return cExcIssueExceptionParserRuleCall_8_0; }
	}
	public class CombinableOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CombinableOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cF_addAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cF_addFetchaddKeyword_0_0_0 = (Keyword)cF_addAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTargetAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTargetVariableCrossReference_0_2_0 = (CrossReference)cTargetAssignment_0_2.eContents().get(0);
		private final RuleCall cTargetVariableIDTerminalRuleCall_0_2_0_1 = (RuleCall)cTargetVariableCrossReference_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cArithmeticAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cArithmeticExpressionParserRuleCall_0_4_0 = (RuleCall)cArithmeticAssignment_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cResultAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final CrossReference cResultVariableCrossReference_0_6_0 = (CrossReference)cResultAssignment_0_6.eContents().get(0);
		private final RuleCall cResultVariableIDTerminalRuleCall_0_6_0_1 = (RuleCall)cResultVariableCrossReference_0_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cF_orAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cF_orFetchorKeyword_1_0_0_0 = (Keyword)cF_orAssignment_1_0_0.eContents().get(0);
		private final Assignment cF_andAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cF_andFetchandKeyword_1_0_1_0 = (Keyword)cF_andAssignment_1_0_1.eContents().get(0);
		private final Assignment cF_xorAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cF_xorFetchxorKeyword_1_0_2_0 = (Keyword)cF_xorAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTargetVariableCrossReference_1_2_0 = (CrossReference)cTargetAssignment_1_2.eContents().get(0);
		private final RuleCall cTargetVariableIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTargetVariableCrossReference_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cBoolAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cBoolExpressionParserRuleCall_1_4_0 = (RuleCall)cBoolAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cResultAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final CrossReference cResultVariableCrossReference_1_5_1_0 = (CrossReference)cResultAssignment_1_5_1.eContents().get(0);
		private final RuleCall cResultVariableIDTerminalRuleCall_1_5_1_0_1 = (RuleCall)cResultVariableCrossReference_1_5_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSwAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cSwSwapKeyword_2_0_0 = (Keyword)cSwAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTargetAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cTargetVariableCrossReference_2_2_0 = (CrossReference)cTargetAssignment_2_2.eContents().get(0);
		private final RuleCall cTargetVariableIDTerminalRuleCall_2_2_0_1 = (RuleCall)cTargetVariableCrossReference_2_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cReferenceAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cReferenceVariableCrossReference_2_4_0 = (CrossReference)cReferenceAssignment_2_4.eContents().get(0);
		private final RuleCall cReferenceVariableIDTerminalRuleCall_2_4_0_1 = (RuleCall)cReferenceVariableCrossReference_2_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cResultAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final CrossReference cResultVariableCrossReference_2_6_0 = (CrossReference)cResultAssignment_2_6.eContents().get(0);
		private final RuleCall cResultVariableIDTerminalRuleCall_2_6_0_1 = (RuleCall)cResultVariableCrossReference_2_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		
		////combinable_operation
		//// bnf has target_variable_name, but this is just target ID
		////  change [Variable] to ValueName
		//CombinableOperation returns CombinableOperation:
		////  {CombinableOperation}
		//  f_add?='fetchadd' '(' target=[Variable] ',' arithmetic=Expression ',' result=[Variable] ')'
		//  |
		//  ( f_or?='fetchor' | f_and?='fetchand' | f_xor?='fetchxor' )
		//    '(' target=[Variable] ',' bool=Expression ( ',' result=[Variable] )? ')'
		//  |
		//  sw?='swap' '(' target=[Variable] ',' reference=[Variable] ',' result=[Variable] ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  {CombinableOperation}
		//  f_add?='fetchadd' '(' target=[Variable] ',' arithmetic=Expression ',' result=[Variable] ')'
		//  |
		//  ( f_or?='fetchor' | f_and?='fetchand' | f_xor?='fetchxor' )
		//    '(' target=[Variable] ',' bool=Expression ( ',' result=[Variable] )? ')'
		//  |
		//  sw?='swap' '(' target=[Variable] ',' reference=[Variable] ',' result=[Variable] ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////  {CombinableOperation}
		//  f_add?='fetchadd' '(' target=[Variable] ',' arithmetic=Expression ',' result=[Variable] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		////  {CombinableOperation}
		//  f_add?='fetchadd'
		public Assignment getF_addAssignment_0_0() { return cF_addAssignment_0_0; }
		
		//'fetchadd'
		public Keyword getF_addFetchaddKeyword_0_0_0() { return cF_addFetchaddKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//target=[Variable]
		public Assignment getTargetAssignment_0_2() { return cTargetAssignment_0_2; }
		
		//[Variable]
		public CrossReference getTargetVariableCrossReference_0_2_0() { return cTargetVariableCrossReference_0_2_0; }
		
		//ID
		public RuleCall getTargetVariableIDTerminalRuleCall_0_2_0_1() { return cTargetVariableIDTerminalRuleCall_0_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//arithmetic=Expression
		public Assignment getArithmeticAssignment_0_4() { return cArithmeticAssignment_0_4; }
		
		//Expression
		public RuleCall getArithmeticExpressionParserRuleCall_0_4_0() { return cArithmeticExpressionParserRuleCall_0_4_0; }
		
		//','
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }
		
		//result=[Variable]
		public Assignment getResultAssignment_0_6() { return cResultAssignment_0_6; }
		
		//[Variable]
		public CrossReference getResultVariableCrossReference_0_6_0() { return cResultVariableCrossReference_0_6_0; }
		
		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_0_6_0_1() { return cResultVariableIDTerminalRuleCall_0_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }
		
		//( f_or?='fetchor' | f_and?='fetchand' | f_xor?='fetchxor' )
		//  '(' target=[Variable] ',' bool=Expression ( ',' result=[Variable] )? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//( f_or?='fetchor' | f_and?='fetchand' | f_xor?='fetchxor' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//f_or?='fetchor'
		public Assignment getF_orAssignment_1_0_0() { return cF_orAssignment_1_0_0; }
		
		//'fetchor'
		public Keyword getF_orFetchorKeyword_1_0_0_0() { return cF_orFetchorKeyword_1_0_0_0; }
		
		//f_and?='fetchand'
		public Assignment getF_andAssignment_1_0_1() { return cF_andAssignment_1_0_1; }
		
		//'fetchand'
		public Keyword getF_andFetchandKeyword_1_0_1_0() { return cF_andFetchandKeyword_1_0_1_0; }
		
		//f_xor?='fetchxor'
		public Assignment getF_xorAssignment_1_0_2() { return cF_xorAssignment_1_0_2; }
		
		//'fetchxor'
		public Keyword getF_xorFetchxorKeyword_1_0_2_0() { return cF_xorFetchxorKeyword_1_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//target=[Variable]
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//[Variable]
		public CrossReference getTargetVariableCrossReference_1_2_0() { return cTargetVariableCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTargetVariableIDTerminalRuleCall_1_2_0_1() { return cTargetVariableIDTerminalRuleCall_1_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//bool=Expression
		public Assignment getBoolAssignment_1_4() { return cBoolAssignment_1_4; }
		
		//Expression
		public RuleCall getBoolExpressionParserRuleCall_1_4_0() { return cBoolExpressionParserRuleCall_1_4_0; }
		
		//( ',' result=[Variable] )?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//','
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }
		
		//result=[Variable]
		public Assignment getResultAssignment_1_5_1() { return cResultAssignment_1_5_1; }
		
		//[Variable]
		public CrossReference getResultVariableCrossReference_1_5_1_0() { return cResultVariableCrossReference_1_5_1_0; }
		
		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_1_5_1_0_1() { return cResultVariableIDTerminalRuleCall_1_5_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//sw?='swap' '(' target=[Variable] ',' reference=[Variable] ',' result=[Variable] ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//sw?='swap'
		public Assignment getSwAssignment_2_0() { return cSwAssignment_2_0; }
		
		//'swap'
		public Keyword getSwSwapKeyword_2_0_0() { return cSwSwapKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//target=[Variable]
		public Assignment getTargetAssignment_2_2() { return cTargetAssignment_2_2; }
		
		//[Variable]
		public CrossReference getTargetVariableCrossReference_2_2_0() { return cTargetVariableCrossReference_2_2_0; }
		
		//ID
		public RuleCall getTargetVariableIDTerminalRuleCall_2_2_0_1() { return cTargetVariableIDTerminalRuleCall_2_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }
		
		//reference=[Variable]
		public Assignment getReferenceAssignment_2_4() { return cReferenceAssignment_2_4; }
		
		//[Variable]
		public CrossReference getReferenceVariableCrossReference_2_4_0() { return cReferenceVariableCrossReference_2_4_0; }
		
		//ID
		public RuleCall getReferenceVariableIDTerminalRuleCall_2_4_0_1() { return cReferenceVariableIDTerminalRuleCall_2_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_5() { return cCommaKeyword_2_5; }
		
		//result=[Variable]
		public Assignment getResultAssignment_2_6() { return cResultAssignment_2_6; }
		
		//[Variable]
		public CrossReference getResultVariableCrossReference_2_6_0() { return cResultVariableCrossReference_2_6_0; }
		
		//ID
		public RuleCall getResultVariableIDTerminalRuleCall_2_6_0_1() { return cResultVariableIDTerminalRuleCall_2_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_7() { return cRightParenthesisKeyword_2_7; }
	}
	public class CommunicationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CommunicationAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPcAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPcSubprogramCallParserRuleCall_0_0 = (RuleCall)cPcAssignment_0.eContents().get(0);
		private final Assignment cPoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPoPortOutputParserRuleCall_1_0 = (RuleCall)cPoAssignment_1.eContents().get(0);
		private final Assignment cPiAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPiPortInputParserRuleCall_2_0 = (RuleCall)cPiAssignment_2.eContents().get(0);
		private final Assignment cFpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFpFreezePortParserRuleCall_3_0 = (RuleCall)cFpAssignment_3.eContents().get(0);
		private final Assignment cPauseAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cPausePauseParserRuleCall_4_0 = (RuleCall)cPauseAssignment_4.eContents().get(0);
		
		///////////////////////////  COMMUNICATION  /////////////////////////
		////communication_action
		//CommunicationAction:
		//  pc=SubprogramCall
		//  |
		//  po=PortOutput
		//  |
		//  pi=PortInput
		//  |  //freeze port
		//  fp=FreezePort
		//  |
		//  pause=Pause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pc=SubprogramCall
		//|
		//po=PortOutput
		//|
		//pi=PortInput
		//|  //freeze port
		//fp=FreezePort
		//|
		//pause=Pause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pc=SubprogramCall
		public Assignment getPcAssignment_0() { return cPcAssignment_0; }
		
		//SubprogramCall
		public RuleCall getPcSubprogramCallParserRuleCall_0_0() { return cPcSubprogramCallParserRuleCall_0_0; }
		
		//po=PortOutput
		public Assignment getPoAssignment_1() { return cPoAssignment_1; }
		
		//PortOutput
		public RuleCall getPoPortOutputParserRuleCall_1_0() { return cPoPortOutputParserRuleCall_1_0; }
		
		//pi=PortInput
		public Assignment getPiAssignment_2() { return cPiAssignment_2; }
		
		//PortInput
		public RuleCall getPiPortInputParserRuleCall_2_0() { return cPiPortInputParserRuleCall_2_0; }
		
		////freeze port
		//fp=FreezePort
		public Assignment getFpAssignment_3() { return cFpAssignment_3; }
		
		//FreezePort
		public RuleCall getFpFreezePortParserRuleCall_3_0() { return cFpFreezePortParserRuleCall_3_0; }
		
		//pause=Pause
		public Assignment getPauseAssignment_4() { return cPauseAssignment_4; }
		
		//Pause
		public RuleCall getPausePauseParserRuleCall_4_0() { return cPausePauseParserRuleCall_4_0; }
	}
	public class SubprogramCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SubprogramCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcedureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProcedureCalledSubprogramCrossReference_0_0 = (CrossReference)cProcedureAssignment_0.eContents().get(0);
		private final RuleCall cProcedureCalledSubprogramIDTerminalRuleCall_0_0_1 = (RuleCall)cProcedureCalledSubprogramCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFormalActualListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////subprogram_call
		//SubprogramCall:
		//  procedure=[aadl2::CalledSubprogram]
		//  '(' parameters=FormalActualList? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//procedure=[aadl2::CalledSubprogram]
		//'(' parameters=FormalActualList? ')'
		public Group getGroup() { return cGroup; }
		
		//procedure=[aadl2::CalledSubprogram]
		public Assignment getProcedureAssignment_0() { return cProcedureAssignment_0; }
		
		//[aadl2::CalledSubprogram]
		public CrossReference getProcedureCalledSubprogramCrossReference_0_0() { return cProcedureCalledSubprogramCrossReference_0_0; }
		
		//ID
		public RuleCall getProcedureCalledSubprogramIDTerminalRuleCall_0_0_1() { return cProcedureCalledSubprogramIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters=FormalActualList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//FormalActualList
		public RuleCall getParametersFormalActualListParserRuleCall_2_0() { return cParametersFormalActualListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FormalActualListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.FormalActualList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesFormalActualParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaCommaKeyword_1_0_0 = (Keyword)cCommaAssignment_1_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesFormalActualParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVariablesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVariablesFormalActualParserRuleCall_1_2_1_0 = (RuleCall)cVariablesAssignment_1_2_1.eContents().get(0);
		
		////parameter_list
		//FormalActualList:
		//  variables+=FormalActual ( comma?=',' variables+=FormalActual ( ',' variables+=FormalActual )* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variables+=FormalActual ( comma?=',' variables+=FormalActual ( ',' variables+=FormalActual )* )?
		public Group getGroup() { return cGroup; }
		
		//variables+=FormalActual
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }
		
		//FormalActual
		public RuleCall getVariablesFormalActualParserRuleCall_0_0() { return cVariablesFormalActualParserRuleCall_0_0; }
		
		//( comma?=',' variables+=FormalActual ( ',' variables+=FormalActual )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//comma?=','
		public Assignment getCommaAssignment_1_0() { return cCommaAssignment_1_0; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_0() { return cCommaCommaKeyword_1_0_0; }
		
		//variables+=FormalActual
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }
		
		//FormalActual
		public RuleCall getVariablesFormalActualParserRuleCall_1_1_0() { return cVariablesFormalActualParserRuleCall_1_1_0; }
		
		//( ',' variables+=FormalActual )*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//variables+=FormalActual
		public Assignment getVariablesAssignment_1_2_1() { return cVariablesAssignment_1_2_1; }
		
		//FormalActual
		public RuleCall getVariablesFormalActualParserRuleCall_1_2_1_0() { return cVariablesFormalActualParserRuleCall_1_2_1_0; }
	}
	public class FormalActualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.FormalActual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFormalAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cFormalParameterCrossReference_0_0_0 = (CrossReference)cFormalAssignment_0_0.eContents().get(0);
		private final RuleCall cFormalParameterIDTerminalRuleCall_0_0_0_1 = (RuleCall)cFormalParameterCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActualAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActualSubProgramParameterParserRuleCall_1_0 = (RuleCall)cActualAssignment_1.eContents().get(0);
		
		////actual_parameter
		//FormalActual:
		//  ( formal=[aadl2::Parameter]
		//    ':' )? actual=SubProgramParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( formal=[aadl2::Parameter]
		//  ':' )? actual=SubProgramParameter
		public Group getGroup() { return cGroup; }
		
		//( formal=[aadl2::Parameter]
		//  ':' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//formal=[aadl2::Parameter]
		public Assignment getFormalAssignment_0_0() { return cFormalAssignment_0_0; }
		
		//[aadl2::Parameter]
		public CrossReference getFormalParameterCrossReference_0_0_0() { return cFormalParameterCrossReference_0_0_0; }
		
		//ID
		public RuleCall getFormalParameterIDTerminalRuleCall_0_0_0_1() { return cFormalParameterIDTerminalRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//actual=SubProgramParameter
		public Assignment getActualAssignment_1() { return cActualAssignment_1; }
		
		//SubProgramParameter
		public RuleCall getActualSubProgramParameterParserRuleCall_1_0() { return cActualSubProgramParameterParserRuleCall_1_0; }
	}
	public class SubProgramParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SubProgramParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueValueNameParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionParenthesizedSubexpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SubProgramParameter:
		//    value=ValueName
		//    | constant=Constant
		//    | expression=ParenthesizedSubexpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ValueName
		//| constant=Constant
		//| expression=ParenthesizedSubexpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ValueName
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ValueName
		public RuleCall getValueValueNameParserRuleCall_0_0() { return cValueValueNameParserRuleCall_0_0; }
		
		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }
		
		//expression=ParenthesizedSubexpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ParenthesizedSubexpression
		public RuleCall getExpressionParenthesizedSubexpressionParserRuleCall_2_0() { return cExpressionParenthesizedSubexpressionParserRuleCall_2_0; }
	}
	public class PortOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PortOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortPortCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEorExpressionParserRuleCall_2_1_0 = (RuleCall)cEorAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PortOutput:
		//  port=[aadl2::Port|ID]
		//    '!' ( '(' eor=Expression  // ExpressionOrRelation
		//        ')' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//port=[aadl2::Port|ID]
		//  '!' ( '(' eor=Expression  // ExpressionOrRelation
		//      ')' )?
		public Group getGroup() { return cGroup; }
		
		//port=[aadl2::Port|ID]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[aadl2::Port|ID]
		public CrossReference getPortPortCrossReference_0_0() { return cPortPortCrossReference_0_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_0_0_1() { return cPortPortIDTerminalRuleCall_0_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//( '(' eor=Expression  // ExpressionOrRelation
		//       ')' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//eor=Expression
		public Assignment getEorAssignment_2_1() { return cEorAssignment_2_1; }
		
		//Expression
		public RuleCall getEorExpressionParserRuleCall_2_1_0() { return cEorExpressionParserRuleCall_2_1_0; }
		
		//// ExpressionOrRelation
		//      ')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class PortInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PortInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortPortCrossReference_0_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetValueNameParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PortInput:
		//  port=[aadl2::Port|ID] '?' '(' target=ValueName ')'
		//   ;
		@Override public ParserRule getRule() { return rule; }
		
		//port=[aadl2::Port|ID] '?' '(' target=ValueName ')'
		public Group getGroup() { return cGroup; }
		
		//port=[aadl2::Port|ID]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[aadl2::Port|ID]
		public CrossReference getPortPortCrossReference_0_0() { return cPortPortCrossReference_0_0; }
		
		//ID
		public RuleCall getPortPortIDTerminalRuleCall_0_0_1() { return cPortPortIDTerminalRuleCall_0_0_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=ValueName
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//ValueName
		public RuleCall getTargetValueNameParserRuleCall_3_0() { return cTargetValueNameParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsValueNameParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cAsgnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAsgnColonEqualsSignKeyword_1_0 = (Keyword)cAsgnAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionOrAnyParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		///////////////////////  ASSIGNMENT  ///////////////////////
		//Assignment:
		//   lhs=ValueName asgn=':=' rhs=ExpressionOrAny
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=ValueName asgn=':=' rhs=ExpressionOrAny
		public Group getGroup() { return cGroup; }
		
		//lhs=ValueName
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//ValueName
		public RuleCall getLhsValueNameParserRuleCall_0_0() { return cLhsValueNameParserRuleCall_0_0; }
		
		//asgn=':='
		public Assignment getAsgnAssignment_1() { return cAsgnAssignment_1; }
		
		//':='
		public Keyword getAsgnColonEqualsSignKeyword_1_0() { return cAsgnColonEqualsSignKeyword_1_0; }
		
		//rhs=ExpressionOrAny
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//ExpressionOrAny
		public RuleCall getRhsExpressionOrAnyParserRuleCall_2_0() { return cRhsExpressionOrAnyParserRuleCall_2_0; }
	}
	public class ExpressionOrAnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExpressionOrAny");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Assignment cAnyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAnyAnyParserRuleCall_1_0 = (RuleCall)cAnyAssignment_1.eContents().get(0);
		
		////NameTick:
		////    value=ValueName
		////  tick?='\''?
		////;
		//ExpressionOrAny:
		//    exp=Expression | any=Any
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=Expression | any=Any
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exp=Expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//any=Any
		public Assignment getAnyAssignment_1() { return cAnyAssignment_1; }
		
		//Any
		public RuleCall getAnyAnyParserRuleCall_1_0() { return cAnyAnyParserRuleCall_1_0; }
	}
	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Any");
		private final Keyword cAnyKeyword = (Keyword)rule.eContents().get(1);
		
		////@Deprecated
		//Any: 'any';
		@Override public ParserRule getRule() { return rule; }
		
		//'any'
		public Keyword getAnyKeyword() { return cAnyKeyword; }
	}
	public class SimultaneousAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SimultaneousAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsValueNameParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLhsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLhsValueNameParserRuleCall_2_1_0 = (RuleCall)cLhsAssignment_2_1.eContents().get(0);
		private final Assignment cAsgnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cAsgnColonEqualsSignKeyword_3_0 = (Keyword)cAsgnAssignment_3.eContents().get(0);
		private final Assignment cRhsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRhsExpressionOrAnyParserRuleCall_4_0 = (RuleCall)cRhsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRhsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRhsExpressionOrAnyParserRuleCall_5_1_0 = (RuleCall)cRhsAssignment_5_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SimultaneousAssignment returns SimultaneousAssignment:
		//    '|'
		//    lhs+=ValueName  ( ',' lhs+=ValueName )+
		//    asgn=':='
		//    rhs+=ExpressionOrAny  ( ',' rhs+=ExpressionOrAny )+
		//  '|'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  '|'
		//  lhs+=ValueName  ( ',' lhs+=ValueName )+
		//  asgn=':='
		//  rhs+=ExpressionOrAny  ( ',' rhs+=ExpressionOrAny )+
		//'|'
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//lhs+=ValueName
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }
		
		//ValueName
		public RuleCall getLhsValueNameParserRuleCall_1_0() { return cLhsValueNameParserRuleCall_1_0; }
		
		//( ',' lhs+=ValueName )+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//lhs+=ValueName
		public Assignment getLhsAssignment_2_1() { return cLhsAssignment_2_1; }
		
		//ValueName
		public RuleCall getLhsValueNameParserRuleCall_2_1_0() { return cLhsValueNameParserRuleCall_2_1_0; }
		
		//asgn=':='
		public Assignment getAsgnAssignment_3() { return cAsgnAssignment_3; }
		
		//':='
		public Keyword getAsgnColonEqualsSignKeyword_3_0() { return cAsgnColonEqualsSignKeyword_3_0; }
		
		//rhs+=ExpressionOrAny
		public Assignment getRhsAssignment_4() { return cRhsAssignment_4; }
		
		//ExpressionOrAny
		public RuleCall getRhsExpressionOrAnyParserRuleCall_4_0() { return cRhsExpressionOrAnyParserRuleCall_4_0; }
		
		//( ',' rhs+=ExpressionOrAny )+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//rhs+=ExpressionOrAny
		public Assignment getRhsAssignment_5_1() { return cRhsAssignment_5_1; }
		
		//ExpressionOrAny
		public RuleCall getRhsExpressionOrAnyParserRuleCall_5_1_0() { return cRhsExpressionOrAnyParserRuleCall_5_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_6() { return cVerticalLineKeyword_6; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardBooleanExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlessaltAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlessaltBLESSAlternativeParserRuleCall_3_0_0 = (RuleCall)cBlessaltAssignment_3_0.eContents().get(0);
		private final Assignment cBaaltAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cBaaltBAAlternativeParserRuleCall_3_1_0 = (RuleCall)cBaaltAssignment_3_1.eContents().get(0);
		
		////////////////////////////  CONTROL  ////////////////////////////
		////alternative
		//Alternative:
		//  'if'
		//'(' guard=BooleanExpression
		//  (
		//  blessalt=BLESSAlternative
		//  | baalt=BAAlternative
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'if'
		//'(' guard=BooleanExpression
		//  (
		//  blessalt=BLESSAlternative
		//  | baalt=BAAlternative
		//    )
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//guard=BooleanExpression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }
		
		//BooleanExpression
		public RuleCall getGuardBooleanExpressionParserRuleCall_2_0() { return cGuardBooleanExpressionParserRuleCall_2_0; }
		
		//(
		//blessalt=BLESSAlternative
		//| baalt=BAAlternative
		//  )
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//blessalt=BLESSAlternative
		public Assignment getBlessaltAssignment_3_0() { return cBlessaltAssignment_3_0; }
		
		//BLESSAlternative
		public RuleCall getBlessaltBLESSAlternativeParserRuleCall_3_0_0() { return cBlessaltBLESSAlternativeParserRuleCall_3_0_0; }
		
		//baalt=BAAlternative
		public Assignment getBaaltAssignment_3_1() { return cBaaltAssignment_3_1; }
		
		//BAAlternative
		public RuleCall getBaaltBAAlternativeParserRuleCall_3_1_0() { return cBaaltBAAlternativeParserRuleCall_3_1_0; }
	}
	public class BLESSAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BLESSAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightParenthesisTildeGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionAssertedActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAlternativeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAlternativeGuardedActionParserRuleCall_2_1_0 = (RuleCall)cAlternativeAssignment_2_1.eContents().get(0);
		private final Keyword cFiKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BLESSAlternative:
		//     ')~>' action=AssertedAction
		//      ( '[]' alternative+=GuardedAction )+
		//  'fi'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//   ')~>' action=AssertedAction
		//    ( '[]' alternative+=GuardedAction )+
		//'fi'
		public Group getGroup() { return cGroup; }
		
		//')~>'
		public Keyword getRightParenthesisTildeGreaterThanSignKeyword_0() { return cRightParenthesisTildeGreaterThanSignKeyword_0; }
		
		//action=AssertedAction
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_1_0() { return cActionAssertedActionParserRuleCall_1_0; }
		
		//( '[]' alternative+=GuardedAction )+
		public Group getGroup_2() { return cGroup_2; }
		
		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2_0() { return cLeftSquareBracketRightSquareBracketKeyword_2_0; }
		
		//alternative+=GuardedAction
		public Assignment getAlternativeAssignment_2_1() { return cAlternativeAssignment_2_1; }
		
		//GuardedAction
		public RuleCall getAlternativeGuardedActionParserRuleCall_2_1_0() { return cAlternativeGuardedActionParserRuleCall_2_1_0; }
		
		//'fi'
		public Keyword getFiKeyword_3() { return cFiKeyword_3; }
	}
	public class GuardedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.GuardedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardBooleanExpressionParserRuleCall_1_0 = (RuleCall)cGuardAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisTildeGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionAssertedActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//GuardedAction:
		//  '(' guard=BooleanExpression ')~>' action=AssertedAction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' guard=BooleanExpression ')~>' action=AssertedAction
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//guard=BooleanExpression
		public Assignment getGuardAssignment_1() { return cGuardAssignment_1; }
		
		//BooleanExpression
		public RuleCall getGuardBooleanExpressionParserRuleCall_1_0() { return cGuardBooleanExpressionParserRuleCall_1_0; }
		
		//')~>'
		public Keyword getRightParenthesisTildeGreaterThanSignKeyword_2() { return cRightParenthesisTildeGreaterThanSignKeyword_2; }
		
		//action=AssertedAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//AssertedAction
		public RuleCall getActionAssertedActionParserRuleCall_3_0() { return cActionAssertedActionParserRuleCall_3_0; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestBooleanExpressionParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInvariantAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cInvariantInvariantKeyword_4_0_0 = (Keyword)cInvariantAssignment_4_0.eContents().get(0);
		private final Assignment cInvAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInvNamelessAssertionParserRuleCall_4_1_0 = (RuleCall)cInvAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cBoundAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cBoundBoundKeyword_5_0_0 = (Keyword)cBoundAssignment_5_0.eContents().get(0);
		private final Assignment cBound_functionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBound_functionExpressionParserRuleCall_5_1_0 = (RuleCall)cBound_functionAssignment_5_1.eContents().get(0);
		private final Assignment cElqAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElqExistentialLatticeQuantificationParserRuleCall_6_0 = (RuleCall)cElqAssignment_6.eContents().get(0);
		
		//WhileLoop:
		//  'while'
		////  availability=Availability?
		//  '(' test=BooleanExpression ')'
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		//  ( bound?='bound' bound_function=Expression )?
		//  elq=ExistentialLatticeQuantification
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'while'
		////  availability=Availability?
		//  '(' test=BooleanExpression ')'
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		//  ( bound?='bound' bound_function=Expression )?
		//  elq=ExistentialLatticeQuantification
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		////  availability=Availability?
		//  '('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test=BooleanExpression
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//BooleanExpression
		public RuleCall getTestBooleanExpressionParserRuleCall_2_0() { return cTestBooleanExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//( invariant?='invariant' inv=NamelessAssertion )?
		public Group getGroup_4() { return cGroup_4; }
		
		//invariant?='invariant'
		public Assignment getInvariantAssignment_4_0() { return cInvariantAssignment_4_0; }
		
		//'invariant'
		public Keyword getInvariantInvariantKeyword_4_0_0() { return cInvariantInvariantKeyword_4_0_0; }
		
		//inv=NamelessAssertion
		public Assignment getInvAssignment_4_1() { return cInvAssignment_4_1; }
		
		//NamelessAssertion
		public RuleCall getInvNamelessAssertionParserRuleCall_4_1_0() { return cInvNamelessAssertionParserRuleCall_4_1_0; }
		
		//( bound?='bound' bound_function=Expression )?
		public Group getGroup_5() { return cGroup_5; }
		
		//bound?='bound'
		public Assignment getBoundAssignment_5_0() { return cBoundAssignment_5_0; }
		
		//'bound'
		public Keyword getBoundBoundKeyword_5_0_0() { return cBoundBoundKeyword_5_0_0; }
		
		//bound_function=Expression
		public Assignment getBound_functionAssignment_5_1() { return cBound_functionAssignment_5_1; }
		
		//Expression
		public RuleCall getBound_functionExpressionParserRuleCall_5_1_0() { return cBound_functionExpressionParserRuleCall_5_1_0; }
		
		//elq=ExistentialLatticeQuantification
		public Assignment getElqAssignment_6() { return cElqAssignment_6; }
		
		//ExistentialLatticeQuantification
		public RuleCall getElqExistentialLatticeQuantificationParserRuleCall_6_0() { return cElqExistentialLatticeQuantificationParserRuleCall_6_0; }
	}
	public class ForLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ForLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountForallVariableParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLower_boundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLower_boundExpressionParserRuleCall_3_0 = (RuleCall)cLower_boundAssignment_3.eContents().get(0);
		private final RuleCall cDOTDOTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cUpper_boundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpper_boundExpressionParserRuleCall_5_0 = (RuleCall)cUpper_boundAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInvariantAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cInvariantInvariantKeyword_6_0_0 = (Keyword)cInvariantAssignment_6_0.eContents().get(0);
		private final Assignment cInvAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInvNamelessAssertionParserRuleCall_6_1_0 = (RuleCall)cInvAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionBehaviorActionsParserRuleCall_8_0 = (RuleCall)cActionAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ForLoop:
		//  'for'
		//  count=ForallVariable
		//  'in' lower_bound=Expression DOTDOT upper_bound=Expression
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		//  '{'  action=BehaviorActions '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for'
		//count=ForallVariable
		//'in' lower_bound=Expression DOTDOT upper_bound=Expression
		//( invariant?='invariant' inv=NamelessAssertion )?
		//'{'  action=BehaviorActions '}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//count=ForallVariable
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//ForallVariable
		public RuleCall getCountForallVariableParserRuleCall_1_0() { return cCountForallVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//lower_bound=Expression
		public Assignment getLower_boundAssignment_3() { return cLower_boundAssignment_3; }
		
		//Expression
		public RuleCall getLower_boundExpressionParserRuleCall_3_0() { return cLower_boundExpressionParserRuleCall_3_0; }
		
		//DOTDOT
		public RuleCall getDOTDOTTerminalRuleCall_4() { return cDOTDOTTerminalRuleCall_4; }
		
		//upper_bound=Expression
		public Assignment getUpper_boundAssignment_5() { return cUpper_boundAssignment_5; }
		
		//Expression
		public RuleCall getUpper_boundExpressionParserRuleCall_5_0() { return cUpper_boundExpressionParserRuleCall_5_0; }
		
		//( invariant?='invariant' inv=NamelessAssertion )?
		public Group getGroup_6() { return cGroup_6; }
		
		//invariant?='invariant'
		public Assignment getInvariantAssignment_6_0() { return cInvariantAssignment_6_0; }
		
		//'invariant'
		public Keyword getInvariantInvariantKeyword_6_0_0() { return cInvariantInvariantKeyword_6_0_0; }
		
		//inv=NamelessAssertion
		public Assignment getInvAssignment_6_1() { return cInvAssignment_6_1; }
		
		//NamelessAssertion
		public RuleCall getInvNamelessAssertionParserRuleCall_6_1_0() { return cInvNamelessAssertionParserRuleCall_6_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//action=BehaviorActions
		public Assignment getActionAssignment_8() { return cActionAssignment_8; }
		
		//BehaviorActions
		public RuleCall getActionBehaviorActionsParserRuleCall_8_0() { return cActionBehaviorActionsParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DoUntilLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DoUntilLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInvariantAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cInvariantInvariantKeyword_1_0_0 = (Keyword)cInvariantAssignment_1_0.eContents().get(0);
		private final Assignment cInvAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInvNamelessAssertionParserRuleCall_1_1_0 = (RuleCall)cInvAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBoundAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cBoundBoundKeyword_2_0_0 = (Keyword)cBoundAssignment_2_0.eContents().get(0);
		private final Assignment cBndAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBndExpressionParserRuleCall_2_1_0 = (RuleCall)cBndAssignment_2_1.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Keyword cUntilKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGuardAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGuardBooleanExpressionParserRuleCall_6_0 = (RuleCall)cGuardAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DoUntilLoop:
		//  'do'
		////  availability=Availability?
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		//  ( bound?='bound' bnd=Expression )?
		//  actions=BehaviorActions
		//  'until' '(' guard=BooleanExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  'do'
		////  availability=Availability?
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		//  ( bound?='bound' bnd=Expression )?
		//  actions=BehaviorActions
		//  'until' '(' guard=BooleanExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		////  availability=Availability?
		//  ( invariant?='invariant' inv=NamelessAssertion )?
		public Group getGroup_1() { return cGroup_1; }
		
		//invariant?='invariant'
		public Assignment getInvariantAssignment_1_0() { return cInvariantAssignment_1_0; }
		
		//'invariant'
		public Keyword getInvariantInvariantKeyword_1_0_0() { return cInvariantInvariantKeyword_1_0_0; }
		
		//inv=NamelessAssertion
		public Assignment getInvAssignment_1_1() { return cInvAssignment_1_1; }
		
		//NamelessAssertion
		public RuleCall getInvNamelessAssertionParserRuleCall_1_1_0() { return cInvNamelessAssertionParserRuleCall_1_1_0; }
		
		//( bound?='bound' bnd=Expression )?
		public Group getGroup_2() { return cGroup_2; }
		
		//bound?='bound'
		public Assignment getBoundAssignment_2_0() { return cBoundAssignment_2_0; }
		
		//'bound'
		public Keyword getBoundBoundKeyword_2_0_0() { return cBoundBoundKeyword_2_0_0; }
		
		//bnd=Expression
		public Assignment getBndAssignment_2_1() { return cBndAssignment_2_1; }
		
		//Expression
		public RuleCall getBndExpressionParserRuleCall_2_1_0() { return cBndExpressionParserRuleCall_2_1_0; }
		
		//actions=BehaviorActions
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_3_0() { return cActionsBehaviorActionsParserRuleCall_3_0; }
		
		//'until'
		public Keyword getUntilKeyword_4() { return cUntilKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//guard=BooleanExpression
		public Assignment getGuardAssignment_6() { return cGuardAssignment_6; }
		
		//BooleanExpression
		public RuleCall getGuardBooleanExpressionParserRuleCall_6_0() { return cGuardBooleanExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ThrowsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ThrowsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExceptionsExceptionCrossReference_1_0 = (CrossReference)cExceptionsAssignment_1.eContents().get(0);
		private final RuleCall cExceptionsExceptionIDTerminalRuleCall_1_0_1 = (RuleCall)cExceptionsExceptionCrossReference_1_0.eContents().get(1);
		
		////////////////////////////   EXCEPTIONS   ////////////////////////////
		//ThrowsClause:
		//    'throws' exceptions+=[Exception]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'throws' exceptions+=[Exception]
		public Group getGroup() { return cGroup; }
		
		//'throws'
		public Keyword getThrowsKeyword_0() { return cThrowsKeyword_0; }
		
		//exceptions+=[Exception]
		public Assignment getExceptionsAssignment_1() { return cExceptionsAssignment_1; }
		
		//[Exception]
		public CrossReference getExceptionsExceptionCrossReference_1_0() { return cExceptionsExceptionCrossReference_1_0; }
		
		//ID
		public RuleCall getExceptionsExceptionIDTerminalRuleCall_1_0_1() { return cExceptionsExceptionIDTerminalRuleCall_1_0_1; }
	}
	public class CatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCatchesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCatchesCatchClauseTermParserRuleCall_1_0 = (RuleCall)cCatchesAssignment_1.eContents().get(0);
		
		////catch_clause
		//CatchClause:
		//  'catch'
		//  ( catches+=CatchClauseTerm )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'catch'
		//( catches+=CatchClauseTerm )+
		public Group getGroup() { return cGroup; }
		
		//'catch'
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }
		
		//( catches+=CatchClauseTerm )+
		public Assignment getCatchesAssignment_1() { return cCatchesAssignment_1; }
		
		//CatchClauseTerm
		public RuleCall getCatchesCatchClauseTermParserRuleCall_1_0() { return cCatchesCatchClauseTermParserRuleCall_1_0; }
	}
	public class CatchClauseTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CatchClauseTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExceptionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cExceptionsExceptionCrossReference_1_0_0 = (CrossReference)cExceptionsAssignment_1_0.eContents().get(0);
		private final RuleCall cExceptionsExceptionIDTerminalRuleCall_1_0_0_1 = (RuleCall)cExceptionsExceptionCrossReference_1_0_0.eContents().get(1);
		private final Assignment cAllAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAllAllKeyword_1_1_0 = (Keyword)cAllAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionBasicActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CatchClauseTerm:
		//  '(' //exception_label
		//  ( exceptions+=[Exception]+ | all?='all' ) ':' action=BasicAction
		//  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' //exception_label
		//( exceptions+=[Exception]+ | all?='all' ) ':' action=BasicAction
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		////exception_label
		// ( exceptions+=[Exception]+ | all?='all' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exceptions+=[Exception]+
		public Assignment getExceptionsAssignment_1_0() { return cExceptionsAssignment_1_0; }
		
		//[Exception]
		public CrossReference getExceptionsExceptionCrossReference_1_0_0() { return cExceptionsExceptionCrossReference_1_0_0; }
		
		//ID
		public RuleCall getExceptionsExceptionIDTerminalRuleCall_1_0_0_1() { return cExceptionsExceptionIDTerminalRuleCall_1_0_0_1; }
		
		//all?='all'
		public Assignment getAllAssignment_1_1() { return cAllAssignment_1_1; }
		
		//'all'
		public Keyword getAllAllKeyword_1_1_0() { return cAllAllKeyword_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//action=BasicAction
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//BasicAction
		public RuleCall getActionBasicActionParserRuleCall_3_0() { return cActionBasicActionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WhenThrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.WhenThrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThrowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExceptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cExceptionExceptionCrossReference_5_0 = (CrossReference)cExceptionAssignment_5.eContents().get(0);
		private final RuleCall cExceptionExceptionIDTerminalRuleCall_5_0_1 = (RuleCall)cExceptionExceptionCrossReference_5_0.eContents().get(1);
		private final Assignment cMessageAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMessageSTRINGTerminalRuleCall_6_0 = (RuleCall)cMessageAssignment_6.eContents().get(0);
		
		//WhenThrow:
		//  'when' '(' exp=Expression ')' 'throw' exception=[Exception]  message=STRING?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' '(' exp=Expression ')' 'throw' exception=[Exception]  message=STRING?
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'throw'
		public Keyword getThrowKeyword_4() { return cThrowKeyword_4; }
		
		//exception=[Exception]
		public Assignment getExceptionAssignment_5() { return cExceptionAssignment_5; }
		
		//[Exception]
		public CrossReference getExceptionExceptionCrossReference_5_0() { return cExceptionExceptionCrossReference_5_0; }
		
		//ID
		public RuleCall getExceptionExceptionIDTerminalRuleCall_5_0_1() { return cExceptionExceptionIDTerminalRuleCall_5_0_1; }
		
		//message=STRING?
		public Assignment getMessageAssignment_6() { return cMessageAssignment_6; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_6_0() { return cMessageSTRINGTerminalRuleCall_6_0; }
	}
	public class ComputationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Computation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLbBehaviorTimeParserRuleCall_2_0 = (RuleCall)cLbAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUbAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUbBehaviorTimeParserRuleCall_3_1_0 = (RuleCall)cUbAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cBindingKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cComponentAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cComponentComponentClassifierCrossReference_5_2_0 = (CrossReference)cComponentAssignment_5_2.eContents().get(0);
		private final RuleCall cComponentComponentClassifierQCREFParserRuleCall_5_2_0_1 = (RuleCall)cComponentComponentClassifierCrossReference_5_2_0.eContents().get(1);
		
		///////////////////////  DEPRICATED  ///////////////////////////////
		//@Deprecated
		//Computation:
		//    'computation'
		//    '(' lb=BehaviorTime ( ',' ub=BehaviorTime )? ')'
		//    ( 'in' 'binding' component+=[aadl2::ComponentClassifier|QCREF]+ )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'computation'
		//'(' lb=BehaviorTime ( ',' ub=BehaviorTime )? ')'
		//( 'in' 'binding' component+=[aadl2::ComponentClassifier|QCREF]+ )?
		public Group getGroup() { return cGroup; }
		
		//'computation'
		public Keyword getComputationKeyword_0() { return cComputationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//lb=BehaviorTime
		public Assignment getLbAssignment_2() { return cLbAssignment_2; }
		
		//BehaviorTime
		public RuleCall getLbBehaviorTimeParserRuleCall_2_0() { return cLbBehaviorTimeParserRuleCall_2_0; }
		
		//( ',' ub=BehaviorTime )?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ub=BehaviorTime
		public Assignment getUbAssignment_3_1() { return cUbAssignment_3_1; }
		
		//BehaviorTime
		public RuleCall getUbBehaviorTimeParserRuleCall_3_1_0() { return cUbBehaviorTimeParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//( 'in' 'binding' component+=[aadl2::ComponentClassifier|QCREF]+ )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//'binding'
		public Keyword getBindingKeyword_5_1() { return cBindingKeyword_5_1; }
		
		//component+=[aadl2::ComponentClassifier|QCREF]+
		public Assignment getComponentAssignment_5_2() { return cComponentAssignment_5_2; }
		
		//[aadl2::ComponentClassifier|QCREF]
		public CrossReference getComponentComponentClassifierCrossReference_5_2_0() { return cComponentComponentClassifierCrossReference_5_2_0; }
		
		//QCREF
		public RuleCall getComponentComponentClassifierQCREFParserRuleCall_5_2_0_1() { return cComponentComponentClassifierQCREFParserRuleCall_5_2_0_1; }
	}
	public class BAAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BAAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Assignment cElseifaltAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElseifaltElseifAlternativeParserRuleCall_2_0 = (RuleCall)cElseifaltAssignment_2.eContents().get(0);
		private final Assignment cElsealtAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElsealtElseAlternativeParserRuleCall_3_0 = (RuleCall)cElsealtAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Deprecated
		//BAAlternative:
		//   //BA2015 reconciliation  add if-elsif-else-end if
		//  ')' actions=BehaviorActions
		//  ( elseifalt+=ElseifAlternative )*
		//  ( elsealt=ElseAlternative)?
		//  'end' 'if'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// //BA2015 reconciliation  add if-elsif-else-end if
		//')' actions=BehaviorActions
		//( elseifalt+=ElseifAlternative )*
		//( elsealt=ElseAlternative)?
		//'end' 'if'
		public Group getGroup() { return cGroup; }
		
		// //BA2015 reconciliation  add if-elsif-else-end if
		//')'
		public Keyword getRightParenthesisKeyword_0() { return cRightParenthesisKeyword_0; }
		
		//actions=BehaviorActions
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_1_0() { return cActionsBehaviorActionsParserRuleCall_1_0; }
		
		//( elseifalt+=ElseifAlternative )*
		public Assignment getElseifaltAssignment_2() { return cElseifaltAssignment_2; }
		
		//ElseifAlternative
		public RuleCall getElseifaltElseifAlternativeParserRuleCall_2_0() { return cElseifaltElseifAlternativeParserRuleCall_2_0; }
		
		//( elsealt=ElseAlternative)?
		public Assignment getElsealtAssignment_3() { return cElsealtAssignment_3; }
		
		//ElseAlternative
		public RuleCall getElsealtElseAlternativeParserRuleCall_3_0() { return cElsealtElseAlternativeParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'if'
		public Keyword getIfKeyword_5() { return cIfKeyword_5; }
	}
	public class ElseifAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ElseifAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestBooleanExpressionParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		
		//ElseifAlternative:
		//  'elsif' '(' test=BooleanExpression ')' actions=BehaviorActions
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'elsif' '(' test=BooleanExpression ')' actions=BehaviorActions
		public Group getGroup() { return cGroup; }
		
		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test=BooleanExpression
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//BooleanExpression
		public RuleCall getTestBooleanExpressionParserRuleCall_2_0() { return cTestBooleanExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//actions=BehaviorActions
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_4_0() { return cActionsBehaviorActionsParserRuleCall_4_0; }
	}
	public class ElseAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ElseAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsBehaviorActionsParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//ElseAlternative:
		//  'else' actions=BehaviorActions
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' actions=BehaviorActions
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//actions=BehaviorActions
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }
		
		//BehaviorActions
		public RuleCall getActionsBehaviorActionsParserRuleCall_1_0() { return cActionsBehaviorActionsParserRuleCall_1_0; }
	}
	public class IssueExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.IssueException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExceptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cExceptionExceptionCrossReference_2_0 = (CrossReference)cExceptionAssignment_2.eContents().get(0);
		private final RuleCall cExceptionExceptionIDTerminalRuleCall_2_0_1 = (RuleCall)cExceptionExceptionCrossReference_2_0.eContents().get(1);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageSTRINGTerminalRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		// //BA2015 reconciliation add IssueException
		//@Deprecated
		//IssueException:
		//    'exception' '(' exception=[Exception] message=STRING? ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' '(' exception=[Exception] message=STRING? ')'
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exception=[Exception]
		public Assignment getExceptionAssignment_2() { return cExceptionAssignment_2; }
		
		//[Exception]
		public CrossReference getExceptionExceptionCrossReference_2_0() { return cExceptionExceptionCrossReference_2_0; }
		
		//ID
		public RuleCall getExceptionExceptionIDTerminalRuleCall_2_0_1() { return cExceptionExceptionIDTerminalRuleCall_2_0_1; }
		
		//message=STRING?
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_3_0() { return cMessageSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LockingActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.LockingAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntercriticalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEntercriticalAsteriskExclamationMarkLessThanSignKeyword_0_0 = (Keyword)cEntercriticalAssignment_0.eContents().get(0);
		private final Assignment cLeavecriticalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLeavecriticalAsteriskExclamationMarkGreaterThanSignKeyword_1_0 = (Keyword)cLeavecriticalAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRequired_data_accessAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRequired_data_accessDataAccessCrossReference_2_0_0 = (CrossReference)cRequired_data_accessAssignment_2_0.eContents().get(0);
		private final RuleCall cRequired_data_accessDataAccessIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRequired_data_accessDataAccessCrossReference_2_0_0.eContents().get(1);
		private final Assignment cLockAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cLockExclamationMarkLessThanSignKeyword_2_1_0 = (Keyword)cLockAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cRequired_data_accessAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRequired_data_accessDataAccessCrossReference_3_0_0 = (CrossReference)cRequired_data_accessAssignment_3_0.eContents().get(0);
		private final RuleCall cRequired_data_accessDataAccessIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRequired_data_accessDataAccessCrossReference_3_0_0.eContents().get(1);
		private final Assignment cUnlockAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cUnlockExclamationMarkGreaterThanSignKeyword_3_1_0 = (Keyword)cUnlockAssignment_3_1.eContents().get(0);
		
		// //BA2015 reconciliation add LockingAction
		//@Deprecated
		//LockingAction:
		//  entercritical='*!<'
		//  | leavecritical='*!>'
		//  | required_data_access=[aadl2::DataAccess] lock='!<'
		//  | required_data_access=[aadl2::DataAccess] unlock='!>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entercritical='*!<'
		//| leavecritical='*!>'
		//| required_data_access=[aadl2::DataAccess] lock='!<'
		//| required_data_access=[aadl2::DataAccess] unlock='!>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entercritical='*!<'
		public Assignment getEntercriticalAssignment_0() { return cEntercriticalAssignment_0; }
		
		//'*!<'
		public Keyword getEntercriticalAsteriskExclamationMarkLessThanSignKeyword_0_0() { return cEntercriticalAsteriskExclamationMarkLessThanSignKeyword_0_0; }
		
		//leavecritical='*!>'
		public Assignment getLeavecriticalAssignment_1() { return cLeavecriticalAssignment_1; }
		
		//'*!>'
		public Keyword getLeavecriticalAsteriskExclamationMarkGreaterThanSignKeyword_1_0() { return cLeavecriticalAsteriskExclamationMarkGreaterThanSignKeyword_1_0; }
		
		//required_data_access=[aadl2::DataAccess] lock='!<'
		public Group getGroup_2() { return cGroup_2; }
		
		//required_data_access=[aadl2::DataAccess]
		public Assignment getRequired_data_accessAssignment_2_0() { return cRequired_data_accessAssignment_2_0; }
		
		//[aadl2::DataAccess]
		public CrossReference getRequired_data_accessDataAccessCrossReference_2_0_0() { return cRequired_data_accessDataAccessCrossReference_2_0_0; }
		
		//ID
		public RuleCall getRequired_data_accessDataAccessIDTerminalRuleCall_2_0_0_1() { return cRequired_data_accessDataAccessIDTerminalRuleCall_2_0_0_1; }
		
		//lock='!<'
		public Assignment getLockAssignment_2_1() { return cLockAssignment_2_1; }
		
		//'!<'
		public Keyword getLockExclamationMarkLessThanSignKeyword_2_1_0() { return cLockExclamationMarkLessThanSignKeyword_2_1_0; }
		
		//required_data_access=[aadl2::DataAccess] unlock='!>'
		public Group getGroup_3() { return cGroup_3; }
		
		//required_data_access=[aadl2::DataAccess]
		public Assignment getRequired_data_accessAssignment_3_0() { return cRequired_data_accessAssignment_3_0; }
		
		//[aadl2::DataAccess]
		public CrossReference getRequired_data_accessDataAccessCrossReference_3_0_0() { return cRequired_data_accessDataAccessCrossReference_3_0_0; }
		
		//ID
		public RuleCall getRequired_data_accessDataAccessIDTerminalRuleCall_3_0_0_1() { return cRequired_data_accessDataAccessIDTerminalRuleCall_3_0_0_1; }
		
		//unlock='!>'
		public Assignment getUnlockAssignment_3_1() { return cUnlockAssignment_3_1; }
		
		//'!>'
		public Keyword getUnlockExclamationMarkGreaterThanSignKeyword_3_1_0() { return cUnlockExclamationMarkGreaterThanSignKeyword_3_1_0; }
	}
	public class FreezePortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.FreezePort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrozenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFrozenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFrozenPortCrossReference_2_0 = (CrossReference)cFrozenAssignment_2.eContents().get(0);
		private final RuleCall cFrozenPortIDTerminalRuleCall_2_0_1 = (RuleCall)cFrozenPortCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFrozenAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFrozenPortCrossReference_3_1_0 = (CrossReference)cFrozenAssignment_3_1.eContents().get(0);
		private final RuleCall cFrozenPortIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFrozenPortCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////@Deprecated
		////Freeze:
		////  freeze='>>'  //added for BA2015, set `freeze' flag on the port
		////;
		////frozen_ports
		//@Deprecated
		//FreezePort:
		//   'frozen' '(' frozen+=[aadl2::Port|ID] ( ','  frozen+=[aadl2::Port|ID] )* ')'
		////  frozen_port=[aadl2::NamedElement|ID] '>>'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//'frozen' '(' frozen+=[aadl2::Port|ID] ( ','  frozen+=[aadl2::Port|ID] )* ')'
		public Group getGroup() { return cGroup; }
		
		//'frozen'
		public Keyword getFrozenKeyword_0() { return cFrozenKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//frozen+=[aadl2::Port|ID]
		public Assignment getFrozenAssignment_2() { return cFrozenAssignment_2; }
		
		//[aadl2::Port|ID]
		public CrossReference getFrozenPortCrossReference_2_0() { return cFrozenPortCrossReference_2_0; }
		
		//ID
		public RuleCall getFrozenPortIDTerminalRuleCall_2_0_1() { return cFrozenPortIDTerminalRuleCall_2_0_1; }
		
		//( ','  frozen+=[aadl2::Port|ID] )*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//frozen+=[aadl2::Port|ID]
		public Assignment getFrozenAssignment_3_1() { return cFrozenAssignment_3_1; }
		
		//[aadl2::Port|ID]
		public CrossReference getFrozenPortCrossReference_3_1_0() { return cFrozenPortCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFrozenPortIDTerminalRuleCall_3_1_0_1() { return cFrozenPortIDTerminalRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Pause");
		private final Assignment cPauseAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPausePauseKeyword_0 = (Keyword)cPauseAssignment.eContents().get(0);
		
		//@Deprecated
		//Pause:
		//  pause='pause'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pause='pause'
		public Assignment getPauseAssignment() { return cPauseAssignment; }
		
		//'pause'
		public Keyword getPausePauseKeyword_0() { return cPausePauseKeyword_0; }
	}
	public class ActionTimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ActionTimeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationBehaviorTimeParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//@Deprecated
		//ActionTimeout:
		//  'timeout' duration=BehaviorTime
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'timeout' duration=BehaviorTime
		public Group getGroup() { return cGroup; }
		
		//'timeout'
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//duration=BehaviorTime
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//BehaviorTime
		public RuleCall getDurationBehaviorTimeParserRuleCall_1_0() { return cDurationBehaviorTimeParserRuleCall_1_0; }
	}
	public class BehaviorTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BehaviorTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cQuantityAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cQuantityQuantityParserRuleCall_0_0 = (RuleCall)cQuantityAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cValueValueNameParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cUnitAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final CrossReference cUnitUnitNameCrossReference_1_1_0_0 = (CrossReference)cUnitAssignment_1_1_0.eContents().get(0);
		private final RuleCall cUnitUnitNameIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cUnitUnitNameCrossReference_1_1_0_0.eContents().get(1);
		private final Assignment cScalarAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cScalarScalarKeyword_1_1_1_0 = (Keyword)cScalarAssignment_1_1_1.eContents().get(0);
		private final Assignment cWholeAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cWholeWholeKeyword_1_1_2_0 = (Keyword)cWholeAssignment_1_1_2.eContents().get(0);
		
		////behavior_time
		//BehaviorTime:
		//    quantity=Quantity
		//    |
		//    value=ValueName  (unit=[UnitName] | scalar='scalar' | whole='whole' )?
		////    |
		////    duration=ParenthesizedSubexpression // (unit=[UnitName] | scalar?='scalar' | whole?='whole' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//quantity=Quantity
		//|
		//value=ValueName  (unit=[UnitName] | scalar='scalar' | whole='whole' )?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//quantity=Quantity
		public Assignment getQuantityAssignment_0() { return cQuantityAssignment_0; }
		
		//Quantity
		public RuleCall getQuantityQuantityParserRuleCall_0_0() { return cQuantityQuantityParserRuleCall_0_0; }
		
		//value=ValueName  (unit=[UnitName] | scalar='scalar' | whole='whole' )?
		public Group getGroup_1() { return cGroup_1; }
		
		//value=ValueName
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//ValueName
		public RuleCall getValueValueNameParserRuleCall_1_0_0() { return cValueValueNameParserRuleCall_1_0_0; }
		
		//(unit=[UnitName] | scalar='scalar' | whole='whole' )?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//unit=[UnitName]
		public Assignment getUnitAssignment_1_1_0() { return cUnitAssignment_1_1_0; }
		
		//[UnitName]
		public CrossReference getUnitUnitNameCrossReference_1_1_0_0() { return cUnitUnitNameCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getUnitUnitNameIDTerminalRuleCall_1_1_0_0_1() { return cUnitUnitNameIDTerminalRuleCall_1_1_0_0_1; }
		
		//scalar='scalar'
		public Assignment getScalarAssignment_1_1_1() { return cScalarAssignment_1_1_1; }
		
		//'scalar'
		public Keyword getScalarScalarKeyword_1_1_1_0() { return cScalarScalarKeyword_1_1_1_0; }
		
		//whole='whole'
		public Assignment getWholeAssignment_1_1_2() { return cWholeAssignment_1_1_2; }
		
		//'whole'
		public Keyword getWholeWholeKeyword_1_1_2_0() { return cWholeWholeKeyword_1_1_2_0; }
	}
	public class ExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Exception");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cCodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeNUMBERTerminalRuleCall_2_0 = (RuleCall)cCodeAssignment_2.eContents().get(0);
		
		/////////////////////////////////////  EXCEPTION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//@Exported
		//Exception:
		//    name=ID description=STRING ( code=NUMBER )?  //add check for natural number
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID description=STRING ( code=NUMBER )?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
		
		//( code=NUMBER )?
		public Assignment getCodeAssignment_2() { return cCodeAssignment_2; }
		
		//NUMBER
		public RuleCall getCodeNUMBERTerminalRuleCall_2_0() { return cCodeNUMBERTerminalRuleCall_2_0; }
	}
	public class GhostVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.GhostVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGhostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGvGhostVariableParserRuleCall_2_0 = (RuleCall)cGvAssignment_2.eContents().get(0);
		
		///////////////////////////////////////   ASSERTION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//GhostVariables
		//  :
		//      'ghost' 'variables'
		//      gv+=GhostVariable+
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ghost' 'variables'
		//gv+=GhostVariable+
		public Group getGroup() { return cGroup; }
		
		//'ghost'
		public Keyword getGhostKeyword_0() { return cGhostKeyword_0; }
		
		//'variables'
		public Keyword getVariablesKeyword_1() { return cVariablesKeyword_1; }
		
		//gv+=GhostVariable+
		public Assignment getGvAssignment_2() { return cGvAssignment_2; }
		
		//GhostVariable
		public RuleCall getGvGhostVariableParserRuleCall_2_0() { return cGvGhostVariableParserRuleCall_2_0; }
	}
	public class GhostVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.GhostVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTildeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTodTypeOrReferenceParserRuleCall_3_0 = (RuleCall)cTodAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAssnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAssnAssertionParserRuleCall_4_1_0 = (RuleCall)cAssnAssignment_4_1.eContents().get(0);
		
		//@Exported
		//GhostVariable:
		// 'def'  name=ID '~' tod=TypeOrReference ( ':' assn=Assertion )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'def'  name=ID '~' tod=TypeOrReference ( ':' assn=Assertion )?
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'~'
		public Keyword getTildeKeyword_2() { return cTildeKeyword_2; }
		
		//tod=TypeOrReference
		public Assignment getTodAssignment_3() { return cTodAssignment_3; }
		
		//TypeOrReference
		public RuleCall getTodTypeOrReferenceParserRuleCall_3_0() { return cTodTypeOrReferenceParserRuleCall_3_0; }
		
		//( ':' assn=Assertion )?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//assn=Assertion
		public Assignment getAssnAssignment_4_1() { return cAssnAssignment_4_1; }
		
		//Assertion
		public RuleCall getAssnAssertionParserRuleCall_4_1_0() { return cAssnAssertionParserRuleCall_4_1_0; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Assertion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNamedassertionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNamedassertionNamedAssertionParserRuleCall_0_0 = (RuleCall)cNamedassertionAssignment_0.eContents().get(0);
		private final Assignment cNamelessassertionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNamelessassertionNamelessAssertionParserRuleCall_1_0 = (RuleCall)cNamelessassertionAssignment_1.eContents().get(0);
		private final Assignment cNamelessfunctionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNamelessfunctionNamelessFunctionParserRuleCall_2_0 = (RuleCall)cNamelessfunctionAssignment_2.eContents().get(0);
		private final Assignment cNamelessenumerationAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNamelessenumerationNamelessEnumerationParserRuleCall_3_0 = (RuleCall)cNamelessenumerationAssignment_3.eContents().get(0);
		
		////assertion
		//Assertion :
		//    namedassertion=NamedAssertion |
		//    namelessassertion=NamelessAssertion |
		//    namelessfunction=NamelessFunction |
		//    namelessenumeration=NamelessEnumeration
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//namedassertion=NamedAssertion |
		//namelessassertion=NamelessAssertion |
		//namelessfunction=NamelessFunction |
		//namelessenumeration=NamelessEnumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//namedassertion=NamedAssertion
		public Assignment getNamedassertionAssignment_0() { return cNamedassertionAssignment_0; }
		
		//NamedAssertion
		public RuleCall getNamedassertionNamedAssertionParserRuleCall_0_0() { return cNamedassertionNamedAssertionParserRuleCall_0_0; }
		
		//namelessassertion=NamelessAssertion
		public Assignment getNamelessassertionAssignment_1() { return cNamelessassertionAssignment_1; }
		
		//NamelessAssertion
		public RuleCall getNamelessassertionNamelessAssertionParserRuleCall_1_0() { return cNamelessassertionNamelessAssertionParserRuleCall_1_0; }
		
		//namelessfunction=NamelessFunction
		public Assignment getNamelessfunctionAssignment_2() { return cNamelessfunctionAssignment_2; }
		
		//NamelessFunction
		public RuleCall getNamelessfunctionNamelessFunctionParserRuleCall_2_0() { return cNamelessfunctionNamelessFunctionParserRuleCall_2_0; }
		
		//namelessenumeration=NamelessEnumeration
		public Assignment getNamelessenumerationAssignment_3() { return cNamelessenumerationAssignment_3; }
		
		//NamelessEnumeration
		public RuleCall getNamelessenumerationNamelessEnumerationParserRuleCall_3_0() { return cNamelessenumerationNamelessEnumerationParserRuleCall_3_0; }
	}
	public class NamedAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NamedAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cFormalsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cFormalsVariableListParserRuleCall_3_0_0_0 = (RuleCall)cFormalsAssignment_3_0_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_0_1_0 = (Group)cAlternatives_3_0_1.eContents().get(0);
		private final Assignment cPredAssignment_3_0_1_0_0 = (Assignment)cGroup_3_0_1_0.eContents().get(0);
		private final Keyword cPredColonKeyword_3_0_1_0_0_0 = (Keyword)cPredAssignment_3_0_1_0_0.eContents().get(0);
		private final Assignment cPredicateAssignment_3_0_1_0_1 = (Assignment)cGroup_3_0_1_0.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_3_0_1_0_1_0 = (RuleCall)cPredicateAssignment_3_0_1_0_1.eContents().get(0);
		private final Group cGroup_3_0_1_1 = (Group)cAlternatives_3_0_1.eContents().get(1);
		private final Keyword cReturnsKeyword_3_0_1_1_0 = (Keyword)cGroup_3_0_1_1.eContents().get(0);
		private final Assignment cTodAssignment_3_0_1_1_1 = (Assignment)cGroup_3_0_1_1.eContents().get(1);
		private final RuleCall cTodTypeOrReferenceParserRuleCall_3_0_1_1_1_0 = (RuleCall)cTodAssignment_3_0_1_1_1.eContents().get(0);
		private final Assignment cFuncAssignment_3_0_1_1_2 = (Assignment)cGroup_3_0_1_1.eContents().get(2);
		private final Keyword cFuncColonEqualsSignKeyword_3_0_1_1_2_0 = (Keyword)cFuncAssignment_3_0_1_1_2.eContents().get(0);
		private final Assignment cFunctionvalueAssignment_3_0_1_1_3 = (Assignment)cGroup_3_0_1_1.eContents().get(3);
		private final RuleCall cFunctionvalueAssertionFunctionValueParserRuleCall_3_0_1_1_3_0 = (RuleCall)cFunctionvalueAssignment_3_0_1_1_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cAssertionvariableAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cAssertionvariableIDTerminalRuleCall_3_1_0_0 = (RuleCall)cAssertionvariableAssignment_3_1_0.eContents().get(0);
		private final Keyword cTildeKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cEnumerationTypeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cEnumerationTypeTypeDeclarationCrossReference_3_1_2_0 = (CrossReference)cEnumerationTypeAssignment_3_1_2.eContents().get(0);
		private final RuleCall cEnumerationTypeTypeDeclarationIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cEnumerationTypeTypeDeclarationCrossReference_3_1_2_0.eContents().get(1);
		private final Assignment cEnumerAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final Keyword cEnumerPlusSignEqualsSignGreaterThanSignKeyword_3_1_3_0 = (Keyword)cEnumerAssignment_3_1_3.eContents().get(0);
		private final Assignment cEnumerationAssignment_3_1_4 = (Assignment)cGroup_3_1.eContents().get(4);
		private final RuleCall cEnumerationAssertionEnumerationParserRuleCall_3_1_4_0 = (RuleCall)cEnumerationAssignment_3_1_4.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//@Exported
		//NamedAssertion:
		//    '<<'
		//    name=ID ':'
		//    (
		//        formals=VariableList?
		//          ( //assertion_predicate
		//          pred?=':'  predicate=Predicate
		//          | //assertion_function
		//          'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		//          )
		//        | //assertion_enumeration
		//        assertionvariable=ID '~' enumerationType=[TypeDeclaration] enumer?='+=>' enumeration=AssertionEnumeration
		//    )
		//    '>>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<<'
		//name=ID ':'
		//(
		//    formals=VariableList?
		//      ( //assertion_predicate
		//      pred?=':'  predicate=Predicate
		//      | //assertion_function
		//      'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		//      )
		//    | //assertion_enumeration
		//    assertionvariable=ID '~' enumerationType=[TypeDeclaration] enumer?='+=>' enumeration=AssertionEnumeration
		//)
		//'>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(
		//    formals=VariableList?
		//      ( //assertion_predicate
		//      pred?=':'  predicate=Predicate
		//      | //assertion_function
		//      'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		//      )
		//    | //assertion_enumeration
		//    assertionvariable=ID '~' enumerationType=[TypeDeclaration] enumer?='+=>' enumeration=AssertionEnumeration
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//formals=VariableList?
		//  ( //assertion_predicate
		//  pred?=':'  predicate=Predicate
		//  | //assertion_function
		//  'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		//  )
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//formals=VariableList?
		public Assignment getFormalsAssignment_3_0_0() { return cFormalsAssignment_3_0_0; }
		
		//VariableList
		public RuleCall getFormalsVariableListParserRuleCall_3_0_0_0() { return cFormalsVariableListParserRuleCall_3_0_0_0; }
		
		//( //assertion_predicate
		//pred?=':'  predicate=Predicate
		//| //assertion_function
		//'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		//)
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }
		
		////assertion_predicate
		//         pred?=':'  predicate=Predicate
		public Group getGroup_3_0_1_0() { return cGroup_3_0_1_0; }
		
		////assertion_predicate
		//         pred?=':'
		public Assignment getPredAssignment_3_0_1_0_0() { return cPredAssignment_3_0_1_0_0; }
		
		//':'
		public Keyword getPredColonKeyword_3_0_1_0_0_0() { return cPredColonKeyword_3_0_1_0_0_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_3_0_1_0_1() { return cPredicateAssignment_3_0_1_0_1; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_3_0_1_0_1_0() { return cPredicatePredicateParserRuleCall_3_0_1_0_1_0; }
		
		////assertion_function
		//         'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
		public Group getGroup_3_0_1_1() { return cGroup_3_0_1_1; }
		
		////assertion_function
		//         'returns'
		public Keyword getReturnsKeyword_3_0_1_1_0() { return cReturnsKeyword_3_0_1_1_0; }
		
		//tod=TypeOrReference
		public Assignment getTodAssignment_3_0_1_1_1() { return cTodAssignment_3_0_1_1_1; }
		
		//TypeOrReference
		public RuleCall getTodTypeOrReferenceParserRuleCall_3_0_1_1_1_0() { return cTodTypeOrReferenceParserRuleCall_3_0_1_1_1_0; }
		
		//func?=':='
		public Assignment getFuncAssignment_3_0_1_1_2() { return cFuncAssignment_3_0_1_1_2; }
		
		//':='
		public Keyword getFuncColonEqualsSignKeyword_3_0_1_1_2_0() { return cFuncColonEqualsSignKeyword_3_0_1_1_2_0; }
		
		//functionvalue=AssertionFunctionValue
		public Assignment getFunctionvalueAssignment_3_0_1_1_3() { return cFunctionvalueAssignment_3_0_1_1_3; }
		
		//AssertionFunctionValue
		public RuleCall getFunctionvalueAssertionFunctionValueParserRuleCall_3_0_1_1_3_0() { return cFunctionvalueAssertionFunctionValueParserRuleCall_3_0_1_1_3_0; }
		
		////assertion_enumeration
		//       assertionvariable=ID '~' enumerationType=[TypeDeclaration] enumer?='+=>' enumeration=AssertionEnumeration
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		////assertion_enumeration
		//       assertionvariable=ID
		public Assignment getAssertionvariableAssignment_3_1_0() { return cAssertionvariableAssignment_3_1_0; }
		
		//ID
		public RuleCall getAssertionvariableIDTerminalRuleCall_3_1_0_0() { return cAssertionvariableIDTerminalRuleCall_3_1_0_0; }
		
		//'~'
		public Keyword getTildeKeyword_3_1_1() { return cTildeKeyword_3_1_1; }
		
		//enumerationType=[TypeDeclaration]
		public Assignment getEnumerationTypeAssignment_3_1_2() { return cEnumerationTypeAssignment_3_1_2; }
		
		//[TypeDeclaration]
		public CrossReference getEnumerationTypeTypeDeclarationCrossReference_3_1_2_0() { return cEnumerationTypeTypeDeclarationCrossReference_3_1_2_0; }
		
		//ID
		public RuleCall getEnumerationTypeTypeDeclarationIDTerminalRuleCall_3_1_2_0_1() { return cEnumerationTypeTypeDeclarationIDTerminalRuleCall_3_1_2_0_1; }
		
		//enumer?='+=>'
		public Assignment getEnumerAssignment_3_1_3() { return cEnumerAssignment_3_1_3; }
		
		//'+=>'
		public Keyword getEnumerPlusSignEqualsSignGreaterThanSignKeyword_3_1_3_0() { return cEnumerPlusSignEqualsSignGreaterThanSignKeyword_3_1_3_0; }
		
		//enumeration=AssertionEnumeration
		public Assignment getEnumerationAssignment_3_1_4() { return cEnumerationAssignment_3_1_4; }
		
		//AssertionEnumeration
		public RuleCall getEnumerationAssertionEnumerationParserRuleCall_3_1_4_0() { return cEnumerationAssertionEnumerationParserRuleCall_3_1_4_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
	}
	public class NamelessAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NamelessAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////assertion_predicate
		//NamelessAssertion:  '<<' predicate=Predicate '>>' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'<<' predicate=Predicate '>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0() { return cPredicatePredicateParserRuleCall_1_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}
	public class NamelessFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NamelessFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cReturnsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTodTypeOrReferenceParserRuleCall_2_0 = (RuleCall)cTodAssignment_2.eContents().get(0);
		private final Assignment cFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFuncColonEqualsSignKeyword_3_0 = (Keyword)cFuncAssignment_3.eContents().get(0);
		private final Assignment cFunctionvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionvalueAssertionFunctionValueParserRuleCall_4_0 = (RuleCall)cFunctionvalueAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////assertion_)function
		//NamelessFunction:  '<<' 'returns' tod=TypeOrReference func?=':=' functionvalue=AssertionFunctionValue '>>' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'<<' 'returns' tod=TypeOrReference func?=':=' functionvalue=AssertionFunctionValue '>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//'returns'
		public Keyword getReturnsKeyword_1() { return cReturnsKeyword_1; }
		
		//tod=TypeOrReference
		public Assignment getTodAssignment_2() { return cTodAssignment_2; }
		
		//TypeOrReference
		public RuleCall getTodTypeOrReferenceParserRuleCall_2_0() { return cTodTypeOrReferenceParserRuleCall_2_0; }
		
		//func?=':='
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }
		
		//':='
		public Keyword getFuncColonEqualsSignKeyword_3_0() { return cFuncColonEqualsSignKeyword_3_0; }
		
		//functionvalue=AssertionFunctionValue
		public Assignment getFunctionvalueAssignment_4() { return cFunctionvalueAssignment_4; }
		
		//AssertionFunctionValue
		public RuleCall getFunctionvalueAssertionFunctionValueParserRuleCall_4_0() { return cFunctionvalueAssertionFunctionValueParserRuleCall_4_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_5() { return cGreaterThanSignGreaterThanSignKeyword_5; }
	}
	public class NamelessEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NamelessEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPlusSignEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnumerationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumerationInvocationParserRuleCall_2_0 = (RuleCall)cEnumerationAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////assertion_enumeration
		//NamelessEnumeration:  '<<' '+=>' enumeration=Invocation '>>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<<' '+=>' enumeration=Invocation '>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//'+=>'
		public Keyword getPlusSignEqualsSignGreaterThanSignKeyword_1() { return cPlusSignEqualsSignGreaterThanSignKeyword_1; }
		
		//enumeration=Invocation
		public Assignment getEnumerationAssignment_2() { return cEnumerationAssignment_2; }
		
		//Invocation
		public RuleCall getEnumerationInvocationParserRuleCall_2_0() { return cEnumerationInvocationParserRuleCall_2_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_3() { return cGreaterThanSignGreaterThanSignKeyword_3; }
	}
	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Predicate");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////////////////////////////////   EXPRESSION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//Predicate:  //used within Assertions
		//    Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////used within Assertions
		//  Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class AssertionNumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertionNumericExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AssertionNumericExpression:  //used within Assertions
		//    Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////used within Assertions
		//  Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BooleanExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExpression:  //used in actions
		//    Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////used in actions
		//  Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NumericExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NumericExpression:  //used in actions
		//    Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////used in actions
		//  Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAllAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAllUniversalQuantificationParserRuleCall_0_0 = (RuleCall)cAllAssignment_0.eContents().get(0);
		private final Assignment cExistsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExistsExistentialQuantificationParserRuleCall_1_0 = (RuleCall)cExistsAssignment_1.eContents().get(0);
		private final Assignment cSumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSumSumQuantificationParserRuleCall_2_0 = (RuleCall)cSumAssignment_2.eContents().get(0);
		private final Assignment cProductAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cProductProductQuantificationParserRuleCall_3_0 = (RuleCall)cProductAssignment_3.eContents().get(0);
		private final Assignment cNumberofAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNumberofCountingQuantificationParserRuleCall_4_0 = (RuleCall)cNumberofAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cLAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLDisjunctionParserRuleCall_5_0_0 = (RuleCall)cLAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_1_0 = (Alternatives)cGroup_5_1.eContents().get(0);
		private final Assignment cSymAssignment_5_1_0_0 = (Assignment)cAlternatives_5_1_0.eContents().get(0);
		private final Keyword cSymIffKeyword_5_1_0_0_0 = (Keyword)cSymAssignment_5_1_0_0.eContents().get(0);
		private final Assignment cSymAssignment_5_1_0_1 = (Assignment)cAlternatives_5_1_0.eContents().get(1);
		private final Keyword cSymImpliesKeyword_5_1_0_1_0 = (Keyword)cSymAssignment_5_1_0_1.eContents().get(0);
		private final Assignment cRAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cRDisjunctionParserRuleCall_5_1_1_0 = (RuleCall)cRAssignment_5_1_1.eContents().get(0);
		
		//Expression:
		//  all=UniversalQuantification
		//  | exists=ExistentialQuantification
		//  | sum=SumQuantification
		//  | product=ProductQuantification
		//  | numberof=CountingQuantification
		//  | l=Disjunction ( (sym='iff' | sym='implies') r=Disjunction)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//all=UniversalQuantification
		//| exists=ExistentialQuantification
		//| sum=SumQuantification
		//| product=ProductQuantification
		//| numberof=CountingQuantification
		//| l=Disjunction ( (sym='iff' | sym='implies') r=Disjunction)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//all=UniversalQuantification
		public Assignment getAllAssignment_0() { return cAllAssignment_0; }
		
		//UniversalQuantification
		public RuleCall getAllUniversalQuantificationParserRuleCall_0_0() { return cAllUniversalQuantificationParserRuleCall_0_0; }
		
		//exists=ExistentialQuantification
		public Assignment getExistsAssignment_1() { return cExistsAssignment_1; }
		
		//ExistentialQuantification
		public RuleCall getExistsExistentialQuantificationParserRuleCall_1_0() { return cExistsExistentialQuantificationParserRuleCall_1_0; }
		
		//sum=SumQuantification
		public Assignment getSumAssignment_2() { return cSumAssignment_2; }
		
		//SumQuantification
		public RuleCall getSumSumQuantificationParserRuleCall_2_0() { return cSumSumQuantificationParserRuleCall_2_0; }
		
		//product=ProductQuantification
		public Assignment getProductAssignment_3() { return cProductAssignment_3; }
		
		//ProductQuantification
		public RuleCall getProductProductQuantificationParserRuleCall_3_0() { return cProductProductQuantificationParserRuleCall_3_0; }
		
		//numberof=CountingQuantification
		public Assignment getNumberofAssignment_4() { return cNumberofAssignment_4; }
		
		//CountingQuantification
		public RuleCall getNumberofCountingQuantificationParserRuleCall_4_0() { return cNumberofCountingQuantificationParserRuleCall_4_0; }
		
		//l=Disjunction ( (sym='iff' | sym='implies') r=Disjunction)?
		public Group getGroup_5() { return cGroup_5; }
		
		//l=Disjunction
		public Assignment getLAssignment_5_0() { return cLAssignment_5_0; }
		
		//Disjunction
		public RuleCall getLDisjunctionParserRuleCall_5_0_0() { return cLDisjunctionParserRuleCall_5_0_0; }
		
		//( (sym='iff' | sym='implies') r=Disjunction)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//(sym='iff' | sym='implies')
		public Alternatives getAlternatives_5_1_0() { return cAlternatives_5_1_0; }
		
		//sym='iff'
		public Assignment getSymAssignment_5_1_0_0() { return cSymAssignment_5_1_0_0; }
		
		//'iff'
		public Keyword getSymIffKeyword_5_1_0_0_0() { return cSymIffKeyword_5_1_0_0_0; }
		
		//sym='implies'
		public Assignment getSymAssignment_5_1_0_1() { return cSymAssignment_5_1_0_1; }
		
		//'implies'
		public Keyword getSymImpliesKeyword_5_1_0_1_0() { return cSymImpliesKeyword_5_1_0_1_0; }
		
		//r=Disjunction
		public Assignment getRAssignment_5_1_1() { return cRAssignment_5_1_1; }
		
		//Disjunction
		public RuleCall getRDisjunctionParserRuleCall_5_1_1_0() { return cRDisjunctionParserRuleCall_5_1_1_0; }
	}
	public class DisjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Disjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLConjunctionParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSymOrKeyword_1_0_0_0 = (Keyword)cSymAssignment_1_0_0.eContents().get(0);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRConjunctionParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cOrKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRConjunctionParserRuleCall_1_0_2_1_0 = (RuleCall)cRAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOrKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSymAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cSymElseKeyword_1_1_1_0 = (Keyword)cSymAssignment_1_1_1.eContents().get(0);
		private final Assignment cRAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRConjunctionParserRuleCall_1_1_2_0 = (RuleCall)cRAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cOrKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Keyword cElseKeyword_1_1_3_1 = (Keyword)cGroup_1_1_3.eContents().get(1);
		private final Assignment cRAssignment_1_1_3_2 = (Assignment)cGroup_1_1_3.eContents().get(2);
		private final RuleCall cRConjunctionParserRuleCall_1_1_3_2_0 = (RuleCall)cRAssignment_1_1_3_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cSymAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cSymXorKeyword_1_2_0_0 = (Keyword)cSymAssignment_1_2_0.eContents().get(0);
		private final Assignment cRAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRConjunctionParserRuleCall_1_2_1_0 = (RuleCall)cRAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cXorKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cRAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cRConjunctionParserRuleCall_1_2_2_1_0 = (RuleCall)cRAssignment_1_2_2_1.eContents().get(0);
		
		//Disjunction:
		//  l=Conjunction
		//     (
		//     ( sym='or' r+=Conjunction ( 'or' r+=Conjunction )*)
		//     |
		//     ( 'or' sym='else' r+=Conjunction ( 'or' 'else' r+=Conjunction )*)
		//     |
		//     ( sym='xor' r+=Conjunction ( 'xor' r+=Conjunction )*)
		//     )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Conjunction
		//   (
		//   ( sym='or' r+=Conjunction ( 'or' r+=Conjunction )*)
		//   |
		//   ( 'or' sym='else' r+=Conjunction ( 'or' 'else' r+=Conjunction )*)
		//   |
		//   ( sym='xor' r+=Conjunction ( 'xor' r+=Conjunction )*)
		//   )?
		public Group getGroup() { return cGroup; }
		
		//l=Conjunction
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Conjunction
		public RuleCall getLConjunctionParserRuleCall_0_0() { return cLConjunctionParserRuleCall_0_0; }
		
		//(
		//( sym='or' r+=Conjunction ( 'or' r+=Conjunction )*)
		//|
		//( 'or' sym='else' r+=Conjunction ( 'or' 'else' r+=Conjunction )*)
		//|
		//( sym='xor' r+=Conjunction ( 'xor' r+=Conjunction )*)
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( sym='or' r+=Conjunction ( 'or' r+=Conjunction )*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym='or'
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//'or'
		public Keyword getSymOrKeyword_1_0_0_0() { return cSymOrKeyword_1_0_0_0; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_0_1_0() { return cRConjunctionParserRuleCall_1_0_1_0; }
		
		//( 'or' r+=Conjunction )*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'or'
		public Keyword getOrKeyword_1_0_2_0() { return cOrKeyword_1_0_2_0; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_0_2_1() { return cRAssignment_1_0_2_1; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_0_2_1_0() { return cRConjunctionParserRuleCall_1_0_2_1_0; }
		
		//( 'or' sym='else' r+=Conjunction ( 'or' 'else' r+=Conjunction )*)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'or'
		public Keyword getOrKeyword_1_1_0() { return cOrKeyword_1_1_0; }
		
		//sym='else'
		public Assignment getSymAssignment_1_1_1() { return cSymAssignment_1_1_1; }
		
		//'else'
		public Keyword getSymElseKeyword_1_1_1_0() { return cSymElseKeyword_1_1_1_0; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_1_2() { return cRAssignment_1_1_2; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_1_2_0() { return cRConjunctionParserRuleCall_1_1_2_0; }
		
		//( 'or' 'else' r+=Conjunction )*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'or'
		public Keyword getOrKeyword_1_1_3_0() { return cOrKeyword_1_1_3_0; }
		
		//'else'
		public Keyword getElseKeyword_1_1_3_1() { return cElseKeyword_1_1_3_1; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_1_3_2() { return cRAssignment_1_1_3_2; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_1_3_2_0() { return cRConjunctionParserRuleCall_1_1_3_2_0; }
		
		//( sym='xor' r+=Conjunction ( 'xor' r+=Conjunction )*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//sym='xor'
		public Assignment getSymAssignment_1_2_0() { return cSymAssignment_1_2_0; }
		
		//'xor'
		public Keyword getSymXorKeyword_1_2_0_0() { return cSymXorKeyword_1_2_0_0; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_2_1() { return cRAssignment_1_2_1; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_2_1_0() { return cRConjunctionParserRuleCall_1_2_1_0; }
		
		//( 'xor' r+=Conjunction )*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//'xor'
		public Keyword getXorKeyword_1_2_2_0() { return cXorKeyword_1_2_2_0; }
		
		//r+=Conjunction
		public Assignment getRAssignment_1_2_2_1() { return cRAssignment_1_2_2_1; }
		
		//Conjunction
		public RuleCall getRConjunctionParserRuleCall_1_2_2_1_0() { return cRConjunctionParserRuleCall_1_2_2_1_0; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLRelationParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSymAndKeyword_1_0_0_0 = (Keyword)cSymAssignment_1_0_0.eContents().get(0);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRRelationParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cAndKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRRelationParserRuleCall_1_0_2_1_0 = (RuleCall)cRAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSymAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cSymThenKeyword_1_1_1_0 = (Keyword)cSymAssignment_1_1_1.eContents().get(0);
		private final Assignment cRAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRRelationParserRuleCall_1_1_2_0 = (RuleCall)cRAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cAndKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Keyword cThenKeyword_1_1_3_1 = (Keyword)cGroup_1_1_3.eContents().get(1);
		private final Assignment cRAssignment_1_1_3_2 = (Assignment)cGroup_1_1_3.eContents().get(2);
		private final RuleCall cRRelationParserRuleCall_1_1_3_2_0 = (RuleCall)cRAssignment_1_1_3_2.eContents().get(0);
		
		//Conjunction:
		//  l=Relation
		//    ( ( sym='and' r+=Relation ( 'and' r+=Relation )* )
		//    |    ( 'and' sym='then' r+=Relation ( 'and' 'then' r+=Relation )* )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Relation
		//  ( ( sym='and' r+=Relation ( 'and' r+=Relation )* )
		//  |    ( 'and' sym='then' r+=Relation ( 'and' 'then' r+=Relation )* )
		//  )?
		public Group getGroup() { return cGroup; }
		
		//l=Relation
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Relation
		public RuleCall getLRelationParserRuleCall_0_0() { return cLRelationParserRuleCall_0_0; }
		
		//( ( sym='and' r+=Relation ( 'and' r+=Relation )* )
		//|    ( 'and' sym='then' r+=Relation ( 'and' 'then' r+=Relation )* )
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( sym='and' r+=Relation ( 'and' r+=Relation )* )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym='and'
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//'and'
		public Keyword getSymAndKeyword_1_0_0_0() { return cSymAndKeyword_1_0_0_0; }
		
		//r+=Relation
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//Relation
		public RuleCall getRRelationParserRuleCall_1_0_1_0() { return cRRelationParserRuleCall_1_0_1_0; }
		
		//( 'and' r+=Relation )*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'and'
		public Keyword getAndKeyword_1_0_2_0() { return cAndKeyword_1_0_2_0; }
		
		//r+=Relation
		public Assignment getRAssignment_1_0_2_1() { return cRAssignment_1_0_2_1; }
		
		//Relation
		public RuleCall getRRelationParserRuleCall_1_0_2_1_0() { return cRRelationParserRuleCall_1_0_2_1_0; }
		
		//( 'and' sym='then' r+=Relation ( 'and' 'then' r+=Relation )* )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//sym='then'
		public Assignment getSymAssignment_1_1_1() { return cSymAssignment_1_1_1; }
		
		//'then'
		public Keyword getSymThenKeyword_1_1_1_0() { return cSymThenKeyword_1_1_1_0; }
		
		//r+=Relation
		public Assignment getRAssignment_1_1_2() { return cRAssignment_1_1_2; }
		
		//Relation
		public RuleCall getRRelationParserRuleCall_1_1_2_0() { return cRRelationParserRuleCall_1_1_2_0; }
		
		//( 'and' 'then' r+=Relation )*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'and'
		public Keyword getAndKeyword_1_1_3_0() { return cAndKeyword_1_1_3_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1_3_1() { return cThenKeyword_1_1_3_1; }
		
		//r+=Relation
		public Assignment getRAssignment_1_1_3_2() { return cRAssignment_1_1_3_2; }
		
		//Relation
		public RuleCall getRRelationParserRuleCall_1_1_3_2_0() { return cRRelationParserRuleCall_1_1_3_2_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLAddSubParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cSymAlternatives_1_0_0_0 = (Alternatives)cSymAssignment_1_0_0.eContents().get(0);
		private final Keyword cSymEqualsSignKeyword_1_0_0_0_0 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(0);
		private final Keyword cSymLessThanSignGreaterThanSignKeyword_1_0_0_0_1 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(1);
		private final Keyword cSymLessThanSignKeyword_1_0_0_0_2 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(2);
		private final Keyword cSymLessThanSignEqualsSignKeyword_1_0_0_0_3 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(3);
		private final Keyword cSymGreaterThanSignEqualsSignKeyword_1_0_0_0_4 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(4);
		private final Keyword cSymGreaterThanSignKeyword_1_0_0_0_5 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(5);
		private final Keyword cSymExclamationMarkEqualsSignKeyword_1_0_0_0_6 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(6);
		private final Keyword cSymPlusSignEqualsSignKeyword_1_0_0_0_7 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(7);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRAddSubParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cInAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cInInKeyword_1_1_0_0 = (Keyword)cInAssignment_1_1_0.eContents().get(0);
		private final Assignment cRangeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_1_1_1_0 = (RuleCall)cRangeAssignment_1_1_1.eContents().get(0);
		
		//Relation:
		//    l=AddSub
		//    (
		//    ( sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=') r=AddSub )
		//    |
		//    ( in='in'    range=Range )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=AddSub
		//(
		//( sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=') r=AddSub )
		//|
		//( in='in'    range=Range )
		//)?
		public Group getGroup() { return cGroup; }
		
		//l=AddSub
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//AddSub
		public RuleCall getLAddSubParserRuleCall_0_0() { return cLAddSubParserRuleCall_0_0; }
		
		//(
		//( sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=') r=AddSub )
		//|
		//( in='in'    range=Range )
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=') r=AddSub )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=')
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=')
		public Alternatives getSymAlternatives_1_0_0_0() { return cSymAlternatives_1_0_0_0; }
		
		//'='
		public Keyword getSymEqualsSignKeyword_1_0_0_0_0() { return cSymEqualsSignKeyword_1_0_0_0_0; }
		
		//'<>'
		public Keyword getSymLessThanSignGreaterThanSignKeyword_1_0_0_0_1() { return cSymLessThanSignGreaterThanSignKeyword_1_0_0_0_1; }
		
		//'<'
		public Keyword getSymLessThanSignKeyword_1_0_0_0_2() { return cSymLessThanSignKeyword_1_0_0_0_2; }
		
		//'<='
		public Keyword getSymLessThanSignEqualsSignKeyword_1_0_0_0_3() { return cSymLessThanSignEqualsSignKeyword_1_0_0_0_3; }
		
		//'>='
		public Keyword getSymGreaterThanSignEqualsSignKeyword_1_0_0_0_4() { return cSymGreaterThanSignEqualsSignKeyword_1_0_0_0_4; }
		
		//'>'
		public Keyword getSymGreaterThanSignKeyword_1_0_0_0_5() { return cSymGreaterThanSignKeyword_1_0_0_0_5; }
		
		//'!='
		public Keyword getSymExclamationMarkEqualsSignKeyword_1_0_0_0_6() { return cSymExclamationMarkEqualsSignKeyword_1_0_0_0_6; }
		
		//'+='
		public Keyword getSymPlusSignEqualsSignKeyword_1_0_0_0_7() { return cSymPlusSignEqualsSignKeyword_1_0_0_0_7; }
		
		//r=AddSub
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//AddSub
		public RuleCall getRAddSubParserRuleCall_1_0_1_0() { return cRAddSubParserRuleCall_1_0_1_0; }
		
		//( in='in'	range=Range )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//in='in'
		public Assignment getInAssignment_1_1_0() { return cInAssignment_1_1_0; }
		
		//'in'
		public Keyword getInInKeyword_1_1_0_0() { return cInInKeyword_1_1_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_1_1_1() { return cRangeAssignment_1_1_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_1_1_1_0() { return cRangeRangeParserRuleCall_1_1_1_0; }
	}
	public class AddSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AddSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLMultDivParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSymPlusSignKeyword_1_0_0_0 = (Keyword)cSymAssignment_1_0_0.eContents().get(0);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRMultDivParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRMultDivParserRuleCall_1_0_2_1_0 = (RuleCall)cRAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSymAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cSymHyphenMinusKeyword_1_1_0_0 = (Keyword)cSymAssignment_1_1_0.eContents().get(0);
		private final Assignment cRAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRMultDivParserRuleCall_1_1_1_0 = (RuleCall)cRAssignment_1_1_1.eContents().get(0);
		
		////add_subtract
		//AddSub:
		//    l=MultDiv
		//    (
		//    ( sym='+' r+=MultDiv ( '+' r+=MultDiv )* )
		//    |
		//    ( sym='-' r+=MultDiv )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=MultDiv
		//(
		//( sym='+' r+=MultDiv ( '+' r+=MultDiv )* )
		//|
		//( sym='-' r+=MultDiv )
		//)?
		public Group getGroup() { return cGroup; }
		
		//l=MultDiv
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//MultDiv
		public RuleCall getLMultDivParserRuleCall_0_0() { return cLMultDivParserRuleCall_0_0; }
		
		//(
		//( sym='+' r+=MultDiv ( '+' r+=MultDiv )* )
		//|
		//( sym='-' r+=MultDiv )
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( sym='+' r+=MultDiv ( '+' r+=MultDiv )* )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym='+'
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//'+'
		public Keyword getSymPlusSignKeyword_1_0_0_0() { return cSymPlusSignKeyword_1_0_0_0; }
		
		//r+=MultDiv
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//MultDiv
		public RuleCall getRMultDivParserRuleCall_1_0_1_0() { return cRMultDivParserRuleCall_1_0_1_0; }
		
		//( '+' r+=MultDiv )*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_2_0() { return cPlusSignKeyword_1_0_2_0; }
		
		//r+=MultDiv
		public Assignment getRAssignment_1_0_2_1() { return cRAssignment_1_0_2_1; }
		
		//MultDiv
		public RuleCall getRMultDivParserRuleCall_1_0_2_1_0() { return cRMultDivParserRuleCall_1_0_2_1_0; }
		
		//( sym='-' r+=MultDiv )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//sym='-'
		public Assignment getSymAssignment_1_1_0() { return cSymAssignment_1_1_0; }
		
		//'-'
		public Keyword getSymHyphenMinusKeyword_1_1_0_0() { return cSymHyphenMinusKeyword_1_1_0_0; }
		
		//r+=MultDiv
		public Assignment getRAssignment_1_1_1() { return cRAssignment_1_1_1; }
		
		//MultDiv
		public RuleCall getRMultDivParserRuleCall_1_1_1_0() { return cRMultDivParserRuleCall_1_1_1_0; }
	}
	public class MultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.MultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLExpParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Alternatives cSymAlternatives_1_0_0_0 = (Alternatives)cSymAssignment_1_0_0.eContents().get(0);
		private final Keyword cSymSolidusKeyword_1_0_0_0_0 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(0);
		private final Keyword cSymDivKeyword_1_0_0_0_1 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(1);
		private final Keyword cSymModKeyword_1_0_0_0_2 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(2);
		private final Keyword cSymRemKeyword_1_0_0_0_3 = (Keyword)cSymAlternatives_1_0_0_0.eContents().get(3);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRExpParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSymAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cSymAsteriskKeyword_1_1_0_0 = (Keyword)cSymAssignment_1_1_0.eContents().get(0);
		private final Assignment cRAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRExpParserRuleCall_1_1_1_0 = (RuleCall)cRAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cRAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cRExpParserRuleCall_1_1_2_1_0 = (RuleCall)cRAssignment_1_1_2_1.eContents().get(0);
		
		//MultDiv:
		//    l=Exp
		//    ( ( sym=('/' | 'div' | 'mod' | 'rem') r+=Exp)
		//    | ( sym='*' r+=Exp ( '*' r+=Exp )* )
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Exp
		//( ( sym=('/' | 'div' | 'mod' | 'rem') r+=Exp)
		//| ( sym='*' r+=Exp ( '*' r+=Exp )* )
		//)?
		public Group getGroup() { return cGroup; }
		
		//l=Exp
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Exp
		public RuleCall getLExpParserRuleCall_0_0() { return cLExpParserRuleCall_0_0; }
		
		//( ( sym=('/' | 'div' | 'mod' | 'rem') r+=Exp)
		//| ( sym='*' r+=Exp ( '*' r+=Exp )* )
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//( sym=('/' | 'div' | 'mod' | 'rem') r+=Exp)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym=('/' | 'div' | 'mod' | 'rem')
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//('/' | 'div' | 'mod' | 'rem')
		public Alternatives getSymAlternatives_1_0_0_0() { return cSymAlternatives_1_0_0_0; }
		
		//'/'
		public Keyword getSymSolidusKeyword_1_0_0_0_0() { return cSymSolidusKeyword_1_0_0_0_0; }
		
		//'div'
		public Keyword getSymDivKeyword_1_0_0_0_1() { return cSymDivKeyword_1_0_0_0_1; }
		
		//'mod'
		public Keyword getSymModKeyword_1_0_0_0_2() { return cSymModKeyword_1_0_0_0_2; }
		
		//'rem'
		public Keyword getSymRemKeyword_1_0_0_0_3() { return cSymRemKeyword_1_0_0_0_3; }
		
		//r+=Exp
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//Exp
		public RuleCall getRExpParserRuleCall_1_0_1_0() { return cRExpParserRuleCall_1_0_1_0; }
		
		//( sym='*' r+=Exp ( '*' r+=Exp )* )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//sym='*'
		public Assignment getSymAssignment_1_1_0() { return cSymAssignment_1_1_0; }
		
		//'*'
		public Keyword getSymAsteriskKeyword_1_1_0_0() { return cSymAsteriskKeyword_1_1_0_0; }
		
		//r+=Exp
		public Assignment getRAssignment_1_1_1() { return cRAssignment_1_1_1; }
		
		//Exp
		public RuleCall getRExpParserRuleCall_1_1_1_0() { return cRExpParserRuleCall_1_1_1_0; }
		
		//( '*' r+=Exp )*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_2_0() { return cAsteriskKeyword_1_1_2_0; }
		
		//r+=Exp
		public Assignment getRAssignment_1_1_2_1() { return cRAssignment_1_1_2_1; }
		
		//Exp
		public RuleCall getRExpParserRuleCall_1_1_2_1_0() { return cRExpParserRuleCall_1_1_2_1_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLSubexpressionParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSymAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSymAsteriskAsteriskKeyword_1_0_0 = (Keyword)cSymAssignment_1_0.eContents().get(0);
		private final Assignment cRAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRSubexpressionParserRuleCall_1_1_0 = (RuleCall)cRAssignment_1_1.eContents().get(0);
		
		//Exp:
		//    l=Subexpression ( sym='**' r=Subexpression )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=Subexpression ( sym='**' r=Subexpression )?
		public Group getGroup() { return cGroup; }
		
		//l=Subexpression
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//Subexpression
		public RuleCall getLSubexpressionParserRuleCall_0_0() { return cLSubexpressionParserRuleCall_0_0; }
		
		//( sym='**' r=Subexpression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//sym='**'
		public Assignment getSymAssignment_1_0() { return cSymAssignment_1_0; }
		
		//'**'
		public Keyword getSymAsteriskAsteriskKeyword_1_0_0() { return cSymAsteriskAsteriskKeyword_1_0_0; }
		
		//r=Subexpression
		public Assignment getRAssignment_1_1() { return cRAssignment_1_1; }
		
		//Subexpression
		public RuleCall getRSubexpressionParserRuleCall_1_1_0() { return cRSubexpressionParserRuleCall_1_1_0; }
	}
	public class SubexpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Subexpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryUnaryOperatorParserRuleCall_0_0 = (RuleCall)cUnaryAssignment_0.eContents().get(0);
		private final Assignment cTimed_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimed_expressionTimedExpressionParserRuleCall_1_0 = (RuleCall)cTimed_expressionAssignment_1.eContents().get(0);
		
		//Subexpression:
		//  ( unary=UnaryOperator  )?
		//  timed_expression=TimedExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( unary=UnaryOperator  )?
		//timed_expression=TimedExpression
		public Group getGroup() { return cGroup; }
		
		//( unary=UnaryOperator  )?
		public Assignment getUnaryAssignment_0() { return cUnaryAssignment_0; }
		
		//UnaryOperator
		public RuleCall getUnaryUnaryOperatorParserRuleCall_0_0() { return cUnaryUnaryOperatorParserRuleCall_0_0; }
		
		//timed_expression=TimedExpression
		public Assignment getTimed_expressionAssignment_1() { return cTimed_expressionAssignment_1; }
		
		//TimedExpression
		public RuleCall getTimed_expressionTimedExpressionParserRuleCall_1_0() { return cTimed_expressionTimedExpressionParserRuleCall_1_0; }
	}
	public class TimedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TimedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubjectTimedSubjectParserRuleCall_0_0 = (RuleCall)cSubjectAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAtAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cAtCommercialAtKeyword_1_0_0_0 = (Keyword)cAtAssignment_1_0_0.eContents().get(0);
		private final Assignment cTimeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTimeSubexpressionParserRuleCall_1_0_1_0 = (RuleCall)cTimeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cCaretAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cCaretCircumflexAccentKeyword_1_1_0_0 = (Keyword)cCaretAssignment_1_1_0.eContents().get(0);
		private final Assignment cShiftAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cShiftPeriodShiftParserRuleCall_1_1_1_0 = (RuleCall)cShiftAssignment_1_1_1.eContents().get(0);
		
		//TimedExpression:
		//    subject=TimedSubject
		//  (
		//  //tick='\'' |
		//  at?='@' time=Subexpression  //must ensure no @ in time
		//  | caret?='^' shift=PeriodShift
		//  )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  subject=TimedSubject
		//(
		////tick='\'' |
		//at?='@' time=Subexpression  //must ensure no @ in time
		//| caret?='^' shift=PeriodShift
		//)?
		public Group getGroup() { return cGroup; }
		
		//subject=TimedSubject
		public Assignment getSubjectAssignment_0() { return cSubjectAssignment_0; }
		
		//TimedSubject
		public RuleCall getSubjectTimedSubjectParserRuleCall_0_0() { return cSubjectTimedSubjectParserRuleCall_0_0; }
		
		//(
		////tick='\'' |
		//at?='@' time=Subexpression  //must ensure no @ in time
		//| caret?='^' shift=PeriodShift
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		////tick='\'' |
		//at?='@' time=Subexpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		////tick='\'' |
		//at?='@'
		public Assignment getAtAssignment_1_0_0() { return cAtAssignment_1_0_0; }
		
		//'@'
		public Keyword getAtCommercialAtKeyword_1_0_0_0() { return cAtCommercialAtKeyword_1_0_0_0; }
		
		//time=Subexpression
		public Assignment getTimeAssignment_1_0_1() { return cTimeAssignment_1_0_1; }
		
		//Subexpression
		public RuleCall getTimeSubexpressionParserRuleCall_1_0_1_0() { return cTimeSubexpressionParserRuleCall_1_0_1_0; }
		
		//caret?='^' shift=PeriodShift
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//caret?='^'
		public Assignment getCaretAssignment_1_1_0() { return cCaretAssignment_1_1_0; }
		
		//'^'
		public Keyword getCaretCircumflexAccentKeyword_1_1_0_0() { return cCaretCircumflexAccentKeyword_1_1_0_0; }
		
		//shift=PeriodShift
		public Assignment getShiftAssignment_1_1_1() { return cShiftAssignment_1_1_1; }
		
		//PeriodShift
		public RuleCall getShiftPeriodShiftParserRuleCall_1_1_1_0() { return cShiftPeriodShiftParserRuleCall_1_1_1_0; }
	}
	public class TimedSubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TimedSubject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPsParenthesizedSubexpressionParserRuleCall_0_0 = (RuleCall)cPsAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cConditionalAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConditionalConditionalExpressionParserRuleCall_2_0 = (RuleCall)cConditionalAssignment_2.eContents().get(0);
		private final Assignment cRecordAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRecordRecordTermParserRuleCall_3_0 = (RuleCall)cRecordAssignment_3.eContents().get(0);
		private final Assignment cInvocationAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInvocationInvocationParserRuleCall_4_0 = (RuleCall)cInvocationAssignment_4.eContents().get(0);
		
		//TimedSubject:
		//  ps=ParenthesizedSubexpression
		//  | value=Value
		//  | conditional=ConditionalExpression
		//  | record=RecordTerm
		//  | invocation=Invocation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ps=ParenthesizedSubexpression
		//| value=Value
		//| conditional=ConditionalExpression
		//| record=RecordTerm
		//| invocation=Invocation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ps=ParenthesizedSubexpression
		public Assignment getPsAssignment_0() { return cPsAssignment_0; }
		
		//ParenthesizedSubexpression
		public RuleCall getPsParenthesizedSubexpressionParserRuleCall_0_0() { return cPsParenthesizedSubexpressionParserRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//conditional=ConditionalExpression
		public Assignment getConditionalAssignment_2() { return cConditionalAssignment_2; }
		
		//ConditionalExpression
		public RuleCall getConditionalConditionalExpressionParserRuleCall_2_0() { return cConditionalConditionalExpressionParserRuleCall_2_0; }
		
		//record=RecordTerm
		public Assignment getRecordAssignment_3() { return cRecordAssignment_3; }
		
		//RecordTerm
		public RuleCall getRecordRecordTermParserRuleCall_3_0() { return cRecordRecordTermParserRuleCall_3_0; }
		
		//invocation=Invocation
		public Assignment getInvocationAssignment_4() { return cInvocationAssignment_4; }
		
		//Invocation
		public RuleCall getInvocationInvocationParserRuleCall_4_0() { return cInvocationInvocationParserRuleCall_4_0; }
	}
	public class ParenthesizedSubexpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ParenthesizedSubexpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0_0 = (RuleCall)cExpressionAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cTAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cTExpressionParserRuleCall_1_0_1_1_0 = (RuleCall)cTAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1_2 = (Keyword)cGroup_1_0_1.eContents().get(2);
		private final Assignment cFAssignment_1_0_1_3 = (Assignment)cGroup_1_0_1.eContents().get(3);
		private final RuleCall cFExpressionParserRuleCall_1_0_1_3_0 = (RuleCall)cFAssignment_1_0_1_3.eContents().get(0);
		private final Assignment cCaseexpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCaseexpressionCaseExpressionParserRuleCall_1_1_0 = (RuleCall)cCaseexpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedSubexpression:
		//    '('
		//    ( expression=Expression ( '??' t=Expression ':' f=Expression )?
		//    | caseexpression=CaseExpression
		//  )
		//  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//  '('
		//  ( expression=Expression ( '??' t=Expression ':' f=Expression )?
		//  | caseexpression=CaseExpression
		//)
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//  ( expression=Expression ( '??' t=Expression ':' f=Expression )?
		//  | caseexpression=CaseExpression
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expression=Expression ( '??' t=Expression ':' f=Expression )?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_0_0() { return cExpressionAssignment_1_0_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0_0() { return cExpressionExpressionParserRuleCall_1_0_0_0; }
		
		//( '??' t=Expression ':' f=Expression )?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'??'
		public Keyword getQuestionMarkQuestionMarkKeyword_1_0_1_0() { return cQuestionMarkQuestionMarkKeyword_1_0_1_0; }
		
		//t=Expression
		public Assignment getTAssignment_1_0_1_1() { return cTAssignment_1_0_1_1; }
		
		//Expression
		public RuleCall getTExpressionParserRuleCall_1_0_1_1_0() { return cTExpressionParserRuleCall_1_0_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1_2() { return cColonKeyword_1_0_1_2; }
		
		//f=Expression
		public Assignment getFAssignment_1_0_1_3() { return cFAssignment_1_0_1_3; }
		
		//Expression
		public RuleCall getFExpressionParserRuleCall_1_0_1_3_0() { return cFExpressionParserRuleCall_1_0_1_3_0; }
		
		//caseexpression=CaseExpression
		public Assignment getCaseexpressionAssignment_1_1() { return cCaseexpressionAssignment_1_1; }
		
		//CaseExpression
		public RuleCall getCaseexpressionCaseExpressionParserRuleCall_1_1_0() { return cCaseexpressionCaseExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNotAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNotNotKeyword_0_0 = (Keyword)cNotAssignment_0.eContents().get(0);
		private final Assignment cUnary_minusAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cUnary_minusHyphenMinusKeyword_1_0 = (Keyword)cUnary_minusAssignment_1.eContents().get(0);
		private final Assignment cAbsolute_valueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cAbsolute_valueAbsKeyword_2_0 = (Keyword)cAbsolute_valueAssignment_2.eContents().get(0);
		private final Assignment cTruncateAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTruncateTruncateKeyword_3_0 = (Keyword)cTruncateAssignment_3.eContents().get(0);
		private final Assignment cRoundAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cRoundRoundKeyword_4_0 = (Keyword)cRoundAssignment_4.eContents().get(0);
		
		//UnaryOperator:
		//    not='not'
		//    | unary_minus='-'
		//    | absolute_value='abs'
		//    | truncate='truncate'
		//    | round='round'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//not='not'
		//| unary_minus='-'
		//| absolute_value='abs'
		//| truncate='truncate'
		//| round='round'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//not='not'
		public Assignment getNotAssignment_0() { return cNotAssignment_0; }
		
		//'not'
		public Keyword getNotNotKeyword_0_0() { return cNotNotKeyword_0_0; }
		
		//unary_minus='-'
		public Assignment getUnary_minusAssignment_1() { return cUnary_minusAssignment_1; }
		
		//'-'
		public Keyword getUnary_minusHyphenMinusKeyword_1_0() { return cUnary_minusHyphenMinusKeyword_1_0; }
		
		//absolute_value='abs'
		public Assignment getAbsolute_valueAssignment_2() { return cAbsolute_valueAssignment_2; }
		
		//'abs'
		public Keyword getAbsolute_valueAbsKeyword_2_0() { return cAbsolute_valueAbsKeyword_2_0; }
		
		//truncate='truncate'
		public Assignment getTruncateAssignment_3() { return cTruncateAssignment_3; }
		
		//'truncate'
		public Keyword getTruncateTruncateKeyword_3_0() { return cTruncateTruncateKeyword_3_0; }
		
		//round='round'
		public Assignment getRoundAssignment_4() { return cRoundAssignment_4; }
		
		//'round'
		public Keyword getRoundRoundKeyword_4_0() { return cRoundRoundKeyword_4_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLower_boundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLower_boundSubexpressionParserRuleCall_0_0 = (RuleCall)cLower_boundAssignment_0.eContents().get(0);
		private final Assignment cSymAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSymRangeSymbolParserRuleCall_1_0 = (RuleCall)cSymAssignment_1.eContents().get(0);
		private final Assignment cUpper_boundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpper_boundSubexpressionParserRuleCall_2_0 = (RuleCall)cUpper_boundAssignment_2.eContents().get(0);
		
		////assertion_range
		//Range:
		//    lower_bound=Subexpression sym=RangeSymbol upper_bound=Subexpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lower_bound=Subexpression sym=RangeSymbol upper_bound=Subexpression
		public Group getGroup() { return cGroup; }
		
		//lower_bound=Subexpression
		public Assignment getLower_boundAssignment_0() { return cLower_boundAssignment_0; }
		
		//Subexpression
		public RuleCall getLower_boundSubexpressionParserRuleCall_0_0() { return cLower_boundSubexpressionParserRuleCall_0_0; }
		
		//sym=RangeSymbol
		public Assignment getSymAssignment_1() { return cSymAssignment_1; }
		
		//RangeSymbol
		public RuleCall getSymRangeSymbolParserRuleCall_1_0() { return cSymRangeSymbolParserRuleCall_1_0; }
		
		//upper_bound=Subexpression
		public Assignment getUpper_boundAssignment_2() { return cUpper_boundAssignment_2; }
		
		//Subexpression
		public RuleCall getUpper_boundSubexpressionParserRuleCall_2_0() { return cUpper_boundSubexpressionParserRuleCall_2_0; }
	}
	public class RangeSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RangeSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOTDOTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMADOTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDOTCOMMATerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCOMMACOMMATerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//RangeSymbol : DOTDOT | COMMADOT | DOTCOMMA | COMMACOMMA;
		@Override public ParserRule getRule() { return rule; }
		
		//DOTDOT | COMMADOT | DOTCOMMA | COMMACOMMA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOTDOT
		public RuleCall getDOTDOTTerminalRuleCall_0() { return cDOTDOTTerminalRuleCall_0; }
		
		//COMMADOT
		public RuleCall getCOMMADOTTerminalRuleCall_1() { return cCOMMADOTTerminalRuleCall_1; }
		
		//DOTCOMMA
		public RuleCall getDOTCOMMATerminalRuleCall_2() { return cDOTCOMMATerminalRuleCall_2; }
		
		//COMMACOMMA
		public RuleCall getCOMMACOMMATerminalRuleCall_3() { return cCOMMACOMMATerminalRuleCall_3; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredExpressionParserRuleCall_2_0 = (RuleCall)cPredAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTExpressionParserRuleCall_4_0 = (RuleCall)cTAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFExpressionParserRuleCall_6_0 = (RuleCall)cFAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConditionalExpression:
		//    '(' 'if' pred=Expression 'then' t=Expression 'else' f=Expression ')'
		////    |  MOVED TO ParenthesizedSubexpression
		////    '(' pred=Expression '??' t=Expression ':' f=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'if' pred=Expression 'then' t=Expression 'else' f=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//pred=Expression
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }
		
		//Expression
		public RuleCall getPredExpressionParserRuleCall_2_0() { return cPredExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//t=Expression
		public Assignment getTAssignment_4() { return cTAssignment_4; }
		
		//Expression
		public RuleCall getTExpressionParserRuleCall_4_0() { return cTExpressionParserRuleCall_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }
		
		//f=Expression
		public Assignment getFAssignment_6() { return cFAssignment_6; }
		
		//Expression
		public RuleCall getFExpressionParserRuleCall_6_0() { return cFExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValue_nameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValue_nameValueNameParserRuleCall_0_0 = (RuleCall)cValue_nameAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTimeoutTimeoutKeyword_2_0 = (Keyword)cTimeoutAssignment_2.eContents().get(0);
		private final Assignment cNowAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNowNowKeyword_3_0 = (Keyword)cNowAssignment_3.eContents().get(0);
		private final Assignment cTopsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTopsTopsKeyword_4_0 = (Keyword)cTopsAssignment_4.eContents().get(0);
		private final Assignment cEnum_valAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEnum_valEnumerationValueParserRuleCall_5_0 = (RuleCall)cEnum_valAssignment_5.eContents().get(0);
		
		/////////////////////////   VALUE   ///////////////////////////////
		//Value:
		//  value_name=ValueName
		//  | constant=Constant
		//  | timeout='timeout'
		//  | now='now'
		//  | tops='tops'
		//  | enum_val=EnumerationValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value_name=ValueName
		//| constant=Constant
		//| timeout='timeout'
		//| now='now'
		//| tops='tops'
		//| enum_val=EnumerationValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value_name=ValueName
		public Assignment getValue_nameAssignment_0() { return cValue_nameAssignment_0; }
		
		//ValueName
		public RuleCall getValue_nameValueNameParserRuleCall_0_0() { return cValue_nameValueNameParserRuleCall_0_0; }
		
		//constant=Constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }
		
		//timeout='timeout'
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }
		
		//'timeout'
		public Keyword getTimeoutTimeoutKeyword_2_0() { return cTimeoutTimeoutKeyword_2_0; }
		
		//now='now'
		public Assignment getNowAssignment_3() { return cNowAssignment_3; }
		
		//'now'
		public Keyword getNowNowKeyword_3_0() { return cNowNowKeyword_3_0; }
		
		//tops='tops'
		public Assignment getTopsAssignment_4() { return cTopsAssignment_4; }
		
		//'tops'
		public Keyword getTopsTopsKeyword_4_0() { return cTopsTopsKeyword_4_0; }
		
		//enum_val=EnumerationValue
		public Assignment getEnum_valAssignment_5() { return cEnum_valAssignment_5; }
		
		//EnumerationValue
		public RuleCall getEnum_valEnumerationValueParserRuleCall_5_0() { return cEnum_valEnumerationValueParserRuleCall_5_0; }
	}
	public class EnumerationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.EnumerationValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumeration_typeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEnumeration_typeTypeDeclarationCrossReference_0_0 = (CrossReference)cEnumeration_typeAssignment_0.eContents().get(0);
		private final RuleCall cEnumeration_typeTypeDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cEnumeration_typeTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cTickAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTickApostropheKeyword_1_0 = (Keyword)cTickAssignment_1.eContents().get(0);
		private final Assignment cEnumeration_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumeration_valueIDTerminalRuleCall_2_0 = (RuleCall)cEnumeration_valueAssignment_2.eContents().get(0);
		
		//EnumerationValue:
		//  enumeration_type=[TypeDeclaration] tick='\'' enumeration_value=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//enumeration_type=[TypeDeclaration] tick='\'' enumeration_value=ID
		public Group getGroup() { return cGroup; }
		
		//enumeration_type=[TypeDeclaration]
		public Assignment getEnumeration_typeAssignment_0() { return cEnumeration_typeAssignment_0; }
		
		//[TypeDeclaration]
		public CrossReference getEnumeration_typeTypeDeclarationCrossReference_0_0() { return cEnumeration_typeTypeDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getEnumeration_typeTypeDeclarationIDTerminalRuleCall_0_0_1() { return cEnumeration_typeTypeDeclarationIDTerminalRuleCall_0_0_1; }
		
		//tick='\''
		public Assignment getTickAssignment_1() { return cTickAssignment_1; }
		
		//'\''
		public Keyword getTickApostropheKeyword_1_0() { return cTickApostropheKeyword_1_0; }
		
		//enumeration_value=ID
		public Assignment getEnumeration_valueAssignment_2() { return cEnumeration_valueAssignment_2; }
		
		//ID
		public RuleCall getEnumeration_valueIDTerminalRuleCall_2_0() { return cEnumeration_valueIDTerminalRuleCall_2_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumeric_constantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumeric_constantQuantityParserRuleCall_0_0 = (RuleCall)cNumeric_constantAssignment_0.eContents().get(0);
		private final Assignment cString_literalAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cString_literalSTRINGTerminalRuleCall_1_0 = (RuleCall)cString_literalAssignment_1.eContents().get(0);
		private final Assignment cTAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTTrueKeyword_2_0 = (Keyword)cTAssignment_2.eContents().get(0);
		private final Assignment cFAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cFFalseKeyword_3_0 = (Keyword)cFAssignment_3.eContents().get(0);
		private final Assignment cNulAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNulNullKeyword_4_0 = (Keyword)cNulAssignment_4.eContents().get(0);
		private final Assignment cPropAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cPropNonNumericPropertyParserRuleCall_5_0 = (RuleCall)cPropAssignment_5.eContents().get(0);
		
		//Constant:
		//  numeric_constant=Quantity
		//  | string_literal=STRING
		//  | t='true'
		//  | f='false'
		//  | nul='null'
		//  | prop=NonNumericProperty
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//numeric_constant=Quantity
		//| string_literal=STRING
		//| t='true'
		//| f='false'
		//| nul='null'
		//| prop=NonNumericProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numeric_constant=Quantity
		public Assignment getNumeric_constantAssignment_0() { return cNumeric_constantAssignment_0; }
		
		//Quantity
		public RuleCall getNumeric_constantQuantityParserRuleCall_0_0() { return cNumeric_constantQuantityParserRuleCall_0_0; }
		
		//string_literal=STRING
		public Assignment getString_literalAssignment_1() { return cString_literalAssignment_1; }
		
		//STRING
		public RuleCall getString_literalSTRINGTerminalRuleCall_1_0() { return cString_literalSTRINGTerminalRuleCall_1_0; }
		
		//t='true'
		public Assignment getTAssignment_2() { return cTAssignment_2; }
		
		//'true'
		public Keyword getTTrueKeyword_2_0() { return cTTrueKeyword_2_0; }
		
		//f='false'
		public Assignment getFAssignment_3() { return cFAssignment_3; }
		
		//'false'
		public Keyword getFFalseKeyword_3_0() { return cFFalseKeyword_3_0; }
		
		//nul='null'
		public Assignment getNulAssignment_4() { return cNulAssignment_4; }
		
		//'null'
		public Keyword getNulNullKeyword_4_0() { return cNulNullKeyword_4_0; }
		
		//prop=NonNumericProperty
		public Assignment getPropAssignment_5() { return cPropAssignment_5; }
		
		//NonNumericProperty
		public RuleCall getPropNonNumericPropertyParserRuleCall_5_0() { return cPropNonNumericPropertyParserRuleCall_5_0; }
	}
	public class NonNumericPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NonNumericProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPropertyPropertyReferenceParserRuleCall_1_0_0 = (RuleCall)cPropertyAssignment_1_0.eContents().get(0);
		private final Assignment cPropertyConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cPropertyConstantPropertyConstantCrossReference_1_1_0 = (CrossReference)cPropertyConstantAssignment_1_1.eContents().get(0);
		private final RuleCall cPropertyConstantPropertyConstantQCLREFParserRuleCall_1_1_0_1 = (RuleCall)cPropertyConstantPropertyConstantCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTodTypeOrReferenceParserRuleCall_3_0 = (RuleCall)cTodAssignment_3.eContents().get(0);
		
		//NonNumericProperty:
		//   "["
		//  ( property=PropertyReference
		//  | propertyConstant=[aadl2::PropertyConstant|QCLREF]
		//  )
		//  "]->"   tod=TypeOrReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// "["
		//( property=PropertyReference
		//| propertyConstant=[aadl2::PropertyConstant|QCLREF]
		//)
		//"]->"   tod=TypeOrReference
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//( property=PropertyReference
		//| propertyConstant=[aadl2::PropertyConstant|QCLREF]
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//property=PropertyReference
		public Assignment getPropertyAssignment_1_0() { return cPropertyAssignment_1_0; }
		
		//PropertyReference
		public RuleCall getPropertyPropertyReferenceParserRuleCall_1_0_0() { return cPropertyPropertyReferenceParserRuleCall_1_0_0; }
		
		//propertyConstant=[aadl2::PropertyConstant|QCLREF]
		public Assignment getPropertyConstantAssignment_1_1() { return cPropertyConstantAssignment_1_1; }
		
		//[aadl2::PropertyConstant|QCLREF]
		public CrossReference getPropertyConstantPropertyConstantCrossReference_1_1_0() { return cPropertyConstantPropertyConstantCrossReference_1_1_0; }
		
		//QCLREF
		public RuleCall getPropertyConstantPropertyConstantQCLREFParserRuleCall_1_1_0_1() { return cPropertyConstantPropertyConstantQCLREFParserRuleCall_1_1_0_1; }
		
		//"]->"
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_2() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_2; }
		
		//tod=TypeOrReference
		public Assignment getTodAssignment_3() { return cTodAssignment_3; }
		
		//TypeOrReference
		public RuleCall getTodTypeOrReferenceParserRuleCall_3_0() { return cTodTypeOrReferenceParserRuleCall_3_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTodTypeOrReferenceParserRuleCall_2_0 = (RuleCall)cTodAssignment_2.eContents().get(0);
		
		/////////////////////////   NAME  ////////////////////////////////////
		//Variable:
		//    name=ID '~' tod=TypeOrReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '~' tod=TypeOrReference
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'~'
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//tod=TypeOrReference
		public Assignment getTodAssignment_2() { return cTodAssignment_2; }
		
		//TypeOrReference
		public RuleCall getTodTypeOrReferenceParserRuleCall_2_0() { return cTodTypeOrReferenceParserRuleCall_2_0; }
	}
	public class ValueNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ValueName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdNamedElementCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cIdNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDolAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDolDollarSignKeyword_1_0_0 = (Keyword)cDolAssignment_1_0.eContents().get(0);
		private final Assignment cLpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cLpLeftParenthesisKeyword_1_1_0 = (Keyword)cLpAssignment_1_1.eContents().get(0);
		private final Assignment cPrAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPrFunctionParametersParserRuleCall_1_2_0 = (RuleCall)cPrAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLbAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cLbLeftSquareBracketKeyword_2_0_0 = (Keyword)cLbAssignment_2_0.eContents().get(0);
		private final Assignment cArray_indexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArray_indexIndexExpressionOrRangeParserRuleCall_2_1_0 = (RuleCall)cArray_indexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cArray_indexAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cArray_indexIndexExpressionOrRangeParserRuleCall_2_3_1_0 = (RuleCall)cArray_indexAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDotAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDotFullStopKeyword_3_0_0 = (Keyword)cDotAssignment_3_0.eContents().get(0);
		private final Assignment cPnAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPnPartialNameParserRuleCall_3_1_0 = (RuleCall)cPnAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cFullStopKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cPnAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cPnPartialNameParserRuleCall_3_2_1_0 = (RuleCall)cPnAssignment_3_2_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cQAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cQQuestionMarkKeyword_4_0_0 = (Keyword)cQAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cApostropheKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFreshAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final Keyword cFreshFreshKeyword_4_1_1_0 = (Keyword)cFreshAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cApostropheKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cCountAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final Keyword cCountCountKeyword_4_2_1_0 = (Keyword)cCountAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cAlternatives_4.eContents().get(3);
		private final Keyword cApostropheKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cUpdatedAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final Keyword cUpdatedUpdatedKeyword_4_3_1_0 = (Keyword)cUpdatedAssignment_4_3_1.eContents().get(0);
		
		////name and port_name
		//ValueName:
		//  id=[aadl2::NamedElement|ID] //resolve as variable or feature (port)
		//  //either function call or variable or port
		//    ( dol?='$' lp?='('  pr=FunctionParameters? ')' )?
		//      ( lb?='[' array_index+=IndexExpressionOrRange ']'
		//        ( '[' array_index+=IndexExpressionOrRange ']' )* )? //optional array index
		//      ( dot?='.' pn+=PartialName ( '.' pn+=PartialName )* )?
		//    (  q?='?'
		//    | '\'' fresh?='fresh' //fresh is boolean
		//    | '\'' count?='count'
		//    | '\'' updated?='updated'
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[aadl2::NamedElement|ID] //resolve as variable or feature (port)
		////either function call or variable or port
		//  ( dol?='$' lp?='('  pr=FunctionParameters? ')' )?
		//    ( lb?='[' array_index+=IndexExpressionOrRange ']'
		//      ( '[' array_index+=IndexExpressionOrRange ']' )* )? //optional array index
		//    ( dot?='.' pn+=PartialName ( '.' pn+=PartialName )* )?
		//  (  q?='?'
		//  | '\'' fresh?='fresh' //fresh is boolean
		//  | '\'' count?='count'
		//  | '\'' updated?='updated'
		//  )?
		public Group getGroup() { return cGroup; }
		
		//id=[aadl2::NamedElement|ID]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[aadl2::NamedElement|ID]
		public CrossReference getIdNamedElementCrossReference_0_0() { return cIdNamedElementCrossReference_0_0; }
		
		//ID
		public RuleCall getIdNamedElementIDTerminalRuleCall_0_0_1() { return cIdNamedElementIDTerminalRuleCall_0_0_1; }
		
		////resolve as variable or feature (port)
		// //either function call or variable or port
		//   ( dol?='$' lp?='('  pr=FunctionParameters? ')' )?
		public Group getGroup_1() { return cGroup_1; }
		
		//dol?='$'
		public Assignment getDolAssignment_1_0() { return cDolAssignment_1_0; }
		
		//'$'
		public Keyword getDolDollarSignKeyword_1_0_0() { return cDolDollarSignKeyword_1_0_0; }
		
		//lp?='('
		public Assignment getLpAssignment_1_1() { return cLpAssignment_1_1; }
		
		//'('
		public Keyword getLpLeftParenthesisKeyword_1_1_0() { return cLpLeftParenthesisKeyword_1_1_0; }
		
		//pr=FunctionParameters?
		public Assignment getPrAssignment_1_2() { return cPrAssignment_1_2; }
		
		//FunctionParameters
		public RuleCall getPrFunctionParametersParserRuleCall_1_2_0() { return cPrFunctionParametersParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//( lb?='[' array_index+=IndexExpressionOrRange ']'
		//  ( '[' array_index+=IndexExpressionOrRange ']' )* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//lb?='['
		public Assignment getLbAssignment_2_0() { return cLbAssignment_2_0; }
		
		//'['
		public Keyword getLbLeftSquareBracketKeyword_2_0_0() { return cLbLeftSquareBracketKeyword_2_0_0; }
		
		//array_index+=IndexExpressionOrRange
		public Assignment getArray_indexAssignment_2_1() { return cArray_indexAssignment_2_1; }
		
		//IndexExpressionOrRange
		public RuleCall getArray_indexIndexExpressionOrRangeParserRuleCall_2_1_0() { return cArray_indexIndexExpressionOrRangeParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//( '[' array_index+=IndexExpressionOrRange ']' )*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_3_0() { return cLeftSquareBracketKeyword_2_3_0; }
		
		//array_index+=IndexExpressionOrRange
		public Assignment getArray_indexAssignment_2_3_1() { return cArray_indexAssignment_2_3_1; }
		
		//IndexExpressionOrRange
		public RuleCall getArray_indexIndexExpressionOrRangeParserRuleCall_2_3_1_0() { return cArray_indexIndexExpressionOrRangeParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3_2() { return cRightSquareBracketKeyword_2_3_2; }
		
		////optional array index
		//     ( dot?='.' pn+=PartialName ( '.' pn+=PartialName )* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//dot?='.'
		public Assignment getDotAssignment_3_0() { return cDotAssignment_3_0; }
		
		//'.'
		public Keyword getDotFullStopKeyword_3_0_0() { return cDotFullStopKeyword_3_0_0; }
		
		//pn+=PartialName
		public Assignment getPnAssignment_3_1() { return cPnAssignment_3_1; }
		
		//PartialName
		public RuleCall getPnPartialNameParserRuleCall_3_1_0() { return cPnPartialNameParserRuleCall_3_1_0; }
		
		//( '.' pn+=PartialName )*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2_0() { return cFullStopKeyword_3_2_0; }
		
		//pn+=PartialName
		public Assignment getPnAssignment_3_2_1() { return cPnAssignment_3_2_1; }
		
		//PartialName
		public RuleCall getPnPartialNameParserRuleCall_3_2_1_0() { return cPnPartialNameParserRuleCall_3_2_1_0; }
		
		//(  q?='?'
		//| '\'' fresh?='fresh' //fresh is boolean
		//| '\'' count?='count'
		//| '\'' updated?='updated'
		//)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//q?='?'
		public Assignment getQAssignment_4_0() { return cQAssignment_4_0; }
		
		//'?'
		public Keyword getQQuestionMarkKeyword_4_0_0() { return cQQuestionMarkKeyword_4_0_0; }
		
		//'\'' fresh?='fresh'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'\''
		public Keyword getApostropheKeyword_4_1_0() { return cApostropheKeyword_4_1_0; }
		
		//fresh?='fresh'
		public Assignment getFreshAssignment_4_1_1() { return cFreshAssignment_4_1_1; }
		
		//'fresh'
		public Keyword getFreshFreshKeyword_4_1_1_0() { return cFreshFreshKeyword_4_1_1_0; }
		
		//'\'' count?='count'
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'\''
		public Keyword getApostropheKeyword_4_2_0() { return cApostropheKeyword_4_2_0; }
		
		//count?='count'
		public Assignment getCountAssignment_4_2_1() { return cCountAssignment_4_2_1; }
		
		//'count'
		public Keyword getCountCountKeyword_4_2_1_0() { return cCountCountKeyword_4_2_1_0; }
		
		//'\'' updated?='updated'
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'\''
		public Keyword getApostropheKeyword_4_3_0() { return cApostropheKeyword_4_3_0; }
		
		//updated?='updated'
		public Assignment getUpdatedAssignment_4_3_1() { return cUpdatedAssignment_4_3_1; }
		
		//'updated'
		public Keyword getUpdatedUpdatedKeyword_4_3_1_0() { return cUpdatedUpdatedKeyword_4_3_1_0; }
	}
	public class PartialNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PartialName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecord_idAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRecord_idIDTerminalRuleCall_0_0 = (RuleCall)cRecord_idAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLbAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cLbLeftSquareBracketKeyword_1_0_0 = (Keyword)cLbAssignment_1_0.eContents().get(0);
		private final Assignment cArray_indexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArray_indexIndexExpressionOrRangeParserRuleCall_1_1_0 = (RuleCall)cArray_indexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cArray_indexAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cArray_indexIndexExpressionOrRangeParserRuleCall_1_3_1_0 = (RuleCall)cArray_indexAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//PartialName:
		//    record_id=ID  //[RecordField]
		//     ( lb?='[' array_index+=IndexExpressionOrRange ']'
		//        ( '[' array_index+=IndexExpressionOrRange ']' )* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//record_id=ID  //[RecordField]
		// ( lb?='[' array_index+=IndexExpressionOrRange ']'
		//    ( '[' array_index+=IndexExpressionOrRange ']' )* )?
		public Group getGroup() { return cGroup; }
		
		//record_id=ID
		public Assignment getRecord_idAssignment_0() { return cRecord_idAssignment_0; }
		
		//ID
		public RuleCall getRecord_idIDTerminalRuleCall_0_0() { return cRecord_idIDTerminalRuleCall_0_0; }
		
		////[RecordField]
		//   ( lb?='[' array_index+=IndexExpressionOrRange ']'
		//      ( '[' array_index+=IndexExpressionOrRange ']' )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//lb?='['
		public Assignment getLbAssignment_1_0() { return cLbAssignment_1_0; }
		
		//'['
		public Keyword getLbLeftSquareBracketKeyword_1_0_0() { return cLbLeftSquareBracketKeyword_1_0_0; }
		
		//array_index+=IndexExpressionOrRange
		public Assignment getArray_indexAssignment_1_1() { return cArray_indexAssignment_1_1; }
		
		//IndexExpressionOrRange
		public RuleCall getArray_indexIndexExpressionOrRangeParserRuleCall_1_1_0() { return cArray_indexIndexExpressionOrRangeParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//( '[' array_index+=IndexExpressionOrRange ']' )*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }
		
		//array_index+=IndexExpressionOrRange
		public Assignment getArray_indexAssignment_1_3_1() { return cArray_indexAssignment_1_3_1; }
		
		//IndexExpressionOrRange
		public RuleCall getArray_indexIndexExpressionOrRangeParserRuleCall_1_3_1_0() { return cArray_indexIndexExpressionOrRangeParserRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
	}
	public class IndexExpressionOrRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.IndexExpressionOrRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeft_hand_sideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeft_hand_sideIndexExpressionParserRuleCall_0_0 = (RuleCall)cLeft_hand_sideAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDdDOTDOTTerminalRuleCall_1_0_0 = (RuleCall)cDdAssignment_1_0.eContents().get(0);
		private final Assignment cRight_hand_sideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRight_hand_sideIndexExpressionParserRuleCall_1_1_0 = (RuleCall)cRight_hand_sideAssignment_1_1.eContents().get(0);
		
		///////////////////////  INDEX EXPRESSION   //////////////////////
		////integer_expression_or_range
		//IndexExpressionOrRange:
		//  left_hand_side=IndexExpression
		//    ( dd?=DOTDOT right_hand_side=IndexExpression )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left_hand_side=IndexExpression
		//  ( dd?=DOTDOT right_hand_side=IndexExpression )?
		public Group getGroup() { return cGroup; }
		
		//left_hand_side=IndexExpression
		public Assignment getLeft_hand_sideAssignment_0() { return cLeft_hand_sideAssignment_0; }
		
		//IndexExpression
		public RuleCall getLeft_hand_sideIndexExpressionParserRuleCall_0_0() { return cLeft_hand_sideIndexExpressionParserRuleCall_0_0; }
		
		//( dd?=DOTDOT right_hand_side=IndexExpression )?
		public Group getGroup_1() { return cGroup_1; }
		
		//dd?=DOTDOT
		public Assignment getDdAssignment_1_0() { return cDdAssignment_1_0; }
		
		//DOTDOT
		public RuleCall getDdDOTDOTTerminalRuleCall_1_0_0() { return cDdDOTDOTTerminalRuleCall_1_0_0; }
		
		//right_hand_side=IndexExpression
		public Assignment getRight_hand_sideAssignment_1_1() { return cRight_hand_sideAssignment_1_1; }
		
		//IndexExpression
		public RuleCall getRight_hand_sideIndexExpressionParserRuleCall_1_1_0() { return cRight_hand_sideIndexExpressionParserRuleCall_1_1_0; }
	}
	public class PeriodShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PeriodShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnary_minusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnary_minusHyphenMinusKeyword_0_0 = (Keyword)cUnary_minusAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVValueParserRuleCall_1_0_0 = (RuleCall)cVAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIndex_expressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIndex_expressionIndexExpressionParserRuleCall_1_1_1_0 = (RuleCall)cIndex_expressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////period_shift
		//PeriodShift:
		//  unary_minus?='-'?
		//  (
		//  v=Value
		//  | '('  index_expression=IndexExpression ')'
		//  )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//unary_minus?='-'?
		//(
		//v=Value
		//| '('  index_expression=IndexExpression ')'
		//)
		public Group getGroup() { return cGroup; }
		
		//unary_minus?='-'?
		public Assignment getUnary_minusAssignment_0() { return cUnary_minusAssignment_0; }
		
		//'-'
		public Keyword getUnary_minusHyphenMinusKeyword_0_0() { return cUnary_minusHyphenMinusKeyword_0_0; }
		
		//(
		//v=Value
		//| '('  index_expression=IndexExpression ')'
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//v=Value
		public Assignment getVAssignment_1_0() { return cVAssignment_1_0; }
		
		//Value
		public RuleCall getVValueParserRuleCall_1_0_0() { return cVValueParserRuleCall_1_0_0; }
		
		//'('  index_expression=IndexExpression ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//index_expression=IndexExpression
		public Assignment getIndex_expressionAssignment_1_1_1() { return cIndex_expressionAssignment_1_1_1; }
		
		//IndexExpression
		public RuleCall getIndex_expressionIndexExpressionParserRuleCall_1_1_1_0() { return cIndex_expressionIndexExpressionParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class IndexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.IndexExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLPeriodShiftParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cSymAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cSymHyphenMinusKeyword_1_0_0_0 = (Keyword)cSymAssignment_1_0_0.eContents().get(0);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cSymAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cSymDivKeyword_1_1_0_0 = (Keyword)cSymAssignment_1_1_0.eContents().get(0);
		private final Assignment cRAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_1_1_0 = (RuleCall)cRAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cSymAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final Keyword cSymModKeyword_1_2_0_0 = (Keyword)cSymAssignment_1_2_0.eContents().get(0);
		private final Assignment cRAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_2_1_0 = (RuleCall)cRAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cSymAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final Keyword cSymPlusSignKeyword_1_3_0_0 = (Keyword)cSymAssignment_1_3_0.eContents().get(0);
		private final Assignment cRAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_3_1_0 = (RuleCall)cRAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cRAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_3_2_1_0 = (RuleCall)cRAssignment_1_3_2_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cSymAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cSymTIMESParserRuleCall_1_4_0_0 = (RuleCall)cSymAssignment_1_4_0.eContents().get(0);
		private final Assignment cRAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_4_1_0 = (RuleCall)cRAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final RuleCall cTIMESParserRuleCall_1_4_2_0 = (RuleCall)cGroup_1_4_2.eContents().get(0);
		private final Assignment cRAssignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cRPeriodShiftParserRuleCall_1_4_2_1_0 = (RuleCall)cRAssignment_1_4_2_1.eContents().get(0);
		
		////index_expression
		//IndexExpression:
		//    l=PeriodShift
		//    (
		//    sym='-' r+=PeriodShift
		//    |
		//    sym='div' r+=PeriodShift
		//    |
		//    sym='mod' r+=PeriodShift
		//    |
		//    sym='+' r+=PeriodShift ('+' r+=PeriodShift)*
		//    |
		//    sym=TIMES r+=PeriodShift (TIMES r+=PeriodShift)*
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//l=PeriodShift
		//(
		//sym='-' r+=PeriodShift
		//|
		//sym='div' r+=PeriodShift
		//|
		//sym='mod' r+=PeriodShift
		//|
		//sym='+' r+=PeriodShift ('+' r+=PeriodShift)*
		//|
		//sym=TIMES r+=PeriodShift (TIMES r+=PeriodShift)*
		//)?
		public Group getGroup() { return cGroup; }
		
		//l=PeriodShift
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//PeriodShift
		public RuleCall getLPeriodShiftParserRuleCall_0_0() { return cLPeriodShiftParserRuleCall_0_0; }
		
		//(
		//sym='-' r+=PeriodShift
		//|
		//sym='div' r+=PeriodShift
		//|
		//sym='mod' r+=PeriodShift
		//|
		//sym='+' r+=PeriodShift ('+' r+=PeriodShift)*
		//|
		//sym=TIMES r+=PeriodShift (TIMES r+=PeriodShift)*
		//)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//sym='-' r+=PeriodShift
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sym='-'
		public Assignment getSymAssignment_1_0_0() { return cSymAssignment_1_0_0; }
		
		//'-'
		public Keyword getSymHyphenMinusKeyword_1_0_0_0() { return cSymHyphenMinusKeyword_1_0_0_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_0_1_0() { return cRPeriodShiftParserRuleCall_1_0_1_0; }
		
		//sym='div' r+=PeriodShift
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//sym='div'
		public Assignment getSymAssignment_1_1_0() { return cSymAssignment_1_1_0; }
		
		//'div'
		public Keyword getSymDivKeyword_1_1_0_0() { return cSymDivKeyword_1_1_0_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_1_1() { return cRAssignment_1_1_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_1_1_0() { return cRPeriodShiftParserRuleCall_1_1_1_0; }
		
		//sym='mod' r+=PeriodShift
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//sym='mod'
		public Assignment getSymAssignment_1_2_0() { return cSymAssignment_1_2_0; }
		
		//'mod'
		public Keyword getSymModKeyword_1_2_0_0() { return cSymModKeyword_1_2_0_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_2_1() { return cRAssignment_1_2_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_2_1_0() { return cRPeriodShiftParserRuleCall_1_2_1_0; }
		
		//sym='+' r+=PeriodShift ('+' r+=PeriodShift)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//sym='+'
		public Assignment getSymAssignment_1_3_0() { return cSymAssignment_1_3_0; }
		
		//'+'
		public Keyword getSymPlusSignKeyword_1_3_0_0() { return cSymPlusSignKeyword_1_3_0_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_3_1() { return cRAssignment_1_3_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_3_1_0() { return cRPeriodShiftParserRuleCall_1_3_1_0; }
		
		//('+' r+=PeriodShift)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3_2_0() { return cPlusSignKeyword_1_3_2_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_3_2_1() { return cRAssignment_1_3_2_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_3_2_1_0() { return cRPeriodShiftParserRuleCall_1_3_2_1_0; }
		
		//sym=TIMES r+=PeriodShift (TIMES r+=PeriodShift)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//sym=TIMES
		public Assignment getSymAssignment_1_4_0() { return cSymAssignment_1_4_0; }
		
		//TIMES
		public RuleCall getSymTIMESParserRuleCall_1_4_0_0() { return cSymTIMESParserRuleCall_1_4_0_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_4_1() { return cRAssignment_1_4_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_4_1_0() { return cRPeriodShiftParserRuleCall_1_4_1_0; }
		
		//(TIMES r+=PeriodShift)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }
		
		//TIMES
		public RuleCall getTIMESParserRuleCall_1_4_2_0() { return cTIMESParserRuleCall_1_4_2_0; }
		
		//r+=PeriodShift
		public Assignment getRAssignment_1_4_2_1() { return cRAssignment_1_4_2_1; }
		
		//PeriodShift
		public RuleCall getRPeriodShiftParserRuleCall_1_4_2_1_0() { return cRPeriodShiftParserRuleCall_1_4_2_1_0; }
	}
	public class CaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCcCaseChoiceParserRuleCall_1_0 = (RuleCall)cCcAssignment_1.eContents().get(0);
		
		////////////////////  CASE CHOICE //////////////////////////////////////
		//CaseExpression returns CaseExpression:
		//    'case'
		//    cc+=CaseChoice+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'case'
		//cc+=CaseChoice+
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//cc+=CaseChoice+
		public Assignment getCcAssignment_1() { return cCcAssignment_1; }
		
		//CaseChoice
		public RuleCall getCcCaseChoiceParserRuleCall_1_0() { return cCcCaseChoiceParserRuleCall_1_0; }
	}
	public class CaseChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CaseChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBeBooleanExpressionParserRuleCall_1_0 = (RuleCall)cBeAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CaseChoice returns CaseChoice:
		//    '(' be=BooleanExpression '->' exp=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' be=BooleanExpression '->' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//be=BooleanExpression
		public Assignment getBeAssignment_1() { return cBeAssignment_1; }
		
		//BooleanExpression
		public RuleCall getBeBooleanExpressionParserRuleCall_1_0() { return cBeBooleanExpressionParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LogicVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.LogicVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvVariableParserRuleCall_0_0 = (RuleCall)cLvAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLvAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLvVariableParserRuleCall_1_1_0 = (RuleCall)cLvAssignment_1_1.eContents().get(0);
		
		///////////////////////  QUANTIFICATION   ////////////////////////////
		//LogicVariables:
		//  lv+=Variable (',' lv+=Variable)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lv+=Variable (',' lv+=Variable)*
		public Group getGroup() { return cGroup; }
		
		//lv+=Variable
		public Assignment getLvAssignment_0() { return cLvAssignment_0; }
		
		//Variable
		public RuleCall getLvVariableParserRuleCall_0_0() { return cLvVariableParserRuleCall_0_0; }
		
		//(',' lv+=Variable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//lv+=Variable
		public Assignment getLvAssignment_1_1() { return cLvAssignment_1_1; }
		
		//Variable
		public RuleCall getLvVariableParserRuleCall_1_1_0() { return cLvVariableParserRuleCall_1_1_0; }
	}
	public class SumQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SumQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLogicVariablesParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0_0 = (Keyword)cInAssignment_2_0_0.eContents().get(0);
		private final Assignment cRangeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_0_1_0 = (RuleCall)cRangeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cWhichWhichKeyword_2_1_0_0 = (Keyword)cWhichAssignment_2_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_2_1_1_0 = (RuleCall)cConditionAssignment_2_1_1.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumeric_expressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumeric_expressionNumericExpressionParserRuleCall_4_0 = (RuleCall)cNumeric_expressionAssignment_4.eContents().get(0);
		
		//SumQuantification:
		//  'sum' variables=LogicVariables
		//    (in?='in' range=Range | which?='which' condition=Predicate )
		//     'of' numeric_expression=NumericExpression ;
		@Override public ParserRule getRule() { return rule; }
		
		//'sum' variables=LogicVariables
		//  (in?='in' range=Range | which?='which' condition=Predicate )
		//   'of' numeric_expression=NumericExpression
		public Group getGroup() { return cGroup; }
		
		//'sum'
		public Keyword getSumKeyword_0() { return cSumKeyword_0; }
		
		//variables=LogicVariables
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//LogicVariables
		public RuleCall getVariablesLogicVariablesParserRuleCall_1_0() { return cVariablesLogicVariablesParserRuleCall_1_0; }
		
		//(in?='in' range=Range | which?='which' condition=Predicate )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?='in' range=Range
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//in?='in'
		public Assignment getInAssignment_2_0_0() { return cInAssignment_2_0_0; }
		
		//'in'
		public Keyword getInInKeyword_2_0_0_0() { return cInInKeyword_2_0_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_0_1() { return cRangeAssignment_2_0_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0_1_0() { return cRangeRangeParserRuleCall_2_0_1_0; }
		
		//which?='which' condition=Predicate
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//which?='which'
		public Assignment getWhichAssignment_2_1_0() { return cWhichAssignment_2_1_0; }
		
		//'which'
		public Keyword getWhichWhichKeyword_2_1_0_0() { return cWhichWhichKeyword_2_1_0_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_2_1_1() { return cConditionAssignment_2_1_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_2_1_1_0() { return cConditionPredicateParserRuleCall_2_1_1_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//numeric_expression=NumericExpression
		public Assignment getNumeric_expressionAssignment_4() { return cNumeric_expressionAssignment_4; }
		
		//NumericExpression
		public RuleCall getNumeric_expressionNumericExpressionParserRuleCall_4_0() { return cNumeric_expressionNumericExpressionParserRuleCall_4_0; }
	}
	public class ProductQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ProductQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProductKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLogicVariablesParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0_0 = (Keyword)cInAssignment_2_0_0.eContents().get(0);
		private final Assignment cRangeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_0_1_0 = (RuleCall)cRangeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cWhichWhichKeyword_2_1_0_0 = (Keyword)cWhichAssignment_2_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_2_1_1_0 = (RuleCall)cConditionAssignment_2_1_1.eContents().get(0);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumeric_expressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumeric_expressionNumericExpressionParserRuleCall_4_0 = (RuleCall)cNumeric_expressionAssignment_4.eContents().get(0);
		
		//ProductQuantification:
		//  'product' variables=LogicVariables
		//    (in?='in' range=Range | which?='which' condition=Predicate )
		//     'of' numeric_expression=NumericExpression ;
		@Override public ParserRule getRule() { return rule; }
		
		//'product' variables=LogicVariables
		//  (in?='in' range=Range | which?='which' condition=Predicate )
		//   'of' numeric_expression=NumericExpression
		public Group getGroup() { return cGroup; }
		
		//'product'
		public Keyword getProductKeyword_0() { return cProductKeyword_0; }
		
		//variables=LogicVariables
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//LogicVariables
		public RuleCall getVariablesLogicVariablesParserRuleCall_1_0() { return cVariablesLogicVariablesParserRuleCall_1_0; }
		
		//(in?='in' range=Range | which?='which' condition=Predicate )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?='in' range=Range
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//in?='in'
		public Assignment getInAssignment_2_0_0() { return cInAssignment_2_0_0; }
		
		//'in'
		public Keyword getInInKeyword_2_0_0_0() { return cInInKeyword_2_0_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_0_1() { return cRangeAssignment_2_0_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0_1_0() { return cRangeRangeParserRuleCall_2_0_1_0; }
		
		//which?='which' condition=Predicate
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//which?='which'
		public Assignment getWhichAssignment_2_1_0() { return cWhichAssignment_2_1_0; }
		
		//'which'
		public Keyword getWhichWhichKeyword_2_1_0_0() { return cWhichWhichKeyword_2_1_0_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_2_1_1() { return cConditionAssignment_2_1_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_2_1_1_0() { return cConditionPredicateParserRuleCall_2_1_1_0; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//numeric_expression=NumericExpression
		public Assignment getNumeric_expressionAssignment_4() { return cNumeric_expressionAssignment_4; }
		
		//NumericExpression
		public RuleCall getNumeric_expressionNumericExpressionParserRuleCall_4_0() { return cNumeric_expressionNumericExpressionParserRuleCall_4_0; }
	}
	public class CountingQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.CountingQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLogicVariablesParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0_0 = (Keyword)cInAssignment_2_0_0.eContents().get(0);
		private final Assignment cRangeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_0_1_0 = (RuleCall)cRangeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cWhichWhichKeyword_2_1_0_0 = (Keyword)cWhichAssignment_2_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_2_1_1_0 = (RuleCall)cConditionAssignment_2_1_1.eContents().get(0);
		private final Keyword cThatKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCountedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCountedPredicateParserRuleCall_4_0 = (RuleCall)cCountedAssignment_4.eContents().get(0);
		
		//CountingQuantification:
		//  'numberof' variables=LogicVariables
		//    (in?='in' range=Range | which?='which' condition=Predicate )
		//     'that' counted=Predicate ;
		@Override public ParserRule getRule() { return rule; }
		
		//'numberof' variables=LogicVariables
		//  (in?='in' range=Range | which?='which' condition=Predicate )
		//   'that' counted=Predicate
		public Group getGroup() { return cGroup; }
		
		//'numberof'
		public Keyword getNumberofKeyword_0() { return cNumberofKeyword_0; }
		
		//variables=LogicVariables
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//LogicVariables
		public RuleCall getVariablesLogicVariablesParserRuleCall_1_0() { return cVariablesLogicVariablesParserRuleCall_1_0; }
		
		//(in?='in' range=Range | which?='which' condition=Predicate )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?='in' range=Range
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//in?='in'
		public Assignment getInAssignment_2_0_0() { return cInAssignment_2_0_0; }
		
		//'in'
		public Keyword getInInKeyword_2_0_0_0() { return cInInKeyword_2_0_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_0_1() { return cRangeAssignment_2_0_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0_1_0() { return cRangeRangeParserRuleCall_2_0_1_0; }
		
		//which?='which' condition=Predicate
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//which?='which'
		public Assignment getWhichAssignment_2_1_0() { return cWhichAssignment_2_1_0; }
		
		//'which'
		public Keyword getWhichWhichKeyword_2_1_0_0() { return cWhichWhichKeyword_2_1_0_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_2_1_1() { return cConditionAssignment_2_1_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_2_1_1_0() { return cConditionPredicateParserRuleCall_2_1_1_0; }
		
		//'that'
		public Keyword getThatKeyword_3() { return cThatKeyword_3; }
		
		//counted=Predicate
		public Assignment getCountedAssignment_4() { return cCountedAssignment_4; }
		
		//Predicate
		public RuleCall getCountedPredicateParserRuleCall_4_0() { return cCountedPredicateParserRuleCall_4_0; }
	}
	public class UniversalQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UniversalQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLogicVariablesParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0_0 = (Keyword)cInAssignment_2_0_0.eContents().get(0);
		private final Assignment cRangeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_0_1_0 = (RuleCall)cRangeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cWhichWhichKeyword_2_1_0_0 = (Keyword)cWhichAssignment_2_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_2_1_1_0 = (RuleCall)cConditionAssignment_2_1_1.eContents().get(0);
		private final Keyword cAreKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//UniversalQuantification:
		//  'all' variables=LogicVariables
		//    (in?='in' range=Range | which?='which' condition=Predicate )
		//     'are' predicate=Predicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'all' variables=LogicVariables
		//  (in?='in' range=Range | which?='which' condition=Predicate )
		//   'are' predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		//'all'
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//variables=LogicVariables
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//LogicVariables
		public RuleCall getVariablesLogicVariablesParserRuleCall_1_0() { return cVariablesLogicVariablesParserRuleCall_1_0; }
		
		//(in?='in' range=Range | which?='which' condition=Predicate )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?='in' range=Range
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//in?='in'
		public Assignment getInAssignment_2_0_0() { return cInAssignment_2_0_0; }
		
		//'in'
		public Keyword getInInKeyword_2_0_0_0() { return cInInKeyword_2_0_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_0_1() { return cRangeAssignment_2_0_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0_1_0() { return cRangeRangeParserRuleCall_2_0_1_0; }
		
		//which?='which' condition=Predicate
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//which?='which'
		public Assignment getWhichAssignment_2_1_0() { return cWhichAssignment_2_1_0; }
		
		//'which'
		public Keyword getWhichWhichKeyword_2_1_0_0() { return cWhichWhichKeyword_2_1_0_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_2_1_1() { return cConditionAssignment_2_1_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_2_1_1_0() { return cConditionPredicateParserRuleCall_2_1_1_0; }
		
		//'are'
		public Keyword getAreKeyword_3() { return cAreKeyword_3; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_4_0() { return cPredicatePredicateParserRuleCall_4_0; }
	}
	public class ExistentialQuantificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ExistentialQuantification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLogicVariablesParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0_0 = (Keyword)cInAssignment_2_0_0.eContents().get(0);
		private final Assignment cRangeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_2_0_1_0 = (RuleCall)cRangeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cWhichAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cWhichWhichKeyword_2_1_0_0 = (Keyword)cWhichAssignment_2_1_0.eContents().get(0);
		private final Assignment cConditionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_2_1_1_0 = (RuleCall)cConditionAssignment_2_1_1.eContents().get(0);
		private final Keyword cThatKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicatePredicateParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		
		//ExistentialQuantification:
		//  'exists' variables=LogicVariables
		//    (in?='in' range=Range | which?='which' condition=Predicate )
		//     'that' predicate=Predicate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'exists' variables=LogicVariables
		//  (in?='in' range=Range | which?='which' condition=Predicate )
		//   'that' predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		//'exists'
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }
		
		//variables=LogicVariables
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//LogicVariables
		public RuleCall getVariablesLogicVariablesParserRuleCall_1_0() { return cVariablesLogicVariablesParserRuleCall_1_0; }
		
		//(in?='in' range=Range | which?='which' condition=Predicate )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?='in' range=Range
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//in?='in'
		public Assignment getInAssignment_2_0_0() { return cInAssignment_2_0_0; }
		
		//'in'
		public Keyword getInInKeyword_2_0_0_0() { return cInInKeyword_2_0_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_2_0_1() { return cRangeAssignment_2_0_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_2_0_1_0() { return cRangeRangeParserRuleCall_2_0_1_0; }
		
		//which?='which' condition=Predicate
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//which?='which'
		public Assignment getWhichAssignment_2_1_0() { return cWhichAssignment_2_1_0; }
		
		//'which'
		public Keyword getWhichWhichKeyword_2_1_0_0() { return cWhichWhichKeyword_2_1_0_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_2_1_1() { return cConditionAssignment_2_1_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_2_1_1_0() { return cConditionPredicateParserRuleCall_2_1_1_0; }
		
		//'that'
		public Keyword getThatKeyword_3() { return cThatKeyword_3; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_4_0() { return cPredicatePredicateParserRuleCall_4_0; }
	}
	public class RecordTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RecordTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecord_typeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecord_typeTypeDeclarationCrossReference_1_0 = (CrossReference)cRecord_typeAssignment_1.eContents().get(0);
		private final RuleCall cRecord_typeTypeDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cRecord_typeTypeDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRecord_valueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRecord_valueRecordValueParserRuleCall_3_0 = (RuleCall)cRecord_valueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/////////////////////   RECORD VALUES   //////////////////////
		//RecordTerm:
		//  '[' record_type=[TypeDeclaration] ':' record_value+=RecordValue+ ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' record_type=[TypeDeclaration] ':' record_value+=RecordValue+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//record_type=[TypeDeclaration]
		public Assignment getRecord_typeAssignment_1() { return cRecord_typeAssignment_1; }
		
		//[TypeDeclaration]
		public CrossReference getRecord_typeTypeDeclarationCrossReference_1_0() { return cRecord_typeTypeDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getRecord_typeTypeDeclarationIDTerminalRuleCall_1_0_1() { return cRecord_typeTypeDeclarationIDTerminalRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//record_value+=RecordValue+
		public Assignment getRecord_valueAssignment_3() { return cRecord_valueAssignment_3; }
		
		//RecordValue
		public RuleCall getRecord_valueRecordValueParserRuleCall_3_0() { return cRecord_valueRecordValueParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class RecordValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RecordValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAvalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAvalValueParserRuleCall_2_0 = (RuleCall)cAvalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RecordValue:
		//  label=ID
		//  '=>' aval=Value ';'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//label=ID
		//'=>' aval=Value ';'?
		public Group getGroup() { return cGroup; }
		
		//label=ID
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_0() { return cLabelIDTerminalRuleCall_0_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//aval=Value
		public Assignment getAvalAssignment_2() { return cAvalAssignment_2; }
		
		//Value
		public RuleCall getAvalValueParserRuleCall_2_0() { return cAvalValueParserRuleCall_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLabelNamedAssertionCrossReference_0_0 = (CrossReference)cLabelAssignment_0.eContents().get(0);
		private final RuleCall cLabelNamedAssertionIDTerminalRuleCall_0_0_1 = (RuleCall)cLabelNamedAssertionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cParamsActualParameterParserRuleCall_2_0_0_0 = (RuleCall)cParamsAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cParamsActualParameterParserRuleCall_2_0_1_1_0 = (RuleCall)cParamsAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cActual_parameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cActual_parameterNumericExpressionParserRuleCall_2_1_0 = (RuleCall)cActual_parameterAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////predicate_invocation and assertion_function_invocation
		//Invocation:
		//    label=[NamedAssertion|ID]
		//    '('     //actual_assertion_parameter_list
		//    ( (params+=ActualParameter ( ',' params+=ActualParameter )* )
		//        |
		//        actual_parameter=NumericExpression
		//    )?
		//     ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//label=[NamedAssertion|ID]
		//'('     //actual_assertion_parameter_list
		//( (params+=ActualParameter ( ',' params+=ActualParameter )* )
		//    |
		//    actual_parameter=NumericExpression
		//)?
		// ')'
		public Group getGroup() { return cGroup; }
		
		//label=[NamedAssertion|ID]
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//[NamedAssertion|ID]
		public CrossReference getLabelNamedAssertionCrossReference_0_0() { return cLabelNamedAssertionCrossReference_0_0; }
		
		//ID
		public RuleCall getLabelNamedAssertionIDTerminalRuleCall_0_0_1() { return cLabelNamedAssertionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		// //actual_assertion_parameter_list
		//( (params+=ActualParameter ( ',' params+=ActualParameter )* )
		//    |
		//    actual_parameter=NumericExpression
		//)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(params+=ActualParameter ( ',' params+=ActualParameter )* )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//params+=ActualParameter
		public Assignment getParamsAssignment_2_0_0() { return cParamsAssignment_2_0_0; }
		
		//ActualParameter
		public RuleCall getParamsActualParameterParserRuleCall_2_0_0_0() { return cParamsActualParameterParserRuleCall_2_0_0_0; }
		
		//( ',' params+=ActualParameter )*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }
		
		//params+=ActualParameter
		public Assignment getParamsAssignment_2_0_1_1() { return cParamsAssignment_2_0_1_1; }
		
		//ActualParameter
		public RuleCall getParamsActualParameterParserRuleCall_2_0_1_1_0() { return cParamsActualParameterParserRuleCall_2_0_1_1_0; }
		
		//actual_parameter=NumericExpression
		public Assignment getActual_parameterAssignment_2_1() { return cActual_parameterAssignment_2_1; }
		
		//NumericExpression
		public RuleCall getActual_parameterNumericExpressionParserRuleCall_2_1_0() { return cActual_parameterNumericExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ActualParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ActualParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalIDTerminalRuleCall_0_0 = (RuleCall)cFormalAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualExpressionParserRuleCall_2_0 = (RuleCall)cActualAssignment_2.eContents().get(0);
		
		////actual_assertion_parameter
		//ActualParameter:
		//    formal=ID ':' actual=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//formal=ID ':' actual=Expression
		public Group getGroup() { return cGroup; }
		
		//formal=ID
		public Assignment getFormalAssignment_0() { return cFormalAssignment_0; }
		
		//ID
		public RuleCall getFormalIDTerminalRuleCall_0_0() { return cFormalIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//actual=Expression
		public Assignment getActualAssignment_2() { return cActualAssignment_2; }
		
		//Expression
		public RuleCall getActualExpressionParserRuleCall_2_0() { return cActualExpressionParserRuleCall_2_0; }
	}
	public class VariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.VariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstVariableParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaCommaKeyword_1_0_0 = (Keyword)cCommaAssignment_1_0.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterVariableParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParameterAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParameterVariableParserRuleCall_1_2_1_0 = (RuleCall)cParameterAssignment_1_2_1.eContents().get(0);
		
		//VariableList:
		//    first=Variable ( comma?=',' parameter+=Variable ( ',' parameter+=Variable )* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//first=Variable ( comma?=',' parameter+=Variable ( ',' parameter+=Variable )* )?
		public Group getGroup() { return cGroup; }
		
		//first=Variable
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//Variable
		public RuleCall getFirstVariableParserRuleCall_0_0() { return cFirstVariableParserRuleCall_0_0; }
		
		//( comma?=',' parameter+=Variable ( ',' parameter+=Variable )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//comma?=','
		public Assignment getCommaAssignment_1_0() { return cCommaAssignment_1_0; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_0() { return cCommaCommaKeyword_1_0_0; }
		
		//parameter+=Variable
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }
		
		//Variable
		public RuleCall getParameterVariableParserRuleCall_1_1_0() { return cParameterVariableParserRuleCall_1_1_0; }
		
		//( ',' parameter+=Variable )*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//parameter+=Variable
		public Assignment getParameterAssignment_1_2_1() { return cParameterAssignment_1_2_1; }
		
		//Variable
		public RuleCall getParameterVariableParserRuleCall_1_2_1_0() { return cParameterVariableParserRuleCall_1_2_1_0; }
	}
	public class AssertionFunctionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertionFunctionValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCexpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCexpConditionalAssertionFunctionParserRuleCall_0_0 = (RuleCall)cCexpAssignment_0.eContents().get(0);
		private final Assignment cPexpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPexpAssertionNumericExpressionParserRuleCall_1_0 = (RuleCall)cPexpAssignment_1.eContents().get(0);
		
		//AssertionFunctionValue returns AssertionFunctionValue:
		//    cexp=ConditionalAssertionFunction
		//    | pexp=AssertionNumericExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//cexp=ConditionalAssertionFunction
		//| pexp=AssertionNumericExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cexp=ConditionalAssertionFunction
		public Assignment getCexpAssignment_0() { return cCexpAssignment_0; }
		
		//ConditionalAssertionFunction
		public RuleCall getCexpConditionalAssertionFunctionParserRuleCall_0_0() { return cCexpConditionalAssertionFunctionParserRuleCall_0_0; }
		
		//pexp=AssertionNumericExpression
		public Assignment getPexpAssignment_1() { return cPexpAssignment_1; }
		
		//AssertionNumericExpression
		public RuleCall getPexpAssertionNumericExpressionParserRuleCall_1_0() { return cPexpAssertionNumericExpressionParserRuleCall_1_0; }
	}
	public class ConditionalAssertionFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ConditionalAssertionFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCvpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCvpConditionValuePairParserRuleCall_1_0 = (RuleCall)cCvpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCvpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCvpConditionValuePairParserRuleCall_2_1_0 = (RuleCall)cCvpAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////conditional_assertion_function
		//ConditionalAssertionFunction returns ConditionalAssertionFunction:
		//    '[' cvp+=ConditionValuePair ( ',' cvp+=ConditionValuePair )+ ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' cvp+=ConditionValuePair ( ',' cvp+=ConditionValuePair )+ ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//cvp+=ConditionValuePair
		public Assignment getCvpAssignment_1() { return cCvpAssignment_1; }
		
		//ConditionValuePair
		public RuleCall getCvpConditionValuePairParserRuleCall_1_0() { return cCvpConditionValuePairParserRuleCall_1_0; }
		
		//( ',' cvp+=ConditionValuePair )+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//cvp+=ConditionValuePair
		public Assignment getCvpAssignment_2_1() { return cCvpAssignment_2_1; }
		
		//ConditionValuePair
		public RuleCall getCvpConditionValuePairParserRuleCall_2_1_0() { return cCvpConditionValuePairParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ConditionValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ConditionValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionPredicateParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionAssertionNumericExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		////conditional_value_pair
		//ConditionValuePair returns ConditionValuePair:
		//    '(' condition=Predicate ')->' expression=AssertionNumericExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' condition=Predicate ')->' expression=AssertionNumericExpression
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//condition=Predicate
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Predicate
		public RuleCall getConditionPredicateParserRuleCall_1_0() { return cConditionPredicateParserRuleCall_1_0; }
		
		//')->'
		public Keyword getRightParenthesisHyphenMinusGreaterThanSignKeyword_2() { return cRightParenthesisHyphenMinusGreaterThanSignKeyword_2; }
		
		//expression=AssertionNumericExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//AssertionNumericExpression
		public RuleCall getExpressionAssertionNumericExpressionParserRuleCall_3_0() { return cExpressionAssertionNumericExpressionParserRuleCall_3_0; }
	}
	public class AssertionEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.AssertionEnumeration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredInvocationParserRuleCall_0_0 = (RuleCall)cPredAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPairAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPairEnumerationPairParserRuleCall_1_0_0 = (RuleCall)cPairAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPairAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPairEnumerationPairParserRuleCall_1_1_1_0 = (RuleCall)cPairAssignment_1_1_1.eContents().get(0);
		
		//AssertionEnumeration:
		//  pred=Invocation
		//  |
		//  ( pair+=EnumerationPair (',' pair+=EnumerationPair)* )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pred=Invocation
		//|
		//( pair+=EnumerationPair (',' pair+=EnumerationPair)* )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pred=Invocation
		public Assignment getPredAssignment_0() { return cPredAssignment_0; }
		
		//Invocation
		public RuleCall getPredInvocationParserRuleCall_0_0() { return cPredInvocationParserRuleCall_0_0; }
		
		//( pair+=EnumerationPair (',' pair+=EnumerationPair)* )
		public Group getGroup_1() { return cGroup_1; }
		
		//pair+=EnumerationPair
		public Assignment getPairAssignment_1_0() { return cPairAssignment_1_0; }
		
		//EnumerationPair
		public RuleCall getPairEnumerationPairParserRuleCall_1_0_0() { return cPairEnumerationPairParserRuleCall_1_0_0; }
		
		//(',' pair+=EnumerationPair)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//pair+=EnumerationPair
		public Assignment getPairAssignment_1_1_1() { return cPairAssignment_1_1_1; }
		
		//EnumerationPair
		public RuleCall getPairEnumerationPairParserRuleCall_1_1_1_0() { return cPairEnumerationPairParserRuleCall_1_1_1_0; }
	}
	public class EnumerationPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.EnumerationPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumeration_literalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumeration_literalIDTerminalRuleCall_0_0 = (RuleCall)cEnumeration_literalAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatePredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//EnumerationPair returns EnumerationPair:
		//  //{ EnumerationPair}
		//  enumeration_literal=ID '->' predicate=Predicate
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		////{ EnumerationPair}
		//enumeration_literal=ID '->' predicate=Predicate
		public Group getGroup() { return cGroup; }
		
		////{ EnumerationPair}
		//enumeration_literal=ID
		public Assignment getEnumeration_literalAssignment_0() { return cEnumeration_literalAssignment_0; }
		
		//ID
		public RuleCall getEnumeration_literalIDTerminalRuleCall_0_0() { return cEnumeration_literalIDTerminalRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//predicate=Predicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_2_0() { return cPredicatePredicateParserRuleCall_2_0; }
	}
	public class TypeLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TypeLibrary");
		private final Assignment cDecsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDecsTypeDeclarationParserRuleCall_0 = (RuleCall)cDecsAssignment.eContents().get(0);
		
		///////////////////////////////////////////   TYPE   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//TypeLibrary:
		//    decs+=TypeDeclaration+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//decs+=TypeDeclaration+
		public Assignment getDecsAssignment() { return cDecsAssignment; }
		
		//TypeDeclaration
		public RuleCall getDecsTypeDeclarationParserRuleCall_0() { return cDecsTypeDeclarationParserRuleCall_0; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//@Exported
		//TypeDeclaration:
		//    'type' name=ID 'is' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID 'is' type=Type
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class TypeOrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TypeOrReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTyTypeParserRuleCall_0_0 = (RuleCall)cTyAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefTypeDeclarationCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefTypeDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cRefTypeDeclarationCrossReference_1_0.eContents().get(1);
		
		//TypeOrReference:
		//    ty=Type | ref=[TypeDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ty=Type | ref=[TypeDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ty=Type
		public Assignment getTyAssignment_0() { return cTyAssignment_0; }
		
		//Type
		public RuleCall getTyTypeParserRuleCall_0_0() { return cTyTypeParserRuleCall_0_0; }
		
		//ref=[TypeDeclaration]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[TypeDeclaration]
		public CrossReference getRefTypeDeclarationCrossReference_1_0() { return cRefTypeDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getRefTypeDeclarationIDTerminalRuleCall_1_0_1() { return cRefTypeDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.BooleanType");
		private final Assignment cBAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBBooleanKeyword_0 = (Keyword)cBAssignment.eContents().get(0);
		
		//BooleanType: b='boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//b='boolean'
		public Assignment getBAssignment() { return cBAssignment; }
		
		//'boolean'
		public Keyword getBBooleanKeyword_0() { return cBBooleanKeyword_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.StringType");
		private final Assignment cSAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSStringKeyword_0 = (Keyword)cSAssignment.eContents().get(0);
		
		//StringType: s='string';
		@Override public ParserRule getRule() { return rule; }
		
		//s='string'
		public Assignment getSAssignment() { return cSAssignment; }
		
		//'string'
		public Keyword getSStringKeyword_0() { return cSStringKeyword_0; }
	}
	public class NullTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NullType");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNNullKeyword_0 = (Keyword)cNAssignment.eContents().get(0);
		
		////TimeType: t='time';
		////NullType cannot appear in program text
		////it is the type of the 'null' constant
		//NullType: n='null';
		@Override public ParserRule getRule() { return rule; }
		
		//n='null'
		public Assignment getNAssignment() { return cNAssignment; }
		
		//'null'
		public Keyword getNNullKeyword_0() { return cNNullKeyword_0; }
	}
	public class EnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.EnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefining_enumeration_literalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefining_enumeration_literalIDTerminalRuleCall_2_0 = (RuleCall)cDefining_enumeration_literalAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumerationType:
		// 'enumeration' '(' defining_enumeration_literal+=ID+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' '(' defining_enumeration_literal+=ID+ ')'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//defining_enumeration_literal+=ID+
		public Assignment getDefining_enumeration_literalAssignment_2() { return cDefining_enumeration_literalAssignment_2; }
		
		//ID
		public RuleCall getDefining_enumeration_literalIDTerminalRuleCall_2_0() { return cDefining_enumeration_literalIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QuantityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.QuantityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuantityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cUnitUnitNameCrossReference_1_0_0 = (CrossReference)cUnitAssignment_1_0.eContents().get(0);
		private final RuleCall cUnitUnitNameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cUnitUnitNameCrossReference_1_0_0.eContents().get(1);
		private final Assignment cScalarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cScalarScalarKeyword_1_1_0 = (Keyword)cScalarAssignment_1_1.eContents().get(0);
		private final Assignment cWholeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cWholeWholeKeyword_1_2_0 = (Keyword)cWholeAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLbAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLbANumberParserRuleCall_2_1_0 = (RuleCall)cLbAssignment_2_1.eContents().get(0);
		private final RuleCall cDOTDOTTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cUbAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cUbANumberParserRuleCall_2_3_0 = (RuleCall)cUbAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStepKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStepAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStepANumberParserRuleCall_3_1_0 = (RuleCall)cStepAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRepresentationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRepresentationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRepresentationPropertyConstantCrossReference_4_1_0 = (CrossReference)cRepresentationAssignment_4_1.eContents().get(0);
		private final RuleCall cRepresentationPropertyConstantQCLREFParserRuleCall_4_1_0_1 = (RuleCall)cRepresentationPropertyConstantCrossReference_4_1_0.eContents().get(1);
		
		//QuantityType:
		//  'quantity'
		//  ( unit=[UnitName] | scalar='scalar' | whole='whole' )
		//  ( '[' lb=ANumber DOTDOT ub=ANumber ']' )?
		//  ( 'step' step=ANumber )?  //check if positive
		//  ( 'representation' representation=[aadl2::PropertyConstant|QCLREF] )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'quantity'
		//( unit=[UnitName] | scalar='scalar' | whole='whole' )
		//( '[' lb=ANumber DOTDOT ub=ANumber ']' )?
		//( 'step' step=ANumber )?  //check if positive
		//( 'representation' representation=[aadl2::PropertyConstant|QCLREF] )?
		public Group getGroup() { return cGroup; }
		
		//'quantity'
		public Keyword getQuantityKeyword_0() { return cQuantityKeyword_0; }
		
		//( unit=[UnitName] | scalar='scalar' | whole='whole' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unit=[UnitName]
		public Assignment getUnitAssignment_1_0() { return cUnitAssignment_1_0; }
		
		//[UnitName]
		public CrossReference getUnitUnitNameCrossReference_1_0_0() { return cUnitUnitNameCrossReference_1_0_0; }
		
		//ID
		public RuleCall getUnitUnitNameIDTerminalRuleCall_1_0_0_1() { return cUnitUnitNameIDTerminalRuleCall_1_0_0_1; }
		
		//scalar='scalar'
		public Assignment getScalarAssignment_1_1() { return cScalarAssignment_1_1; }
		
		//'scalar'
		public Keyword getScalarScalarKeyword_1_1_0() { return cScalarScalarKeyword_1_1_0; }
		
		//whole='whole'
		public Assignment getWholeAssignment_1_2() { return cWholeAssignment_1_2; }
		
		//'whole'
		public Keyword getWholeWholeKeyword_1_2_0() { return cWholeWholeKeyword_1_2_0; }
		
		//( '[' lb=ANumber DOTDOT ub=ANumber ']' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//lb=ANumber
		public Assignment getLbAssignment_2_1() { return cLbAssignment_2_1; }
		
		//ANumber
		public RuleCall getLbANumberParserRuleCall_2_1_0() { return cLbANumberParserRuleCall_2_1_0; }
		
		//DOTDOT
		public RuleCall getDOTDOTTerminalRuleCall_2_2() { return cDOTDOTTerminalRuleCall_2_2; }
		
		//ub=ANumber
		public Assignment getUbAssignment_2_3() { return cUbAssignment_2_3; }
		
		//ANumber
		public RuleCall getUbANumberParserRuleCall_2_3_0() { return cUbANumberParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//( 'step' step=ANumber )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'step'
		public Keyword getStepKeyword_3_0() { return cStepKeyword_3_0; }
		
		//step=ANumber
		public Assignment getStepAssignment_3_1() { return cStepAssignment_3_1; }
		
		//ANumber
		public RuleCall getStepANumberParserRuleCall_3_1_0() { return cStepANumberParserRuleCall_3_1_0; }
		
		////check if positive
		//( 'representation' representation=[aadl2::PropertyConstant|QCLREF] )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'representation'
		public Keyword getRepresentationKeyword_4_0() { return cRepresentationKeyword_4_0; }
		
		//representation=[aadl2::PropertyConstant|QCLREF]
		public Assignment getRepresentationAssignment_4_1() { return cRepresentationAssignment_4_1; }
		
		//[aadl2::PropertyConstant|QCLREF]
		public CrossReference getRepresentationPropertyConstantCrossReference_4_1_0() { return cRepresentationPropertyConstantCrossReference_4_1_0; }
		
		//QCLREF
		public RuleCall getRepresentationPropertyConstantQCLREFParserRuleCall_4_1_0_1() { return cRepresentationPropertyConstantQCLREFParserRuleCall_4_1_0_1; }
	}
	public class ANumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ANumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLitNUMBERTerminalRuleCall_0_0 = (RuleCall)cLitAssignment_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyPropertyReferenceParserRuleCall_1_0 = (RuleCall)cPropertyAssignment_1.eContents().get(0);
		private final Assignment cPropertyConstantAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cPropertyConstantPropertyConstantCrossReference_2_0 = (CrossReference)cPropertyConstantAssignment_2.eContents().get(0);
		private final RuleCall cPropertyConstantPropertyConstantQCLREFParserRuleCall_2_0_1 = (RuleCall)cPropertyConstantPropertyConstantCrossReference_2_0.eContents().get(1);
		
		//ANumber:
		//  lit=NUMBER
		//  | property=PropertyReference
		//  | propertyConstant=[aadl2::PropertyConstant|QCLREF]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lit=NUMBER
		//| property=PropertyReference
		//| propertyConstant=[aadl2::PropertyConstant|QCLREF]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lit=NUMBER
		public Assignment getLitAssignment_0() { return cLitAssignment_0; }
		
		//NUMBER
		public RuleCall getLitNUMBERTerminalRuleCall_0_0() { return cLitNUMBERTerminalRuleCall_0_0; }
		
		//property=PropertyReference
		public Assignment getPropertyAssignment_1() { return cPropertyAssignment_1; }
		
		//PropertyReference
		public RuleCall getPropertyPropertyReferenceParserRuleCall_1_0() { return cPropertyPropertyReferenceParserRuleCall_1_0; }
		
		//propertyConstant=[aadl2::PropertyConstant|QCLREF]
		public Assignment getPropertyConstantAssignment_2() { return cPropertyConstantAssignment_2; }
		
		//[aadl2::PropertyConstant|QCLREF]
		public CrossReference getPropertyConstantPropertyConstantCrossReference_2_0() { return cPropertyConstantPropertyConstantCrossReference_2_0; }
		
		//QCLREF
		public RuleCall getPropertyConstantPropertyConstantQCLREFParserRuleCall_2_0_1() { return cPropertyConstantPropertyConstantQCLREFParserRuleCall_2_0_1; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArray_rangesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArray_rangesArrayRangeListParserRuleCall_2_0 = (RuleCall)cArray_rangesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypTypeOrReferenceParserRuleCall_5_0 = (RuleCall)cTypAssignment_5.eContents().get(0);
		
		////array range must be natural
		////array_type
		//ArrayType :
		//  'array' '[' array_ranges=ArrayRangeList ']' 'of' typ=TypeOrReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'array' '[' array_ranges=ArrayRangeList ']' 'of' typ=TypeOrReference
		public Group getGroup() { return cGroup; }
		
		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//array_ranges=ArrayRangeList
		public Assignment getArray_rangesAssignment_2() { return cArray_rangesAssignment_2; }
		
		//ArrayRangeList
		public RuleCall getArray_rangesArrayRangeListParserRuleCall_2_0() { return cArray_rangesArrayRangeListParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//typ=TypeOrReference
		public Assignment getTypAssignment_5() { return cTypAssignment_5; }
		
		//TypeOrReference
		public RuleCall getTypTypeOrReferenceParserRuleCall_5_0() { return cTypTypeOrReferenceParserRuleCall_5_0; }
	}
	public class ArrayRangeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ArrayRangeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeArrayRangeParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCommaAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCommaCommaKeyword_1_0_0 = (Keyword)cCommaAssignment_1_0.eContents().get(0);
		private final Assignment cRangeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRangeArrayRangeParserRuleCall_1_1_0 = (RuleCall)cRangeAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRangeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRangeArrayRangeParserRuleCall_1_2_1_0 = (RuleCall)cRangeAssignment_1_2_1.eContents().get(0);
		
		////array_range_list
		//ArrayRangeList : range+=ArrayRange ( comma?=',' range+=ArrayRange ( ',' range+=ArrayRange )* )? ;
		@Override public ParserRule getRule() { return rule; }
		
		//range+=ArrayRange ( comma?=',' range+=ArrayRange ( ',' range+=ArrayRange )* )?
		public Group getGroup() { return cGroup; }
		
		//range+=ArrayRange
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }
		
		//ArrayRange
		public RuleCall getRangeArrayRangeParserRuleCall_0_0() { return cRangeArrayRangeParserRuleCall_0_0; }
		
		//( comma?=',' range+=ArrayRange ( ',' range+=ArrayRange )* )?
		public Group getGroup_1() { return cGroup_1; }
		
		//comma?=','
		public Assignment getCommaAssignment_1_0() { return cCommaAssignment_1_0; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_0() { return cCommaCommaKeyword_1_0_0; }
		
		//range+=ArrayRange
		public Assignment getRangeAssignment_1_1() { return cRangeAssignment_1_1; }
		
		//ArrayRange
		public RuleCall getRangeArrayRangeParserRuleCall_1_1_0() { return cRangeArrayRangeParserRuleCall_1_1_0; }
		
		//( ',' range+=ArrayRange )*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//range+=ArrayRange
		public Assignment getRangeAssignment_1_2_1() { return cRangeAssignment_1_2_1; }
		
		//ArrayRange
		public RuleCall getRangeArrayRangeParserRuleCall_1_2_1_0() { return cRangeArrayRangeParserRuleCall_1_2_1_0; }
	}
	public class ArrayRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ArrayRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLbANumberParserRuleCall_0_0 = (RuleCall)cLbAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cUbAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUbANumberParserRuleCall_1_1_0 = (RuleCall)cUbAssignment_1_1.eContents().get(0);
		
		////natural_range
		//ArrayRange : lb=ANumber ( DOTDOT ub=ANumber)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//lb=ANumber ( DOTDOT ub=ANumber)?
		public Group getGroup() { return cGroup; }
		
		//lb=ANumber
		public Assignment getLbAssignment_0() { return cLbAssignment_0; }
		
		//ANumber
		public RuleCall getLbANumberParserRuleCall_0_0() { return cLbANumberParserRuleCall_0_0; }
		
		//( DOTDOT ub=ANumber)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DOTDOT
		public RuleCall getDOTDOTTerminalRuleCall_1_0() { return cDOTDOTTerminalRuleCall_1_0; }
		
		//ub=ANumber
		public Assignment getUbAssignment_1_1() { return cUbAssignment_1_1; }
		
		//ANumber
		public RuleCall getUbANumberParserRuleCall_1_1_0() { return cUbANumberParserRuleCall_1_1_0; }
	}
	public class RecordTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RecordType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRecordAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cRecordRecordKeyword_0_0_0 = (Keyword)cRecordAssignment_0_0.eContents().get(0);
		private final Assignment cVariantAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cVariantVariantKeyword_0_1_0 = (Keyword)cVariantAssignment_0_1.eContents().get(0);
		private final Assignment cVariantAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cVariantUnionKeyword_0_2_0 = (Keyword)cVariantAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsRecordFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////NaturalConstant returns NumericConstant:
		////    NumericConstant  //check if non-negative *integer*  aka natural number
		////;
		//RecordType :
		//    (record?='record' | variant?='variant' | variant?='union' )
		//    '(' fields+=RecordField+ // ( ',' fields+=RecordField )*
		//      ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(record?='record' | variant?='variant' | variant?='union' )
		//'(' fields+=RecordField+ // ( ',' fields+=RecordField )*
		//  ')'
		public Group getGroup() { return cGroup; }
		
		//(record?='record' | variant?='variant' | variant?='union' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//record?='record'
		public Assignment getRecordAssignment_0_0() { return cRecordAssignment_0_0; }
		
		//'record'
		public Keyword getRecordRecordKeyword_0_0_0() { return cRecordRecordKeyword_0_0_0; }
		
		//variant?='variant'
		public Assignment getVariantAssignment_0_1() { return cVariantAssignment_0_1; }
		
		//'variant'
		public Keyword getVariantVariantKeyword_0_1_0() { return cVariantVariantKeyword_0_1_0; }
		
		//variant?='union'
		public Assignment getVariantAssignment_0_2() { return cVariantAssignment_0_2; }
		
		//'union'
		public Keyword getVariantUnionKeyword_0_2_0() { return cVariantUnionKeyword_0_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//fields+=RecordField+
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//RecordField
		public RuleCall getFieldsRecordFieldParserRuleCall_2_0() { return cFieldsRecordFieldParserRuleCall_2_0; }
		
		//// ( ',' fields+=RecordField )*
		//     ')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RecordFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RecordField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypTypeOrReferenceParserRuleCall_2_0 = (RuleCall)cTypAssignment_2.eContents().get(0);
		
		//RecordField :
		//    label=ID
		//    ':' typ=TypeOrReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//label=ID
		//':' typ=TypeOrReference
		public Group getGroup() { return cGroup; }
		
		//label=ID
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_0_0() { return cLabelIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typ=TypeOrReference
		public Assignment getTypAssignment_2() { return cTypAssignment_2; }
		
		//TypeOrReference
		public RuleCall getTypTypeOrReferenceParserRuleCall_2_0() { return cTypTypeOrReferenceParserRuleCall_2_0; }
	}
	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PropertyReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPnameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cPnamePropertyCrossReference_0_1_0 = (CrossReference)cPnameAssignment_0_1.eContents().get(0);
		private final RuleCall cPnamePropertyQCLREFParserRuleCall_0_1_0_1 = (RuleCall)cPnamePropertyCrossReference_0_1_0.eContents().get(1);
		private final Assignment cFieldAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldPropertyFieldParserRuleCall_0_2_0 = (RuleCall)cFieldAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSelfAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSelfSelfKeyword_1_0_0 = (Keyword)cSelfAssignment_1_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSpnameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSpnamePropertyCrossReference_1_2_0 = (CrossReference)cSpnameAssignment_1_2.eContents().get(0);
		private final RuleCall cSpnamePropertyQCLREFParserRuleCall_1_2_0_1 = (RuleCall)cSpnamePropertyCrossReference_1_2_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFieldPropertyFieldParserRuleCall_1_3_0 = (RuleCall)cFieldAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cComponentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cComponentComponentClassifierCrossReference_2_0_0 = (CrossReference)cComponentAssignment_2_0.eContents().get(0);
		private final RuleCall cComponentComponentClassifierQCREFParserRuleCall_2_0_0_1 = (RuleCall)cComponentComponentClassifierCrossReference_2_0_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCpnameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cCpnamePropertyCrossReference_2_2_0 = (CrossReference)cCpnameAssignment_2_2.eContents().get(0);
		private final RuleCall cCpnamePropertyQCLREFParserRuleCall_2_2_0_1 = (RuleCall)cCpnamePropertyCrossReference_2_2_0.eContents().get(1);
		private final Assignment cFieldAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cFieldPropertyFieldParserRuleCall_2_3_0 = (RuleCall)cFieldAssignment_2_3.eContents().get(0);
		
		////NumericConstant:
		////    quantity=Quantity //from Unit
		////    | propertyConstant=[aadl2::PropertyConstant|QCLREF]
		////    | property=PropertyReference
		////;
		//PropertyReference:
		//    '#' pname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		//    //component_element_reference
		//    | self?='self' '#' spname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		//    | component=[aadl2::ComponentClassifier|QCREF] '#' cpname=[aadl2::Property|QCLREF]
		//       ( field+=PropertyField )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' pname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		////component_element_reference
		//| self?='self' '#' spname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		//| component=[aadl2::ComponentClassifier|QCREF] '#' cpname=[aadl2::Property|QCLREF]
		//   ( field+=PropertyField )*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'#' pname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		public Group getGroup_0() { return cGroup_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }
		
		//pname=[aadl2::Property|QCLREF]
		public Assignment getPnameAssignment_0_1() { return cPnameAssignment_0_1; }
		
		//[aadl2::Property|QCLREF]
		public CrossReference getPnamePropertyCrossReference_0_1_0() { return cPnamePropertyCrossReference_0_1_0; }
		
		//QCLREF
		public RuleCall getPnamePropertyQCLREFParserRuleCall_0_1_0_1() { return cPnamePropertyQCLREFParserRuleCall_0_1_0_1; }
		
		//( field+=PropertyField )*
		public Assignment getFieldAssignment_0_2() { return cFieldAssignment_0_2; }
		
		//PropertyField
		public RuleCall getFieldPropertyFieldParserRuleCall_0_2_0() { return cFieldPropertyFieldParserRuleCall_0_2_0; }
		
		//self?='self' '#' spname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
		public Group getGroup_1() { return cGroup_1; }
		
		//self?='self'
		public Assignment getSelfAssignment_1_0() { return cSelfAssignment_1_0; }
		
		//'self'
		public Keyword getSelfSelfKeyword_1_0_0() { return cSelfSelfKeyword_1_0_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1() { return cNumberSignKeyword_1_1; }
		
		//spname=[aadl2::Property|QCLREF]
		public Assignment getSpnameAssignment_1_2() { return cSpnameAssignment_1_2; }
		
		//[aadl2::Property|QCLREF]
		public CrossReference getSpnamePropertyCrossReference_1_2_0() { return cSpnamePropertyCrossReference_1_2_0; }
		
		//QCLREF
		public RuleCall getSpnamePropertyQCLREFParserRuleCall_1_2_0_1() { return cSpnamePropertyQCLREFParserRuleCall_1_2_0_1; }
		
		//( field+=PropertyField )*
		public Assignment getFieldAssignment_1_3() { return cFieldAssignment_1_3; }
		
		//PropertyField
		public RuleCall getFieldPropertyFieldParserRuleCall_1_3_0() { return cFieldPropertyFieldParserRuleCall_1_3_0; }
		
		//component=[aadl2::ComponentClassifier|QCREF] '#' cpname=[aadl2::Property|QCLREF]
		//      ( field+=PropertyField )*
		public Group getGroup_2() { return cGroup_2; }
		
		//component=[aadl2::ComponentClassifier|QCREF]
		public Assignment getComponentAssignment_2_0() { return cComponentAssignment_2_0; }
		
		//[aadl2::ComponentClassifier|QCREF]
		public CrossReference getComponentComponentClassifierCrossReference_2_0_0() { return cComponentComponentClassifierCrossReference_2_0_0; }
		
		//QCREF
		public RuleCall getComponentComponentClassifierQCREFParserRuleCall_2_0_0_1() { return cComponentComponentClassifierQCREFParserRuleCall_2_0_0_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_1() { return cNumberSignKeyword_2_1; }
		
		//cpname=[aadl2::Property|QCLREF]
		public Assignment getCpnameAssignment_2_2() { return cCpnameAssignment_2_2; }
		
		//[aadl2::Property|QCLREF]
		public CrossReference getCpnamePropertyCrossReference_2_2_0() { return cCpnamePropertyCrossReference_2_2_0; }
		
		//QCLREF
		public RuleCall getCpnamePropertyQCLREFParserRuleCall_2_2_0_1() { return cCpnamePropertyQCLREFParserRuleCall_2_2_0_1; }
		
		//( field+=PropertyField )*
		public Assignment getFieldAssignment_2_3() { return cFieldAssignment_2_3; }
		
		//PropertyField
		public RuleCall getFieldPropertyFieldParserRuleCall_2_3_0() { return cFieldPropertyFieldParserRuleCall_2_3_0; }
	}
	public class PropertyFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PropertyField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cIndexAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cIndexNUMBERTerminalRuleCall_0_1_0_0 = (RuleCall)cIndexAssignment_0_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0_1_1_0 = (CrossReference)cVariableAssignment_0_1_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cVariableVariableCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cPfAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cPfIDTerminalRuleCall_1_1_0_0 = (RuleCall)cPfAssignment_1_1_0.eContents().get(0);
		private final Assignment cUpperAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cUpperUpper_boundKeyword_1_1_1_0 = (Keyword)cUpperAssignment_1_1_1.eContents().get(0);
		private final Assignment cLowerAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLowerLower_boundKeyword_1_1_2_0 = (Keyword)cLowerAssignment_1_1_2.eContents().get(0);
		
		////PropertyName:
		////    simple=[aadl2::Property|QCLREF] ;
		//PropertyField:
		//    '[' (index=NUMBER | variable=[Variable]) ']'  //must check that number is integer
		//    | '.'  (pf=ID
		//           | upper='upper_bound'
		//           | lower='lower_bound'
		//           )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (index=NUMBER | variable=[Variable]) ']'  //must check that number is integer
		//| '.'  (pf=ID
		//       | upper='upper_bound'
		//       | lower='lower_bound'
		//       )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' (index=NUMBER | variable=[Variable]) ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//(index=NUMBER | variable=[Variable])
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//index=NUMBER
		public Assignment getIndexAssignment_0_1_0() { return cIndexAssignment_0_1_0; }
		
		//NUMBER
		public RuleCall getIndexNUMBERTerminalRuleCall_0_1_0_0() { return cIndexNUMBERTerminalRuleCall_0_1_0_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_0_1_1() { return cVariableAssignment_0_1_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0_1_1_0() { return cVariableVariableCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1_1_0_1() { return cVariableVariableIDTerminalRuleCall_0_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'.'  (pf=ID
		//          | upper='upper_bound'
		//          | lower='lower_bound'
		//          )
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(pf=ID
		//         | upper='upper_bound'
		//         | lower='lower_bound'
		//         )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//pf=ID
		public Assignment getPfAssignment_1_1_0() { return cPfAssignment_1_1_0; }
		
		//ID
		public RuleCall getPfIDTerminalRuleCall_1_1_0_0() { return cPfIDTerminalRuleCall_1_1_0_0; }
		
		//upper='upper_bound'
		public Assignment getUpperAssignment_1_1_1() { return cUpperAssignment_1_1_1; }
		
		//'upper_bound'
		public Keyword getUpperUpper_boundKeyword_1_1_1_0() { return cUpperUpper_boundKeyword_1_1_1_0; }
		
		//lower='lower_bound'
		public Assignment getLowerAssignment_1_1_2() { return cLowerAssignment_1_1_2; }
		
		//'lower_bound'
		public Keyword getLowerLower_boundKeyword_1_1_2_0() { return cLowerLower_boundKeyword_1_1_2_0; }
	}
	public class UnitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLongnameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLongnameIDTerminalRuleCall_0_1_0 = (RuleCall)cLongnameAssignment_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////   UNIT   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//@Exported
		//UnitName:
		//    ( '<' longname+=ID+ '>' )? name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '<' longname+=ID+ '>' )? name=ID
		public Group getGroup() { return cGroup; }
		
		//( '<' longname+=ID+ '>' )?
		public Group getGroup_0() { return cGroup_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }
		
		//longname+=ID+
		public Assignment getLongnameAssignment_0_1() { return cLongnameAssignment_0_1; }
		
		//ID
		public RuleCall getLongnameIDTerminalRuleCall_0_1_0() { return cLongnameIDTerminalRuleCall_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_2() { return cGreaterThanSignKeyword_0_2; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class UnitFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTopAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cTopUnitNameCrossReference_0_0_0 = (CrossReference)cTopAssignment_0_0.eContents().get(0);
		private final RuleCall cTopUnitNameIDTerminalRuleCall_0_0_0_1 = (RuleCall)cTopUnitNameCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cSlashAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cSlashSolidusKeyword_0_1_0_0 = (Keyword)cSlashAssignment_0_1_0.eContents().get(0);
		private final Assignment cBottomAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cBottomUnitNameCrossReference_0_1_1_0 = (CrossReference)cBottomAssignment_0_1_1.eContents().get(0);
		private final RuleCall cBottomUnitNameIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cBottomUnitNameCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSlashAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSlashSolidusKeyword_1_0_0 = (Keyword)cSlashAssignment_1_0.eContents().get(0);
		private final Assignment cBottomAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cBottomUnitNameCrossReference_1_1_0 = (CrossReference)cBottomAssignment_1_1.eContents().get(0);
		private final RuleCall cBottomUnitNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cBottomUnitNameCrossReference_1_1_0.eContents().get(1);
		
		//UnitFormula:
		//    top+=[UnitName]+ ( slash?='/' bottom+=[UnitName]+ )?
		//    |
		//    slash?='/' bottom+=[UnitName]+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//top+=[UnitName]+ ( slash?='/' bottom+=[UnitName]+ )?
		//|
		//slash?='/' bottom+=[UnitName]+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//top+=[UnitName]+ ( slash?='/' bottom+=[UnitName]+ )?
		public Group getGroup_0() { return cGroup_0; }
		
		//top+=[UnitName]+
		public Assignment getTopAssignment_0_0() { return cTopAssignment_0_0; }
		
		//[UnitName]
		public CrossReference getTopUnitNameCrossReference_0_0_0() { return cTopUnitNameCrossReference_0_0_0; }
		
		//ID
		public RuleCall getTopUnitNameIDTerminalRuleCall_0_0_0_1() { return cTopUnitNameIDTerminalRuleCall_0_0_0_1; }
		
		//( slash?='/' bottom+=[UnitName]+ )?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//slash?='/'
		public Assignment getSlashAssignment_0_1_0() { return cSlashAssignment_0_1_0; }
		
		//'/'
		public Keyword getSlashSolidusKeyword_0_1_0_0() { return cSlashSolidusKeyword_0_1_0_0; }
		
		//bottom+=[UnitName]+
		public Assignment getBottomAssignment_0_1_1() { return cBottomAssignment_0_1_1; }
		
		//[UnitName]
		public CrossReference getBottomUnitNameCrossReference_0_1_1_0() { return cBottomUnitNameCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getBottomUnitNameIDTerminalRuleCall_0_1_1_0_1() { return cBottomUnitNameIDTerminalRuleCall_0_1_1_0_1; }
		
		//slash?='/' bottom+=[UnitName]+
		public Group getGroup_1() { return cGroup_1; }
		
		//slash?='/'
		public Assignment getSlashAssignment_1_0() { return cSlashAssignment_1_0; }
		
		//'/'
		public Keyword getSlashSolidusKeyword_1_0_0() { return cSlashSolidusKeyword_1_0_0; }
		
		//bottom+=[UnitName]+
		public Assignment getBottomAssignment_1_1() { return cBottomAssignment_1_1; }
		
		//[UnitName]
		public CrossReference getBottomUnitNameCrossReference_1_1_0() { return cBottomUnitNameCrossReference_1_1_0; }
		
		//ID
		public RuleCall getBottomUnitNameIDTerminalRuleCall_1_1_0_1() { return cBottomUnitNameIDTerminalRuleCall_1_1_0_1; }
	}
	public class UnitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRootDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitExtensionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnitDeclaration:
		//    RootDeclaration | UnitExtension
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RootDeclaration | UnitExtension
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RootDeclaration
		public RuleCall getRootDeclarationParserRuleCall_0() { return cRootDeclarationParserRuleCall_0; }
		
		//UnitExtension
		public RuleCall getUnitExtensionParserRuleCall_1() { return cUnitExtensionParserRuleCall_1; }
	}
	public class RootDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.RootDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBaseBaseKeyword_0_0_0 = (Keyword)cBaseAssignment_0_0.eContents().get(0);
		private final Assignment cFormulaAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cFormulaUnitFormulaParserRuleCall_0_1_0 = (RuleCall)cFormulaAssignment_0_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKindWordsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindWordsIDTerminalRuleCall_2_0 = (RuleCall)cKindWordsAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitNameUnitNameParserRuleCall_4_0 = (RuleCall)cUnitNameAssignment_4.eContents().get(0);
		private final Assignment cFactorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFactorsUnitFactorParserRuleCall_5_0 = (RuleCall)cFactorsAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RootDeclaration:
		//    ( base?='base' | formula=UnitFormula ) '[' kindWords+=ID+ ']'
		//    unitName=UnitName factors+=UnitFactor* ';'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//( base?='base' | formula=UnitFormula ) '[' kindWords+=ID+ ']'
		//unitName=UnitName factors+=UnitFactor* ';'
		public Group getGroup() { return cGroup; }
		
		//( base?='base' | formula=UnitFormula )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//base?='base'
		public Assignment getBaseAssignment_0_0() { return cBaseAssignment_0_0; }
		
		//'base'
		public Keyword getBaseBaseKeyword_0_0_0() { return cBaseBaseKeyword_0_0_0; }
		
		//formula=UnitFormula
		public Assignment getFormulaAssignment_0_1() { return cFormulaAssignment_0_1; }
		
		//UnitFormula
		public RuleCall getFormulaUnitFormulaParserRuleCall_0_1_0() { return cFormulaUnitFormulaParserRuleCall_0_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//kindWords+=ID+
		public Assignment getKindWordsAssignment_2() { return cKindWordsAssignment_2; }
		
		//ID
		public RuleCall getKindWordsIDTerminalRuleCall_2_0() { return cKindWordsIDTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//unitName=UnitName
		public Assignment getUnitNameAssignment_4() { return cUnitNameAssignment_4; }
		
		//UnitName
		public RuleCall getUnitNameUnitNameParserRuleCall_4_0() { return cUnitNameUnitNameParserRuleCall_4_0; }
		
		//factors+=UnitFactor*
		public Assignment getFactorsAssignment_5() { return cFactorsAssignment_5; }
		
		//UnitFactor
		public RuleCall getFactorsUnitFactorParserRuleCall_5_0() { return cFactorsUnitFactorParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class UnitExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRootUnitNameCrossReference_1_0 = (CrossReference)cRootAssignment_1.eContents().get(0);
		private final RuleCall cRootUnitNameIDTerminalRuleCall_1_0_1 = (RuleCall)cRootUnitNameCrossReference_1_0.eContents().get(1);
		private final Assignment cFactorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFactorsUnitFactorParserRuleCall_2_0 = (RuleCall)cFactorsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UnitExtension:
		//    'extension' root=[UnitName] factors+=UnitFactor+ ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' root=[UnitName] factors+=UnitFactor+ ';'
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//root=[UnitName]
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//[UnitName]
		public CrossReference getRootUnitNameCrossReference_1_0() { return cRootUnitNameCrossReference_1_0; }
		
		//ID
		public RuleCall getRootUnitNameIDTerminalRuleCall_1_0_1() { return cRootUnitNameIDTerminalRuleCall_1_0_1; }
		
		//factors+=UnitFactor+
		public Assignment getFactorsAssignment_2() { return cFactorsAssignment_2; }
		
		//UnitFactor
		public RuleCall getFactorsUnitFactorParserRuleCall_2_0() { return cFactorsUnitFactorParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MulDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.MulDiv");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTIMESParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MulDiv: ( TIMES | '/' );
		@Override public ParserRule getRule() { return rule; }
		
		//( TIMES | '/' )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TIMES
		public RuleCall getTIMESParserRuleCall_0() { return cTIMESParserRuleCall_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class UnitFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.UnitFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitNameParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpMulDivParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cFactorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFactorPositiveNumberParserRuleCall_3_0 = (RuleCall)cFactorAssignment_3.eContents().get(0);
		
		//UnitFactor: ',' unit=UnitName op=MulDiv factor=PositiveNumber;
		@Override public ParserRule getRule() { return rule; }
		
		//',' unit=UnitName op=MulDiv factor=PositiveNumber
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//unit=UnitName
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//UnitName
		public RuleCall getUnitUnitNameParserRuleCall_1_0() { return cUnitUnitNameParserRuleCall_1_0; }
		
		//op=MulDiv
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//MulDiv
		public RuleCall getOpMulDivParserRuleCall_2_0() { return cOpMulDivParserRuleCall_2_0; }
		
		//factor=PositiveNumber
		public Assignment getFactorAssignment_3() { return cFactorAssignment_3; }
		
		//PositiveNumber
		public RuleCall getFactorPositiveNumberParserRuleCall_3_0() { return cFactorPositiveNumberParserRuleCall_3_0; }
	}
	public class QuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Quantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberANumberParserRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cUnitAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cUnitUnitNameCrossReference_1_0_0 = (CrossReference)cUnitAssignment_1_0.eContents().get(0);
		private final RuleCall cUnitUnitNameIDTerminalRuleCall_1_0_0_1 = (RuleCall)cUnitUnitNameCrossReference_1_0_0.eContents().get(1);
		private final Assignment cScalarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cScalarScalarKeyword_1_1_0 = (Keyword)cScalarAssignment_1_1.eContents().get(0);
		private final Assignment cWholeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cWholeWholeKeyword_1_2_0 = (Keyword)cWholeAssignment_1_2.eContents().get(0);
		
		//Quantity: number=ANumber
		//    (unit=[UnitName] | scalar='scalar' | whole='whole' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//number=ANumber
		//   (unit=[UnitName] | scalar='scalar' | whole='whole' )?
		public Group getGroup() { return cGroup; }
		
		//number=ANumber
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//ANumber
		public RuleCall getNumberANumberParserRuleCall_0_0() { return cNumberANumberParserRuleCall_0_0; }
		
		//(unit=[UnitName] | scalar='scalar' | whole='whole' )?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//unit=[UnitName]
		public Assignment getUnitAssignment_1_0() { return cUnitAssignment_1_0; }
		
		//[UnitName]
		public CrossReference getUnitUnitNameCrossReference_1_0_0() { return cUnitUnitNameCrossReference_1_0_0; }
		
		//ID
		public RuleCall getUnitUnitNameIDTerminalRuleCall_1_0_0_1() { return cUnitUnitNameIDTerminalRuleCall_1_0_0_1; }
		
		//scalar='scalar'
		public Assignment getScalarAssignment_1_1() { return cScalarAssignment_1_1; }
		
		//'scalar'
		public Keyword getScalarScalarKeyword_1_1_0() { return cScalarScalarKeyword_1_1_0; }
		
		//whole='whole'
		public Assignment getWholeAssignment_1_2() { return cWholeAssignment_1_2; }
		
		//'whole'
		public Keyword getWholeWholeKeyword_1_2_0() { return cWholeWholeKeyword_1_2_0; }
	}
	public class PositiveNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.PositiveNumber");
		private final RuleCall cNUMBERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PositiveNumber:
		//    NUMBER  //check no leading '-'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall() { return cNUMBERTerminalRuleCall; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNamedAssertionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExceptionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBehaviorStateParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForallVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGhostVariableParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBehaviorTransitionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		////////////////////////// AADL Elements  //////////////////////////////
		//NamedElement returns aadl2::NamedElement:
		//    UnitName
		//    | TypeDeclaration
		////    | EnumerationLiteral
		//    | NamedAssertion
		//  | Variable
		//  | Exception
		//  | BehaviorState
		//  | ForallVariable
		//  | GhostVariable
		//  | BehaviorTransition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    UnitName
		//    | TypeDeclaration
		////    | EnumerationLiteral
		//    | NamedAssertion
		//  | Variable
		//  | Exception
		//  | BehaviorState
		//  | ForallVariable
		//  | GhostVariable
		//  | BehaviorTransition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitName
		public RuleCall getUnitNameParserRuleCall_0() { return cUnitNameParserRuleCall_0; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_1() { return cTypeDeclarationParserRuleCall_1; }
		
		//NamedAssertion
		public RuleCall getNamedAssertionParserRuleCall_2() { return cNamedAssertionParserRuleCall_2; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }
		
		//Exception
		public RuleCall getExceptionParserRuleCall_4() { return cExceptionParserRuleCall_4; }
		
		//BehaviorState
		public RuleCall getBehaviorStateParserRuleCall_5() { return cBehaviorStateParserRuleCall_5; }
		
		//ForallVariable
		public RuleCall getForallVariableParserRuleCall_6() { return cForallVariableParserRuleCall_6; }
		
		//GhostVariable
		public RuleCall getGhostVariableParserRuleCall_7() { return cGhostVariableParserRuleCall_7; }
		
		//BehaviorTransition
		public RuleCall getBehaviorTransitionParserRuleCall_8() { return cBehaviorTransitionParserRuleCall_8; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnitDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnitFactorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitFormulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQuantityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cQuantityTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArrayTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRecordTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBooleanTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStringTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPropertyReferenceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cArrayRangeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cArrayRangeListParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cTypeOrReferenceParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cActualParameterParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cANumberParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAddSubParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cAssertionEnumerationParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cAssertionFunctionValueParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cAssertionNumericExpressionParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cBooleanExpressionParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cCaseChoiceParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cCaseExpressionParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cConditionValuePairParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cConditionalAssertionFunctionParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cConditionalExpressionParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cConjunctionParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cConstantParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cCountingQuantificationParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cDisjunctionParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cEnumerationPairParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cEnumerationValueParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cExistentialQuantificationParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cExpParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cExpressionParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cIndexExpressionParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cInvocationParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cInvariantClauseParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		private final RuleCall cLogicVariablesParserRuleCall_38 = (RuleCall)cAlternatives.eContents().get(38);
		private final RuleCall cMultDivParserRuleCall_39 = (RuleCall)cAlternatives.eContents().get(39);
		private final RuleCall cNonNumericPropertyParserRuleCall_40 = (RuleCall)cAlternatives.eContents().get(40);
		private final RuleCall cNumericExpressionParserRuleCall_41 = (RuleCall)cAlternatives.eContents().get(41);
		private final RuleCall cNullTypeParserRuleCall_42 = (RuleCall)cAlternatives.eContents().get(42);
		private final RuleCall cParenthesizedSubexpressionParserRuleCall_43 = (RuleCall)cAlternatives.eContents().get(43);
		private final RuleCall cPartialNameParserRuleCall_44 = (RuleCall)cAlternatives.eContents().get(44);
		private final RuleCall cPeriodShiftParserRuleCall_45 = (RuleCall)cAlternatives.eContents().get(45);
		private final RuleCall cPredicateParserRuleCall_46 = (RuleCall)cAlternatives.eContents().get(46);
		private final RuleCall cProductQuantificationParserRuleCall_47 = (RuleCall)cAlternatives.eContents().get(47);
		private final RuleCall cPropertyFieldParserRuleCall_48 = (RuleCall)cAlternatives.eContents().get(48);
		private final RuleCall cRangeParserRuleCall_49 = (RuleCall)cAlternatives.eContents().get(49);
		private final RuleCall cRecordFieldParserRuleCall_50 = (RuleCall)cAlternatives.eContents().get(50);
		private final RuleCall cRecordTermParserRuleCall_51 = (RuleCall)cAlternatives.eContents().get(51);
		private final RuleCall cRecordValueParserRuleCall_52 = (RuleCall)cAlternatives.eContents().get(52);
		private final RuleCall cRelationParserRuleCall_53 = (RuleCall)cAlternatives.eContents().get(53);
		private final RuleCall cSubexpressionParserRuleCall_54 = (RuleCall)cAlternatives.eContents().get(54);
		private final RuleCall cSumQuantificationParserRuleCall_55 = (RuleCall)cAlternatives.eContents().get(55);
		private final RuleCall cTimedExpressionParserRuleCall_56 = (RuleCall)cAlternatives.eContents().get(56);
		private final RuleCall cTimedSubjectParserRuleCall_57 = (RuleCall)cAlternatives.eContents().get(57);
		private final RuleCall cUnaryOperatorParserRuleCall_58 = (RuleCall)cAlternatives.eContents().get(58);
		private final RuleCall cUniversalQuantificationParserRuleCall_59 = (RuleCall)cAlternatives.eContents().get(59);
		private final RuleCall cValueParserRuleCall_60 = (RuleCall)cAlternatives.eContents().get(60);
		private final RuleCall cValueNameParserRuleCall_61 = (RuleCall)cAlternatives.eContents().get(61);
		private final RuleCall cVariableListParserRuleCall_62 = (RuleCall)cAlternatives.eContents().get(62);
		private final RuleCall cAssertionParserRuleCall_63 = (RuleCall)cAlternatives.eContents().get(63);
		private final RuleCall cAssertionLibraryParserRuleCall_64 = (RuleCall)cAlternatives.eContents().get(64);
		private final RuleCall cGhostVariablesParserRuleCall_65 = (RuleCall)cAlternatives.eContents().get(65);
		private final RuleCall cNamelessAssertionParserRuleCall_66 = (RuleCall)cAlternatives.eContents().get(66);
		private final RuleCall cNamelessEnumerationParserRuleCall_67 = (RuleCall)cAlternatives.eContents().get(67);
		private final RuleCall cNamelessFunctionParserRuleCall_68 = (RuleCall)cAlternatives.eContents().get(68);
		private final RuleCall cActionSubclauseParserRuleCall_69 = (RuleCall)cAlternatives.eContents().get(69);
		private final RuleCall cActionParserRuleCall_70 = (RuleCall)cAlternatives.eContents().get(70);
		private final RuleCall cActionTimeoutParserRuleCall_71 = (RuleCall)cAlternatives.eContents().get(71);
		private final RuleCall cActualParameterParserRuleCall_72 = (RuleCall)cAlternatives.eContents().get(72);
		private final RuleCall cAlternativeParserRuleCall_73 = (RuleCall)cAlternatives.eContents().get(73);
		private final RuleCall cBLESSAlternativeParserRuleCall_74 = (RuleCall)cAlternatives.eContents().get(74);
		private final RuleCall cAssertClauseParserRuleCall_75 = (RuleCall)cAlternatives.eContents().get(75);
		private final RuleCall cAssertedActionParserRuleCall_76 = (RuleCall)cAlternatives.eContents().get(76);
		private final RuleCall cAssignmentParserRuleCall_77 = (RuleCall)cAlternatives.eContents().get(77);
		private final RuleCall cBAAlternativeParserRuleCall_78 = (RuleCall)cAlternatives.eContents().get(78);
		private final RuleCall cBasicActionParserRuleCall_79 = (RuleCall)cAlternatives.eContents().get(79);
		private final RuleCall cBehaviorActionsParserRuleCall_80 = (RuleCall)cAlternatives.eContents().get(80);
		private final RuleCall cBehaviorTimeParserRuleCall_81 = (RuleCall)cAlternatives.eContents().get(81);
		private final RuleCall cVariableDeclarationParserRuleCall_82 = (RuleCall)cAlternatives.eContents().get(82);
		private final RuleCall cCatchClauseParserRuleCall_83 = (RuleCall)cAlternatives.eContents().get(83);
		private final RuleCall cCatchClauseTermParserRuleCall_84 = (RuleCall)cAlternatives.eContents().get(84);
		private final RuleCall cCombinableOperationParserRuleCall_85 = (RuleCall)cAlternatives.eContents().get(85);
		private final RuleCall cCommunicationActionParserRuleCall_86 = (RuleCall)cAlternatives.eContents().get(86);
		private final RuleCall cComputationParserRuleCall_87 = (RuleCall)cAlternatives.eContents().get(87);
		private final RuleCall cDoUntilLoopParserRuleCall_88 = (RuleCall)cAlternatives.eContents().get(88);
		private final RuleCall cElseAlternativeParserRuleCall_89 = (RuleCall)cAlternatives.eContents().get(89);
		private final RuleCall cElseifAlternativeParserRuleCall_90 = (RuleCall)cAlternatives.eContents().get(90);
		private final RuleCall cExistentialLatticeQuantificationParserRuleCall_91 = (RuleCall)cAlternatives.eContents().get(91);
		private final RuleCall cExpressionParserRuleCall_92 = (RuleCall)cAlternatives.eContents().get(92);
		private final RuleCall cExpressionOrAnyParserRuleCall_93 = (RuleCall)cAlternatives.eContents().get(93);
		private final RuleCall cForLoopParserRuleCall_94 = (RuleCall)cAlternatives.eContents().get(94);
		private final RuleCall cFormalActualParserRuleCall_95 = (RuleCall)cAlternatives.eContents().get(95);
		private final RuleCall cFormalActualListParserRuleCall_96 = (RuleCall)cAlternatives.eContents().get(96);
		private final RuleCall cFormalExpressionPairParserRuleCall_97 = (RuleCall)cAlternatives.eContents().get(97);
		private final RuleCall cFunctionParametersParserRuleCall_98 = (RuleCall)cAlternatives.eContents().get(98);
		private final RuleCall cGuardedActionParserRuleCall_99 = (RuleCall)cAlternatives.eContents().get(99);
		private final RuleCall cIssueExceptionParserRuleCall_100 = (RuleCall)cAlternatives.eContents().get(100);
		private final RuleCall cPeriodShiftParserRuleCall_101 = (RuleCall)cAlternatives.eContents().get(101);
		private final RuleCall cPortInputParserRuleCall_102 = (RuleCall)cAlternatives.eContents().get(102);
		private final RuleCall cPortOutputParserRuleCall_103 = (RuleCall)cAlternatives.eContents().get(103);
		private final RuleCall cQuantifiedVariablesParserRuleCall_104 = (RuleCall)cAlternatives.eContents().get(104);
		private final RuleCall cRangeParserRuleCall_105 = (RuleCall)cAlternatives.eContents().get(105);
		private final RuleCall cRecordTermParserRuleCall_106 = (RuleCall)cAlternatives.eContents().get(106);
		private final RuleCall cRecordValueParserRuleCall_107 = (RuleCall)cAlternatives.eContents().get(107);
		private final RuleCall cSimultaneousAssignmentParserRuleCall_108 = (RuleCall)cAlternatives.eContents().get(108);
		private final RuleCall cSubprogramCallParserRuleCall_109 = (RuleCall)cAlternatives.eContents().get(109);
		private final RuleCall cSubProgramParameterParserRuleCall_110 = (RuleCall)cAlternatives.eContents().get(110);
		private final RuleCall cUniversalLatticeQuantificationParserRuleCall_111 = (RuleCall)cAlternatives.eContents().get(111);
		private final RuleCall cWhenThrowParserRuleCall_112 = (RuleCall)cAlternatives.eContents().get(112);
		private final RuleCall cWhileLoopParserRuleCall_113 = (RuleCall)cAlternatives.eContents().get(113);
		private final RuleCall cBLESSSubclauseParserRuleCall_114 = (RuleCall)cAlternatives.eContents().get(114);
		private final RuleCall cStatesSectionParserRuleCall_115 = (RuleCall)cAlternatives.eContents().get(115);
		private final RuleCall cDispatchConditionParserRuleCall_116 = (RuleCall)cAlternatives.eContents().get(116);
		private final RuleCall cDispatchConjunctionParserRuleCall_117 = (RuleCall)cAlternatives.eContents().get(117);
		private final RuleCall cDispatchExpressionParserRuleCall_118 = (RuleCall)cAlternatives.eContents().get(118);
		private final RuleCall cDispatchTriggerParserRuleCall_119 = (RuleCall)cAlternatives.eContents().get(119);
		private final RuleCall cEventTriggerParserRuleCall_120 = (RuleCall)cAlternatives.eContents().get(120);
		private final RuleCall cExecuteConditionParserRuleCall_121 = (RuleCall)cAlternatives.eContents().get(121);
		private final RuleCall cIndexExpressionOrRangeParserRuleCall_122 = (RuleCall)cAlternatives.eContents().get(122);
		private final RuleCall cInternalConditionParserRuleCall_123 = (RuleCall)cAlternatives.eContents().get(123);
		private final RuleCall cInvariantClauseParserRuleCall_124 = (RuleCall)cAlternatives.eContents().get(124);
		private final RuleCall cLogicalOperatorParserRuleCall_125 = (RuleCall)cAlternatives.eContents().get(125);
		private final RuleCall cModeConditionParserRuleCall_126 = (RuleCall)cAlternatives.eContents().get(126);
		private final RuleCall cOtherwiseParserRuleCall_127 = (RuleCall)cAlternatives.eContents().get(127);
		private final RuleCall cPriorityParserRuleCall_128 = (RuleCall)cAlternatives.eContents().get(128);
		private final RuleCall cSubprogramAccessDispatchParserRuleCall_129 = (RuleCall)cAlternatives.eContents().get(129);
		private final RuleCall cTransitionsParserRuleCall_130 = (RuleCall)cAlternatives.eContents().get(130);
		private final RuleCall cTriggerLogicalExpressionParserRuleCall_131 = (RuleCall)cAlternatives.eContents().get(131);
		private final RuleCall cVariablesSectionParserRuleCall_132 = (RuleCall)cAlternatives.eContents().get(132);
		
		//Element returns aadl2::Element:
		//    UnitDeclaration
		//    | UnitFactor
		//    | UnitFormula
		//    | Quantity
		//    |    EnumerationType
		//    | QuantityType
		//    | ArrayType
		//    | RecordType
		//    | BooleanType
		//    | StringType
		////    | NumericConstant
		////expression
		//    | PropertyReference
		//    | ArrayRange
		//    | ArrayRangeList
		//    | TypeOrReference
		//    | ActualParameter
		//    | ANumber
		//    | AddSub
		//    | AssertionEnumeration
		//    | AssertionFunctionValue
		//    | AssertionNumericExpression
		//    | BooleanExpression
		//    | CaseChoice
		//    | CaseExpression
		//    | ConditionValuePair
		//    | ConditionalAssertionFunction
		//    | ConditionalExpression
		//    | Conjunction
		//    | Constant
		//    | CountingQuantification
		//    | Disjunction
		//    | EnumerationPair
		//    | EnumerationValue
		//    | ExistentialQuantification
		//    | Exp
		//    | Expression
		//    | IndexExpression
		//    | Invocation
		//    | InvariantClause
		//    | LogicVariables
		//    | MultDiv
		//    | NonNumericProperty
		//    | NumericExpression
		//    | NullType
		//    | ParenthesizedSubexpression
		//    | PartialName
		//    | PeriodShift
		//    | Predicate
		//    | ProductQuantification
		//    | PropertyField
		//    | Range
		//  | RecordField
		//    | RecordTerm
		//    | RecordValue
		//    | Relation
		//    | Subexpression
		//    | SumQuantification
		//    | TimedExpression
		//    | TimedSubject
		//    | UnaryOperator
		//    | UniversalQuantification
		//    | Value
		//  | ValueName
		//    | VariableList
		////assertion
		//    | Assertion
		//  | AssertionLibrary
		//  | GhostVariables
		//  | NamelessAssertion
		//  | NamelessEnumeration
		//  | NamelessFunction
		////action
		//    | ActionSubclause
		//    | Action
		//    | ActionTimeout
		//    | ActualParameter
		//    | Alternative
		//    | BLESSAlternative
		//    | AssertClause
		//    | AssertedAction
		//    | Assignment
		//    | BAAlternative
		//    | BasicAction
		//    | BehaviorActions
		//    | BehaviorTime
		////    | BooleanExpression
		//    | VariableDeclaration
		//    | CatchClause
		//    | CatchClauseTerm
		//    | CombinableOperation
		//    | CommunicationAction
		//    | Computation
		//    | DoUntilLoop
		//  | ElseAlternative
		//  | ElseifAlternative
		//    | ExistentialLatticeQuantification
		//    | Expression
		//    | ExpressionOrAny
		//    | ForLoop
		//    | FormalActual
		//    | FormalActualList
		//    | FormalExpressionPair
		//    | FunctionParameters
		//    | GuardedAction
		//  | IssueException
		////    | NameTick
		//    | PeriodShift
		//    | PortInput
		//    | PortOutput
		//    | QuantifiedVariables
		//    | Range
		//    | RecordTerm
		//    | RecordValue
		//    | SimultaneousAssignment
		//    | SubprogramCall
		//    | SubProgramParameter
		//    | UniversalLatticeQuantification
		//    | WhenThrow
		//    | WhileLoop
		////BLESS
		//    | BLESSSubclause
		//    | StatesSection
		////    | BehaviorTransition
		//    | DispatchCondition
		//    | DispatchConjunction
		//    | DispatchExpression
		//    | DispatchTrigger
		//    | EventTrigger
		//    | ExecuteCondition
		//    | IndexExpressionOrRange
		//    | InternalCondition
		//    | InvariantClause
		//    | LogicalOperator
		//    | ModeCondition
		//    | Otherwise
		//    | Priority
		//    | SubprogramAccessDispatch
		//    | Transitions
		////    | TransitionLabel
		//    | TriggerLogicalExpression
		//    | VariablesSection
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    UnitDeclaration
		//    | UnitFactor
		//    | UnitFormula
		//    | Quantity
		//    |    EnumerationType
		//    | QuantityType
		//    | ArrayType
		//    | RecordType
		//    | BooleanType
		//    | StringType
		////    | NumericConstant
		////expression
		//    | PropertyReference
		//    | ArrayRange
		//    | ArrayRangeList
		//    | TypeOrReference
		//    | ActualParameter
		//    | ANumber
		//    | AddSub
		//    | AssertionEnumeration
		//    | AssertionFunctionValue
		//    | AssertionNumericExpression
		//    | BooleanExpression
		//    | CaseChoice
		//    | CaseExpression
		//    | ConditionValuePair
		//    | ConditionalAssertionFunction
		//    | ConditionalExpression
		//    | Conjunction
		//    | Constant
		//    | CountingQuantification
		//    | Disjunction
		//    | EnumerationPair
		//    | EnumerationValue
		//    | ExistentialQuantification
		//    | Exp
		//    | Expression
		//    | IndexExpression
		//    | Invocation
		//    | InvariantClause
		//    | LogicVariables
		//    | MultDiv
		//    | NonNumericProperty
		//    | NumericExpression
		//    | NullType
		//    | ParenthesizedSubexpression
		//    | PartialName
		//    | PeriodShift
		//    | Predicate
		//    | ProductQuantification
		//    | PropertyField
		//    | Range
		//  | RecordField
		//    | RecordTerm
		//    | RecordValue
		//    | Relation
		//    | Subexpression
		//    | SumQuantification
		//    | TimedExpression
		//    | TimedSubject
		//    | UnaryOperator
		//    | UniversalQuantification
		//    | Value
		//  | ValueName
		//    | VariableList
		////assertion
		//    | Assertion
		//  | AssertionLibrary
		//  | GhostVariables
		//  | NamelessAssertion
		//  | NamelessEnumeration
		//  | NamelessFunction
		////action
		//    | ActionSubclause
		//    | Action
		//    | ActionTimeout
		//    | ActualParameter
		//    | Alternative
		//    | BLESSAlternative
		//    | AssertClause
		//    | AssertedAction
		//    | Assignment
		//    | BAAlternative
		//    | BasicAction
		//    | BehaviorActions
		//    | BehaviorTime
		////    | BooleanExpression
		//    | VariableDeclaration
		//    | CatchClause
		//    | CatchClauseTerm
		//    | CombinableOperation
		//    | CommunicationAction
		//    | Computation
		//    | DoUntilLoop
		//  | ElseAlternative
		//  | ElseifAlternative
		//    | ExistentialLatticeQuantification
		//    | Expression
		//    | ExpressionOrAny
		//    | ForLoop
		//    | FormalActual
		//    | FormalActualList
		//    | FormalExpressionPair
		//    | FunctionParameters
		//    | GuardedAction
		//  | IssueException
		////    | NameTick
		//    | PeriodShift
		//    | PortInput
		//    | PortOutput
		//    | QuantifiedVariables
		//    | Range
		//    | RecordTerm
		//    | RecordValue
		//    | SimultaneousAssignment
		//    | SubprogramCall
		//    | SubProgramParameter
		//    | UniversalLatticeQuantification
		//    | WhenThrow
		//    | WhileLoop
		////BLESS
		//    | BLESSSubclause
		//    | StatesSection
		////    | BehaviorTransition
		//    | DispatchCondition
		//    | DispatchConjunction
		//    | DispatchExpression
		//    | DispatchTrigger
		//    | EventTrigger
		//    | ExecuteCondition
		//    | IndexExpressionOrRange
		//    | InternalCondition
		//    | InvariantClause
		//    | LogicalOperator
		//    | ModeCondition
		//    | Otherwise
		//    | Priority
		//    | SubprogramAccessDispatch
		//    | Transitions
		////    | TransitionLabel
		//    | TriggerLogicalExpression
		//    | VariablesSection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnitDeclaration
		public RuleCall getUnitDeclarationParserRuleCall_0() { return cUnitDeclarationParserRuleCall_0; }
		
		//UnitFactor
		public RuleCall getUnitFactorParserRuleCall_1() { return cUnitFactorParserRuleCall_1; }
		
		//UnitFormula
		public RuleCall getUnitFormulaParserRuleCall_2() { return cUnitFormulaParserRuleCall_2; }
		
		//Quantity
		public RuleCall getQuantityParserRuleCall_3() { return cQuantityParserRuleCall_3; }
		
		//EnumerationType
		public RuleCall getEnumerationTypeParserRuleCall_4() { return cEnumerationTypeParserRuleCall_4; }
		
		//QuantityType
		public RuleCall getQuantityTypeParserRuleCall_5() { return cQuantityTypeParserRuleCall_5; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_6() { return cArrayTypeParserRuleCall_6; }
		
		//RecordType
		public RuleCall getRecordTypeParserRuleCall_7() { return cRecordTypeParserRuleCall_7; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_8() { return cBooleanTypeParserRuleCall_8; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_9() { return cStringTypeParserRuleCall_9; }
		
		//PropertyReference
		public RuleCall getPropertyReferenceParserRuleCall_10() { return cPropertyReferenceParserRuleCall_10; }
		
		//ArrayRange
		public RuleCall getArrayRangeParserRuleCall_11() { return cArrayRangeParserRuleCall_11; }
		
		//ArrayRangeList
		public RuleCall getArrayRangeListParserRuleCall_12() { return cArrayRangeListParserRuleCall_12; }
		
		//TypeOrReference
		public RuleCall getTypeOrReferenceParserRuleCall_13() { return cTypeOrReferenceParserRuleCall_13; }
		
		//ActualParameter
		public RuleCall getActualParameterParserRuleCall_14() { return cActualParameterParserRuleCall_14; }
		
		//ANumber
		public RuleCall getANumberParserRuleCall_15() { return cANumberParserRuleCall_15; }
		
		//AddSub
		public RuleCall getAddSubParserRuleCall_16() { return cAddSubParserRuleCall_16; }
		
		//AssertionEnumeration
		public RuleCall getAssertionEnumerationParserRuleCall_17() { return cAssertionEnumerationParserRuleCall_17; }
		
		//AssertionFunctionValue
		public RuleCall getAssertionFunctionValueParserRuleCall_18() { return cAssertionFunctionValueParserRuleCall_18; }
		
		//AssertionNumericExpression
		public RuleCall getAssertionNumericExpressionParserRuleCall_19() { return cAssertionNumericExpressionParserRuleCall_19; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_20() { return cBooleanExpressionParserRuleCall_20; }
		
		//CaseChoice
		public RuleCall getCaseChoiceParserRuleCall_21() { return cCaseChoiceParserRuleCall_21; }
		
		//CaseExpression
		public RuleCall getCaseExpressionParserRuleCall_22() { return cCaseExpressionParserRuleCall_22; }
		
		//ConditionValuePair
		public RuleCall getConditionValuePairParserRuleCall_23() { return cConditionValuePairParserRuleCall_23; }
		
		//ConditionalAssertionFunction
		public RuleCall getConditionalAssertionFunctionParserRuleCall_24() { return cConditionalAssertionFunctionParserRuleCall_24; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_25() { return cConditionalExpressionParserRuleCall_25; }
		
		//Conjunction
		public RuleCall getConjunctionParserRuleCall_26() { return cConjunctionParserRuleCall_26; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_27() { return cConstantParserRuleCall_27; }
		
		//CountingQuantification
		public RuleCall getCountingQuantificationParserRuleCall_28() { return cCountingQuantificationParserRuleCall_28; }
		
		//Disjunction
		public RuleCall getDisjunctionParserRuleCall_29() { return cDisjunctionParserRuleCall_29; }
		
		//EnumerationPair
		public RuleCall getEnumerationPairParserRuleCall_30() { return cEnumerationPairParserRuleCall_30; }
		
		//EnumerationValue
		public RuleCall getEnumerationValueParserRuleCall_31() { return cEnumerationValueParserRuleCall_31; }
		
		//ExistentialQuantification
		public RuleCall getExistentialQuantificationParserRuleCall_32() { return cExistentialQuantificationParserRuleCall_32; }
		
		//Exp
		public RuleCall getExpParserRuleCall_33() { return cExpParserRuleCall_33; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_34() { return cExpressionParserRuleCall_34; }
		
		//IndexExpression
		public RuleCall getIndexExpressionParserRuleCall_35() { return cIndexExpressionParserRuleCall_35; }
		
		//Invocation
		public RuleCall getInvocationParserRuleCall_36() { return cInvocationParserRuleCall_36; }
		
		//InvariantClause
		public RuleCall getInvariantClauseParserRuleCall_37() { return cInvariantClauseParserRuleCall_37; }
		
		//LogicVariables
		public RuleCall getLogicVariablesParserRuleCall_38() { return cLogicVariablesParserRuleCall_38; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_39() { return cMultDivParserRuleCall_39; }
		
		//NonNumericProperty
		public RuleCall getNonNumericPropertyParserRuleCall_40() { return cNonNumericPropertyParserRuleCall_40; }
		
		//NumericExpression
		public RuleCall getNumericExpressionParserRuleCall_41() { return cNumericExpressionParserRuleCall_41; }
		
		//NullType
		public RuleCall getNullTypeParserRuleCall_42() { return cNullTypeParserRuleCall_42; }
		
		//ParenthesizedSubexpression
		public RuleCall getParenthesizedSubexpressionParserRuleCall_43() { return cParenthesizedSubexpressionParserRuleCall_43; }
		
		//PartialName
		public RuleCall getPartialNameParserRuleCall_44() { return cPartialNameParserRuleCall_44; }
		
		//PeriodShift
		public RuleCall getPeriodShiftParserRuleCall_45() { return cPeriodShiftParserRuleCall_45; }
		
		//Predicate
		public RuleCall getPredicateParserRuleCall_46() { return cPredicateParserRuleCall_46; }
		
		//ProductQuantification
		public RuleCall getProductQuantificationParserRuleCall_47() { return cProductQuantificationParserRuleCall_47; }
		
		//PropertyField
		public RuleCall getPropertyFieldParserRuleCall_48() { return cPropertyFieldParserRuleCall_48; }
		
		//Range
		public RuleCall getRangeParserRuleCall_49() { return cRangeParserRuleCall_49; }
		
		//RecordField
		public RuleCall getRecordFieldParserRuleCall_50() { return cRecordFieldParserRuleCall_50; }
		
		//RecordTerm
		public RuleCall getRecordTermParserRuleCall_51() { return cRecordTermParserRuleCall_51; }
		
		//RecordValue
		public RuleCall getRecordValueParserRuleCall_52() { return cRecordValueParserRuleCall_52; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_53() { return cRelationParserRuleCall_53; }
		
		//Subexpression
		public RuleCall getSubexpressionParserRuleCall_54() { return cSubexpressionParserRuleCall_54; }
		
		//SumQuantification
		public RuleCall getSumQuantificationParserRuleCall_55() { return cSumQuantificationParserRuleCall_55; }
		
		//TimedExpression
		public RuleCall getTimedExpressionParserRuleCall_56() { return cTimedExpressionParserRuleCall_56; }
		
		//TimedSubject
		public RuleCall getTimedSubjectParserRuleCall_57() { return cTimedSubjectParserRuleCall_57; }
		
		//UnaryOperator
		public RuleCall getUnaryOperatorParserRuleCall_58() { return cUnaryOperatorParserRuleCall_58; }
		
		//UniversalQuantification
		public RuleCall getUniversalQuantificationParserRuleCall_59() { return cUniversalQuantificationParserRuleCall_59; }
		
		//Value
		public RuleCall getValueParserRuleCall_60() { return cValueParserRuleCall_60; }
		
		//ValueName
		public RuleCall getValueNameParserRuleCall_61() { return cValueNameParserRuleCall_61; }
		
		//VariableList
		public RuleCall getVariableListParserRuleCall_62() { return cVariableListParserRuleCall_62; }
		
		//Assertion
		public RuleCall getAssertionParserRuleCall_63() { return cAssertionParserRuleCall_63; }
		
		//AssertionLibrary
		public RuleCall getAssertionLibraryParserRuleCall_64() { return cAssertionLibraryParserRuleCall_64; }
		
		//GhostVariables
		public RuleCall getGhostVariablesParserRuleCall_65() { return cGhostVariablesParserRuleCall_65; }
		
		//NamelessAssertion
		public RuleCall getNamelessAssertionParserRuleCall_66() { return cNamelessAssertionParserRuleCall_66; }
		
		//NamelessEnumeration
		public RuleCall getNamelessEnumerationParserRuleCall_67() { return cNamelessEnumerationParserRuleCall_67; }
		
		//NamelessFunction
		public RuleCall getNamelessFunctionParserRuleCall_68() { return cNamelessFunctionParserRuleCall_68; }
		
		//ActionSubclause
		public RuleCall getActionSubclauseParserRuleCall_69() { return cActionSubclauseParserRuleCall_69; }
		
		//Action
		public RuleCall getActionParserRuleCall_70() { return cActionParserRuleCall_70; }
		
		//ActionTimeout
		public RuleCall getActionTimeoutParserRuleCall_71() { return cActionTimeoutParserRuleCall_71; }
		
		//ActualParameter
		public RuleCall getActualParameterParserRuleCall_72() { return cActualParameterParserRuleCall_72; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_73() { return cAlternativeParserRuleCall_73; }
		
		//BLESSAlternative
		public RuleCall getBLESSAlternativeParserRuleCall_74() { return cBLESSAlternativeParserRuleCall_74; }
		
		//AssertClause
		public RuleCall getAssertClauseParserRuleCall_75() { return cAssertClauseParserRuleCall_75; }
		
		//AssertedAction
		public RuleCall getAssertedActionParserRuleCall_76() { return cAssertedActionParserRuleCall_76; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_77() { return cAssignmentParserRuleCall_77; }
		
		//BAAlternative
		public RuleCall getBAAlternativeParserRuleCall_78() { return cBAAlternativeParserRuleCall_78; }
		
		//BasicAction
		public RuleCall getBasicActionParserRuleCall_79() { return cBasicActionParserRuleCall_79; }
		
		//BehaviorActions
		public RuleCall getBehaviorActionsParserRuleCall_80() { return cBehaviorActionsParserRuleCall_80; }
		
		//BehaviorTime
		public RuleCall getBehaviorTimeParserRuleCall_81() { return cBehaviorTimeParserRuleCall_81; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_82() { return cVariableDeclarationParserRuleCall_82; }
		
		//CatchClause
		public RuleCall getCatchClauseParserRuleCall_83() { return cCatchClauseParserRuleCall_83; }
		
		//CatchClauseTerm
		public RuleCall getCatchClauseTermParserRuleCall_84() { return cCatchClauseTermParserRuleCall_84; }
		
		//CombinableOperation
		public RuleCall getCombinableOperationParserRuleCall_85() { return cCombinableOperationParserRuleCall_85; }
		
		//CommunicationAction
		public RuleCall getCommunicationActionParserRuleCall_86() { return cCommunicationActionParserRuleCall_86; }
		
		//Computation
		public RuleCall getComputationParserRuleCall_87() { return cComputationParserRuleCall_87; }
		
		//DoUntilLoop
		public RuleCall getDoUntilLoopParserRuleCall_88() { return cDoUntilLoopParserRuleCall_88; }
		
		//ElseAlternative
		public RuleCall getElseAlternativeParserRuleCall_89() { return cElseAlternativeParserRuleCall_89; }
		
		//ElseifAlternative
		public RuleCall getElseifAlternativeParserRuleCall_90() { return cElseifAlternativeParserRuleCall_90; }
		
		//ExistentialLatticeQuantification
		public RuleCall getExistentialLatticeQuantificationParserRuleCall_91() { return cExistentialLatticeQuantificationParserRuleCall_91; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_92() { return cExpressionParserRuleCall_92; }
		
		//ExpressionOrAny
		public RuleCall getExpressionOrAnyParserRuleCall_93() { return cExpressionOrAnyParserRuleCall_93; }
		
		//ForLoop
		public RuleCall getForLoopParserRuleCall_94() { return cForLoopParserRuleCall_94; }
		
		//FormalActual
		public RuleCall getFormalActualParserRuleCall_95() { return cFormalActualParserRuleCall_95; }
		
		//FormalActualList
		public RuleCall getFormalActualListParserRuleCall_96() { return cFormalActualListParserRuleCall_96; }
		
		//FormalExpressionPair
		public RuleCall getFormalExpressionPairParserRuleCall_97() { return cFormalExpressionPairParserRuleCall_97; }
		
		//FunctionParameters
		public RuleCall getFunctionParametersParserRuleCall_98() { return cFunctionParametersParserRuleCall_98; }
		
		//GuardedAction
		public RuleCall getGuardedActionParserRuleCall_99() { return cGuardedActionParserRuleCall_99; }
		
		//IssueException
		public RuleCall getIssueExceptionParserRuleCall_100() { return cIssueExceptionParserRuleCall_100; }
		
		//PeriodShift
		public RuleCall getPeriodShiftParserRuleCall_101() { return cPeriodShiftParserRuleCall_101; }
		
		//PortInput
		public RuleCall getPortInputParserRuleCall_102() { return cPortInputParserRuleCall_102; }
		
		//PortOutput
		public RuleCall getPortOutputParserRuleCall_103() { return cPortOutputParserRuleCall_103; }
		
		//QuantifiedVariables
		public RuleCall getQuantifiedVariablesParserRuleCall_104() { return cQuantifiedVariablesParserRuleCall_104; }
		
		//Range
		public RuleCall getRangeParserRuleCall_105() { return cRangeParserRuleCall_105; }
		
		//RecordTerm
		public RuleCall getRecordTermParserRuleCall_106() { return cRecordTermParserRuleCall_106; }
		
		//RecordValue
		public RuleCall getRecordValueParserRuleCall_107() { return cRecordValueParserRuleCall_107; }
		
		//SimultaneousAssignment
		public RuleCall getSimultaneousAssignmentParserRuleCall_108() { return cSimultaneousAssignmentParserRuleCall_108; }
		
		//SubprogramCall
		public RuleCall getSubprogramCallParserRuleCall_109() { return cSubprogramCallParserRuleCall_109; }
		
		//SubProgramParameter
		public RuleCall getSubProgramParameterParserRuleCall_110() { return cSubProgramParameterParserRuleCall_110; }
		
		//UniversalLatticeQuantification
		public RuleCall getUniversalLatticeQuantificationParserRuleCall_111() { return cUniversalLatticeQuantificationParserRuleCall_111; }
		
		//WhenThrow
		public RuleCall getWhenThrowParserRuleCall_112() { return cWhenThrowParserRuleCall_112; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_113() { return cWhileLoopParserRuleCall_113; }
		
		//BLESSSubclause
		public RuleCall getBLESSSubclauseParserRuleCall_114() { return cBLESSSubclauseParserRuleCall_114; }
		
		//StatesSection
		public RuleCall getStatesSectionParserRuleCall_115() { return cStatesSectionParserRuleCall_115; }
		
		//DispatchCondition
		public RuleCall getDispatchConditionParserRuleCall_116() { return cDispatchConditionParserRuleCall_116; }
		
		//DispatchConjunction
		public RuleCall getDispatchConjunctionParserRuleCall_117() { return cDispatchConjunctionParserRuleCall_117; }
		
		//DispatchExpression
		public RuleCall getDispatchExpressionParserRuleCall_118() { return cDispatchExpressionParserRuleCall_118; }
		
		//DispatchTrigger
		public RuleCall getDispatchTriggerParserRuleCall_119() { return cDispatchTriggerParserRuleCall_119; }
		
		//EventTrigger
		public RuleCall getEventTriggerParserRuleCall_120() { return cEventTriggerParserRuleCall_120; }
		
		//ExecuteCondition
		public RuleCall getExecuteConditionParserRuleCall_121() { return cExecuteConditionParserRuleCall_121; }
		
		//IndexExpressionOrRange
		public RuleCall getIndexExpressionOrRangeParserRuleCall_122() { return cIndexExpressionOrRangeParserRuleCall_122; }
		
		//InternalCondition
		public RuleCall getInternalConditionParserRuleCall_123() { return cInternalConditionParserRuleCall_123; }
		
		//InvariantClause
		public RuleCall getInvariantClauseParserRuleCall_124() { return cInvariantClauseParserRuleCall_124; }
		
		//LogicalOperator
		public RuleCall getLogicalOperatorParserRuleCall_125() { return cLogicalOperatorParserRuleCall_125; }
		
		//ModeCondition
		public RuleCall getModeConditionParserRuleCall_126() { return cModeConditionParserRuleCall_126; }
		
		//Otherwise
		public RuleCall getOtherwiseParserRuleCall_127() { return cOtherwiseParserRuleCall_127; }
		
		//Priority
		public RuleCall getPriorityParserRuleCall_128() { return cPriorityParserRuleCall_128; }
		
		//SubprogramAccessDispatch
		public RuleCall getSubprogramAccessDispatchParserRuleCall_129() { return cSubprogramAccessDispatchParserRuleCall_129; }
		
		//Transitions
		public RuleCall getTransitionsParserRuleCall_130() { return cTransitionsParserRuleCall_130; }
		
		//TriggerLogicalExpression
		public RuleCall getTriggerLogicalExpressionParserRuleCall_131() { return cTriggerLogicalExpressionParserRuleCall_131; }
		
		//VariablesSection
		public RuleCall getVariablesSectionParserRuleCall_132() { return cVariablesSectionParserRuleCall_132; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuantityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecordTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNullTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////this must come after aadl2::Element
		//Type:
		//    EnumerationType
		//    | QuantityType
		//    | ArrayType
		//    | RecordType
		//    | BooleanType
		//    | StringType
		//    | NullType
		////    | DataComponentReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumerationType
		//| QuantityType
		//| ArrayType
		//| RecordType
		//| BooleanType
		//| StringType
		//| NullType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumerationType
		public RuleCall getEnumerationTypeParserRuleCall_0() { return cEnumerationTypeParserRuleCall_0; }
		
		//QuantityType
		public RuleCall getQuantityTypeParserRuleCall_1() { return cQuantityTypeParserRuleCall_1; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_2() { return cArrayTypeParserRuleCall_2; }
		
		//RecordType
		public RuleCall getRecordTypeParserRuleCall_3() { return cRecordTypeParserRuleCall_3; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_4() { return cBooleanTypeParserRuleCall_4; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_5() { return cStringTypeParserRuleCall_5; }
		
		//NullType
		public RuleCall getNullTypeParserRuleCall_6() { return cNullTypeParserRuleCall_6; }
	}
	public class QCLREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.QCLREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QCLREF:
		//    ID '::' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '::' ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QPREF:
		//    ID ('::' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('::' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//    (ID '::')* ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID '::')* ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//(ID '::')*
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('.' ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}
	public class TIMESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.TIMES");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		////IDDOTID:    ID '.' ID;
		//TIMES : '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	
	
	private final BLESSGrammarRootsElements pBLESSGrammarRoots;
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final BLESSSubclauseElements pBLESSSubclause;
	private final UnitLibraryElements pUnitLibrary;
	private final AssertionLibraryElements pAssertionLibrary;
	private final ExceptionLibraryElements pExceptionLibrary;
	private final ActionSubclauseElements pActionSubclause;
	private final InvariantClauseElements pInvariantClause;
	private final VariablesSectionElements pVariablesSection;
	private final StatesSectionElements pStatesSection;
	private final BehaviorStateElements pBehaviorState;
	private final TransitionsElements pTransitions;
	private final BehaviorTransitionElements pBehaviorTransition;
	private final PriorityElements pPriority;
	private final DispatchConditionElements pDispatchCondition;
	private final DispatchExpressionElements pDispatchExpression;
	private final SubprogramAccessDispatchElements pSubprogramAccessDispatch;
	private final DispatchConjunctionElements pDispatchConjunction;
	private final DispatchTriggerElements pDispatchTrigger;
	private final PortNameElements pPortName;
	private final ExecuteConditionElements pExecuteCondition;
	private final ExecuteTimeoutElements pExecuteTimeout;
	private final OtherwiseElements pOtherwise;
	private final ModeConditionElements pModeCondition;
	private final TriggerLogicalExpressionElements pTriggerLogicalExpression;
	private final EventTriggerElements pEventTrigger;
	private final LogicalOperatorElements pLogicalOperator;
	private final InternalConditionElements pInternalCondition;
	private final AssertClauseElements pAssertClause;
	private final ExistentialLatticeQuantificationElements pExistentialLatticeQuantification;
	private final QuantifiedVariablesElements pQuantifiedVariables;
	private final UniversalLatticeQuantificationElements pUniversalLatticeQuantification;
	private final ForallVariableElements pForallVariable;
	private final VariableDeclarationElements pVariableDeclaration;
	private final FunctionParametersElements pFunctionParameters;
	private final FormalExpressionPairElements pFormalExpressionPair;
	private final BehaviorActionsElements pBehaviorActions;
	private final AssertedActionElements pAssertedAction;
	private final ActionElements pAction;
	private final BasicActionElements pBasicAction;
	private final CombinableOperationElements pCombinableOperation;
	private final CommunicationActionElements pCommunicationAction;
	private final SubprogramCallElements pSubprogramCall;
	private final FormalActualListElements pFormalActualList;
	private final FormalActualElements pFormalActual;
	private final SubProgramParameterElements pSubProgramParameter;
	private final PortOutputElements pPortOutput;
	private final PortInputElements pPortInput;
	private final AssignmentElements pAssignment;
	private final ExpressionOrAnyElements pExpressionOrAny;
	private final AnyElements pAny;
	private final SimultaneousAssignmentElements pSimultaneousAssignment;
	private final AlternativeElements pAlternative;
	private final BLESSAlternativeElements pBLESSAlternative;
	private final GuardedActionElements pGuardedAction;
	private final WhileLoopElements pWhileLoop;
	private final ForLoopElements pForLoop;
	private final DoUntilLoopElements pDoUntilLoop;
	private final ThrowsClauseElements pThrowsClause;
	private final CatchClauseElements pCatchClause;
	private final CatchClauseTermElements pCatchClauseTerm;
	private final WhenThrowElements pWhenThrow;
	private final ComputationElements pComputation;
	private final BAAlternativeElements pBAAlternative;
	private final ElseifAlternativeElements pElseifAlternative;
	private final ElseAlternativeElements pElseAlternative;
	private final IssueExceptionElements pIssueException;
	private final LockingActionElements pLockingAction;
	private final FreezePortElements pFreezePort;
	private final PauseElements pPause;
	private final ActionTimeoutElements pActionTimeout;
	private final BehaviorTimeElements pBehaviorTime;
	private final ExceptionElements pException;
	private final GhostVariablesElements pGhostVariables;
	private final GhostVariableElements pGhostVariable;
	private final AssertionElements pAssertion;
	private final NamedAssertionElements pNamedAssertion;
	private final NamelessAssertionElements pNamelessAssertion;
	private final NamelessFunctionElements pNamelessFunction;
	private final NamelessEnumerationElements pNamelessEnumeration;
	private final PredicateElements pPredicate;
	private final AssertionNumericExpressionElements pAssertionNumericExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final NumericExpressionElements pNumericExpression;
	private final ExpressionElements pExpression;
	private final DisjunctionElements pDisjunction;
	private final ConjunctionElements pConjunction;
	private final RelationElements pRelation;
	private final AddSubElements pAddSub;
	private final MultDivElements pMultDiv;
	private final ExpElements pExp;
	private final SubexpressionElements pSubexpression;
	private final TimedExpressionElements pTimedExpression;
	private final TimedSubjectElements pTimedSubject;
	private final ParenthesizedSubexpressionElements pParenthesizedSubexpression;
	private final UnaryOperatorElements pUnaryOperator;
	private final RangeElements pRange;
	private final RangeSymbolElements pRangeSymbol;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ValueElements pValue;
	private final EnumerationValueElements pEnumerationValue;
	private final ConstantElements pConstant;
	private final NonNumericPropertyElements pNonNumericProperty;
	private final VariableElements pVariable;
	private final ValueNameElements pValueName;
	private final PartialNameElements pPartialName;
	private final IndexExpressionOrRangeElements pIndexExpressionOrRange;
	private final PeriodShiftElements pPeriodShift;
	private final IndexExpressionElements pIndexExpression;
	private final CaseExpressionElements pCaseExpression;
	private final CaseChoiceElements pCaseChoice;
	private final LogicVariablesElements pLogicVariables;
	private final SumQuantificationElements pSumQuantification;
	private final ProductQuantificationElements pProductQuantification;
	private final CountingQuantificationElements pCountingQuantification;
	private final UniversalQuantificationElements pUniversalQuantification;
	private final ExistentialQuantificationElements pExistentialQuantification;
	private final RecordTermElements pRecordTerm;
	private final RecordValueElements pRecordValue;
	private final InvocationElements pInvocation;
	private final ActualParameterElements pActualParameter;
	private final VariableListElements pVariableList;
	private final AssertionFunctionValueElements pAssertionFunctionValue;
	private final ConditionalAssertionFunctionElements pConditionalAssertionFunction;
	private final ConditionValuePairElements pConditionValuePair;
	private final AssertionEnumerationElements pAssertionEnumeration;
	private final EnumerationPairElements pEnumerationPair;
	private final TypeLibraryElements pTypeLibrary;
	private final TypeDeclarationElements pTypeDeclaration;
	private final TypeOrReferenceElements pTypeOrReference;
	private final BooleanTypeElements pBooleanType;
	private final StringTypeElements pStringType;
	private final NullTypeElements pNullType;
	private final EnumerationTypeElements pEnumerationType;
	private final QuantityTypeElements pQuantityType;
	private final ANumberElements pANumber;
	private final ArrayTypeElements pArrayType;
	private final ArrayRangeListElements pArrayRangeList;
	private final ArrayRangeElements pArrayRange;
	private final RecordTypeElements pRecordType;
	private final RecordFieldElements pRecordField;
	private final PropertyReferenceElements pPropertyReference;
	private final PropertyFieldElements pPropertyField;
	private final UnitNameElements pUnitName;
	private final UnitFormulaElements pUnitFormula;
	private final UnitDeclarationElements pUnitDeclaration;
	private final RootDeclarationElements pRootDeclaration;
	private final UnitExtensionElements pUnitExtension;
	private final MulDivElements pMulDiv;
	private final UnitFactorElements pUnitFactor;
	private final QuantityElements pQuantity;
	private final PositiveNumberElements pPositiveNumber;
	private final NamedElementElements pNamedElement;
	private final ElementElements pElement;
	private final TypeElements pType;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tNUMBER;
	private final TerminalRule tLETTER;
	private final QCLREFElements pQCLREF;
	private final QPREFElements pQPREF;
	private final QCREFElements pQCREF;
	private final TIMESElements pTIMES;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tDOTDOT;
	private final TerminalRule tCOMMADOT;
	private final TerminalRule tDOTCOMMA;
	private final TerminalRule tCOMMACOMMA;
	
	private final Grammar grammar;

	@Inject
	public BLESSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pBLESSGrammarRoots = new BLESSGrammarRootsElements();
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pBLESSSubclause = new BLESSSubclauseElements();
		this.pUnitLibrary = new UnitLibraryElements();
		this.pAssertionLibrary = new AssertionLibraryElements();
		this.pExceptionLibrary = new ExceptionLibraryElements();
		this.pActionSubclause = new ActionSubclauseElements();
		this.pInvariantClause = new InvariantClauseElements();
		this.pVariablesSection = new VariablesSectionElements();
		this.pStatesSection = new StatesSectionElements();
		this.pBehaviorState = new BehaviorStateElements();
		this.pTransitions = new TransitionsElements();
		this.pBehaviorTransition = new BehaviorTransitionElements();
		this.pPriority = new PriorityElements();
		this.pDispatchCondition = new DispatchConditionElements();
		this.pDispatchExpression = new DispatchExpressionElements();
		this.pSubprogramAccessDispatch = new SubprogramAccessDispatchElements();
		this.pDispatchConjunction = new DispatchConjunctionElements();
		this.pDispatchTrigger = new DispatchTriggerElements();
		this.pPortName = new PortNameElements();
		this.pExecuteCondition = new ExecuteConditionElements();
		this.pExecuteTimeout = new ExecuteTimeoutElements();
		this.pOtherwise = new OtherwiseElements();
		this.pModeCondition = new ModeConditionElements();
		this.pTriggerLogicalExpression = new TriggerLogicalExpressionElements();
		this.pEventTrigger = new EventTriggerElements();
		this.pLogicalOperator = new LogicalOperatorElements();
		this.pInternalCondition = new InternalConditionElements();
		this.pAssertClause = new AssertClauseElements();
		this.pExistentialLatticeQuantification = new ExistentialLatticeQuantificationElements();
		this.pQuantifiedVariables = new QuantifiedVariablesElements();
		this.pUniversalLatticeQuantification = new UniversalLatticeQuantificationElements();
		this.pForallVariable = new ForallVariableElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pFunctionParameters = new FunctionParametersElements();
		this.pFormalExpressionPair = new FormalExpressionPairElements();
		this.pBehaviorActions = new BehaviorActionsElements();
		this.pAssertedAction = new AssertedActionElements();
		this.pAction = new ActionElements();
		this.pBasicAction = new BasicActionElements();
		this.pCombinableOperation = new CombinableOperationElements();
		this.pCommunicationAction = new CommunicationActionElements();
		this.pSubprogramCall = new SubprogramCallElements();
		this.pFormalActualList = new FormalActualListElements();
		this.pFormalActual = new FormalActualElements();
		this.pSubProgramParameter = new SubProgramParameterElements();
		this.pPortOutput = new PortOutputElements();
		this.pPortInput = new PortInputElements();
		this.pAssignment = new AssignmentElements();
		this.pExpressionOrAny = new ExpressionOrAnyElements();
		this.pAny = new AnyElements();
		this.pSimultaneousAssignment = new SimultaneousAssignmentElements();
		this.pAlternative = new AlternativeElements();
		this.pBLESSAlternative = new BLESSAlternativeElements();
		this.pGuardedAction = new GuardedActionElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pForLoop = new ForLoopElements();
		this.pDoUntilLoop = new DoUntilLoopElements();
		this.pThrowsClause = new ThrowsClauseElements();
		this.pCatchClause = new CatchClauseElements();
		this.pCatchClauseTerm = new CatchClauseTermElements();
		this.pWhenThrow = new WhenThrowElements();
		this.pComputation = new ComputationElements();
		this.pBAAlternative = new BAAlternativeElements();
		this.pElseifAlternative = new ElseifAlternativeElements();
		this.pElseAlternative = new ElseAlternativeElements();
		this.pIssueException = new IssueExceptionElements();
		this.pLockingAction = new LockingActionElements();
		this.pFreezePort = new FreezePortElements();
		this.pPause = new PauseElements();
		this.pActionTimeout = new ActionTimeoutElements();
		this.pBehaviorTime = new BehaviorTimeElements();
		this.pException = new ExceptionElements();
		this.pGhostVariables = new GhostVariablesElements();
		this.pGhostVariable = new GhostVariableElements();
		this.pAssertion = new AssertionElements();
		this.pNamedAssertion = new NamedAssertionElements();
		this.pNamelessAssertion = new NamelessAssertionElements();
		this.pNamelessFunction = new NamelessFunctionElements();
		this.pNamelessEnumeration = new NamelessEnumerationElements();
		this.pPredicate = new PredicateElements();
		this.pAssertionNumericExpression = new AssertionNumericExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pNumericExpression = new NumericExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pDisjunction = new DisjunctionElements();
		this.pConjunction = new ConjunctionElements();
		this.pRelation = new RelationElements();
		this.pAddSub = new AddSubElements();
		this.pMultDiv = new MultDivElements();
		this.pExp = new ExpElements();
		this.pSubexpression = new SubexpressionElements();
		this.pTimedExpression = new TimedExpressionElements();
		this.pTimedSubject = new TimedSubjectElements();
		this.pParenthesizedSubexpression = new ParenthesizedSubexpressionElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pRange = new RangeElements();
		this.pRangeSymbol = new RangeSymbolElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pValue = new ValueElements();
		this.pEnumerationValue = new EnumerationValueElements();
		this.pConstant = new ConstantElements();
		this.pNonNumericProperty = new NonNumericPropertyElements();
		this.pVariable = new VariableElements();
		this.pValueName = new ValueNameElements();
		this.pPartialName = new PartialNameElements();
		this.pIndexExpressionOrRange = new IndexExpressionOrRangeElements();
		this.pPeriodShift = new PeriodShiftElements();
		this.pIndexExpression = new IndexExpressionElements();
		this.pCaseExpression = new CaseExpressionElements();
		this.pCaseChoice = new CaseChoiceElements();
		this.pLogicVariables = new LogicVariablesElements();
		this.pSumQuantification = new SumQuantificationElements();
		this.pProductQuantification = new ProductQuantificationElements();
		this.pCountingQuantification = new CountingQuantificationElements();
		this.pUniversalQuantification = new UniversalQuantificationElements();
		this.pExistentialQuantification = new ExistentialQuantificationElements();
		this.pRecordTerm = new RecordTermElements();
		this.pRecordValue = new RecordValueElements();
		this.pInvocation = new InvocationElements();
		this.pActualParameter = new ActualParameterElements();
		this.pVariableList = new VariableListElements();
		this.pAssertionFunctionValue = new AssertionFunctionValueElements();
		this.pConditionalAssertionFunction = new ConditionalAssertionFunctionElements();
		this.pConditionValuePair = new ConditionValuePairElements();
		this.pAssertionEnumeration = new AssertionEnumerationElements();
		this.pEnumerationPair = new EnumerationPairElements();
		this.pTypeLibrary = new TypeLibraryElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pTypeOrReference = new TypeOrReferenceElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pStringType = new StringTypeElements();
		this.pNullType = new NullTypeElements();
		this.pEnumerationType = new EnumerationTypeElements();
		this.pQuantityType = new QuantityTypeElements();
		this.pANumber = new ANumberElements();
		this.pArrayType = new ArrayTypeElements();
		this.pArrayRangeList = new ArrayRangeListElements();
		this.pArrayRange = new ArrayRangeElements();
		this.pRecordType = new RecordTypeElements();
		this.pRecordField = new RecordFieldElements();
		this.pPropertyReference = new PropertyReferenceElements();
		this.pPropertyField = new PropertyFieldElements();
		this.pUnitName = new UnitNameElements();
		this.pUnitFormula = new UnitFormulaElements();
		this.pUnitDeclaration = new UnitDeclarationElements();
		this.pRootDeclaration = new RootDeclarationElements();
		this.pUnitExtension = new UnitExtensionElements();
		this.pMulDiv = new MulDivElements();
		this.pUnitFactor = new UnitFactorElements();
		this.pQuantity = new QuantityElements();
		this.pPositiveNumber = new PositiveNumberElements();
		this.pNamedElement = new NamedElementElements();
		this.pElement = new ElementElements();
		this.pType = new TypeElements();
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.SL_COMMENT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DIGIT");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.NUMBER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.LETTER");
		this.pQCLREF = new QCLREFElements();
		this.pQPREF = new QPREFElements();
		this.pQCREF = new QCREFElements();
		this.pTIMES = new TIMESElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.ID");
		this.tDOTDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DOTDOT");
		this.tCOMMADOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.COMMADOT");
		this.tDOTCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.DOTCOMMA");
		this.tCOMMACOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.multitude.aadl.bless.BLESS.COMMACOMMA");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.multitude.aadl.bless.BLESS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//BLESSGrammarRoots :
	//  'unitlibrary' unit_library=UnitLibrary
	//  | 'typelibrary' type_library=TypeLibrary
	//  | 'assertionlibrary' assertion_library=AssertionLibrary
	//  | 'actionsubclause'     action_subclause=ActionSubclause
	//    | 'exceptions' exception_library=ExceptionLibrary
	//    | 'blesssubclause' bless_subclause=BLESSSubclause
	//;
	public BLESSGrammarRootsElements getBLESSGrammarRootsAccess() {
		return pBLESSGrammarRoots;
	}
	
	public ParserRule getBLESSGrammarRootsRule() {
		return getBLESSGrammarRootsAccess().getRule();
	}
	
	//AnnexLibrary returns aadl2::AnnexLibrary:
	//    UnitLibrary
	//    | TypeLibrary
	//    | AssertionLibrary
	//    | ExceptionLibrary
	//;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}
	
	//AnnexSubclause returns aadl2::AnnexSubclause:
	//     ActionSubclause
	//     | BLESSSubclause
	//     ;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}
	
	//BLESSSubclause returns BLESSSubclause:
	//    {BLESSSubclause}
	//    no_proof ?= 'DO_NOT_PROVE'?
	//  assert_clause=AssertClause?
	//  invariant=InvariantClause?
	//  variables=VariablesSection?
	//  statesSection=StatesSection?
	//  transitions=Transitions?
	//    ;
	public BLESSSubclauseElements getBLESSSubclauseAccess() {
		return pBLESSSubclause;
	}
	
	public ParserRule getBLESSSubclauseRule() {
		return getBLESSSubclauseAccess().getRule();
	}
	
	//UnitLibrary:
	//    unitDeclarations+=UnitDeclaration+
	//    ;
	public UnitLibraryElements getUnitLibraryAccess() {
		return pUnitLibrary;
	}
	
	public ParserRule getUnitLibraryRule() {
		return getUnitLibraryAccess().getRule();
	}
	
	////assertion_annex_library
	//AssertionLibrary returns AssertionLibrary:
	//    {AssertionLibrary}
	//    ( ghosts=GhostVariables )?
	//    assertion_list+=NamedAssertion*
	//    ;
	public AssertionLibraryElements getAssertionLibraryAccess() {
		return pAssertionLibrary;
	}
	
	public ParserRule getAssertionLibraryRule() {
		return getAssertionLibraryAccess().getRule();
	}
	
	//ExceptionLibrary returns ExceptionLibrary:
	//    {ExceptionLibrary}
	//    exceptiondefinitions+=Exception+
	//;
	public ExceptionLibraryElements getExceptionLibraryAccess() {
		return pExceptionLibrary;
	}
	
	public ParserRule getExceptionLibraryRule() {
		return getExceptionLibraryAccess().getRule();
	}
	
	//ActionSubclause returns ActionSubclause:
	//    {ActionSubclause}
	//    no_proof ?= 'DO_NOT_PROVE'?
	//  throws_clause=ThrowsClause?
	//  assert_clause=AssertClause?  //optionally set av
	//  ( 'pre' precondition=Assertion )?
	//  ( 'post' postcondition=Assertion )?
	//  ( 'invariant' invariant=Assertion )?
	//  elq=ExistentialLatticeQuantification
	//;
	public ActionSubclauseElements getActionSubclauseAccess() {
		return pActionSubclause;
	}
	
	public ParserRule getActionSubclauseRule() {
		return getActionSubclauseAccess().getRule();
	}
	
	///////////////////////////////////   BLESS   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//InvariantClause:
	//  'invariant' inv=Assertion
	//;
	public InvariantClauseElements getInvariantClauseAccess() {
		return pInvariantClause;
	}
	
	public ParserRule getInvariantClauseRule() {
		return getInvariantClauseAccess().getRule();
	}
	
	//VariablesSection:
	//    'variables' behavior_variables+=VariableDeclaration+
	//;
	public VariablesSectionElements getVariablesSectionAccess() {
		return pVariablesSection;
	}
	
	public ParserRule getVariablesSectionRule() {
		return getVariablesSectionAccess().getRule();
	}
	
	//StatesSection:
	//      ( st='states' states+=BehaviorState+ )
	//;
	public StatesSectionElements getStatesSectionAccess() {
		return pStatesSection;
	}
	
	public ParserRule getStatesSectionRule() {
		return getStatesSectionAccess().getRule();
	}
	
	////behavior_state
	////allow states to have more than one:  initial complete final
	////for BA2015 reconciliation
	//BehaviorState:
	//  name=ID
	//      ':' initial?='initial'?  complete?='complete'?  final?='final'? mode?='mode'?
	//  'state' state_assertion=Assertion? ';'?
	//;
	public BehaviorStateElements getBehaviorStateAccess() {
		return pBehaviorState;
	}
	
	public ParserRule getBehaviorStateRule() {
		return getBehaviorStateAccess().getRule();
	}
	
	//Transitions:
	//  'transitions' bt+=BehaviorTransition+
	//;
	public TransitionsElements getTransitionsAccess() {
		return pTransitions;
	}
	
	public ParserRule getTransitionsRule() {
		return getTransitionsAccess().getRule();
	}
	
	//    /////////////////////////  TRANSITION  /////////////////////////
	////behavior_transition
	//BehaviorTransition returns BehaviorTransition:
	////  {BehaviorTransition}
	////  transition_label=TransitionLabel
	//  name=ID  priority=Priority? colon=':'
	//  ( sources+=[BehaviorState] ( ',' sources+=[BehaviorState] )* )
	//  '-[' //transition_condition
	//  ( dispatch=DispatchCondition |
	//      execute=ExecuteCondition |
	//      mode=ModeCondition |
	//      internal=InternalCondition )?
	//  ']->'
	//  destination=[BehaviorState]
	//  ( '{' actions=BehaviorActions? '}' )? ass=Assertion? ';'?
	//;
	public BehaviorTransitionElements getBehaviorTransitionAccess() {
		return pBehaviorTransition;
	}
	
	public ParserRule getBehaviorTransitionRule() {
		return getBehaviorTransitionAccess().getRule();
	}
	
	////transition_label
	////TransitionLabel:
	////  id=ID priority=Priority?
	////;
	//@Deprecated
	//Priority:
	//    '[' priority=NUMBER ']'
	//;
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}
	
	////dispatch_condition
	//DispatchCondition:
	//  'on' dispatch='dispatch' de=DispatchExpression?
	//  //BA2015 reconciliation declare ports to be frozen
	//  frozen=FreezePort?
	//;
	public DispatchConditionElements getDispatchConditionAccess() {
		return pDispatchCondition;
	}
	
	public ParserRule getDispatchConditionRule() {
		return getDispatchConditionAccess().getRule();
	}
	
	////dispatch_expression
	//DispatchExpression:
	//  dc+=DispatchConjunction ( or?='or' dc+=DispatchConjunction
	//      ( 'or' dc+=DispatchConjunction )* )?
	//      //BA2015 reconciliation
	//  | subprogramaccessdispatch=SubprogramAccessDispatch
	//;
	public DispatchExpressionElements getDispatchExpressionAccess() {
		return pDispatchExpression;
	}
	
	public ParserRule getDispatchExpressionRule() {
		return getDispatchExpressionAccess().getRule();
	}
	
	//@Deprecated
	//SubprogramAccessDispatch:
	//    'access' access=[aadl2::SubprogramAccess]
	//;
	public SubprogramAccessDispatchElements getSubprogramAccessDispatchAccess() {
		return pSubprogramAccessDispatch;
	}
	
	public ParserRule getSubprogramAccessDispatchRule() {
		return getSubprogramAccessDispatchAccess().getRule();
	}
	
	////dispatch_conjunction
	//DispatchConjunction:
	//  trigger+=DispatchTrigger
	//    ( and?='and' trigger+=DispatchTrigger
	//        ( 'and' trigger+=DispatchTrigger)* )?
	//;
	public DispatchConjunctionElements getDispatchConjunctionAccess() {
		return pDispatchConjunction;
	}
	
	public ParserRule getDispatchConjunctionRule() {
		return getDispatchConjunctionAccess().getRule();
	}
	
	////dispatch_trigger
	////DOES NOT ALLOW PORT INDEXES ON TIMEOUT PORTS
	//DispatchTrigger:
	//  port=PortName
	//  | timeout='timeout'
	//   ( ( lp?='(' ports+=[aadl2::NamedElement|ID]
	//        ('or'? ports+=[aadl2::NamedElement|ID] )* ')'
	//   )?
	//        time=BehaviorTime )?
	//;
	public DispatchTriggerElements getDispatchTriggerAccess() {
		return pDispatchTrigger;
	}
	
	public ParserRule getDispatchTriggerRule() {
		return getDispatchTriggerAccess().getRule();
	}
	
	//PortName:
	//  port=[aadl2::NamedElement|ID]
	//  ( '[' index=NUMBER ']' )?
	//;
	public PortNameElements getPortNameAccess() {
		return pPortName;
	}
	
	public ParserRule getPortNameRule() {
		return getPortNameAccess().getRule();
	}
	
	//ExecuteCondition:
	//  eor=BooleanExpression
	////  'timeout' can be reach as Value in BooleanExpression
	////  | timeout=ExecuteTimeout  //added for BA2015 reconciliation
	//  | otherwise=Otherwise  //added for BA2015 reconciliation
	//;
	public ExecuteConditionElements getExecuteConditionAccess() {
		return pExecuteCondition;
	}
	
	public ParserRule getExecuteConditionRule() {
		return getExecuteConditionAccess().getRule();
	}
	
	//@Deprecated
	//ExecuteTimeout: t='timeout';
	public ExecuteTimeoutElements getExecuteTimeoutAccess() {
		return pExecuteTimeout;
	}
	
	public ParserRule getExecuteTimeoutRule() {
		return getExecuteTimeoutAccess().getRule();
	}
	
	//@Deprecated
	//Otherwise: o='otherwise';
	public OtherwiseElements getOtherwiseAccess() {
		return pOtherwise;
	}
	
	public ParserRule getOtherwiseRule() {
		return getOtherwiseAccess().getRule();
	}
	
	//ModeCondition:
	//    'on' tle=TriggerLogicalExpression
	//;
	public ModeConditionElements getModeConditionAccess() {
		return pModeCondition;
	}
	
	public ParserRule getModeConditionRule() {
		return getModeConditionAccess().getRule();
	}
	
	////must check that all the ops are the same
	//TriggerLogicalExpression:
	//    first=EventTrigger ( op=LogicalOperator trigger+=EventTrigger
	//          (ops+=LogicalOperator trigger+=EventTrigger)*)?
	//;
	public TriggerLogicalExpressionElements getTriggerLogicalExpressionAccess() {
		return pTriggerLogicalExpression;
	}
	
	public ParserRule getTriggerLogicalExpressionRule() {
		return getTriggerLogicalExpressionAccess().getRule();
	}
	
	////event_trigger
	//EventTrigger:
	//  //subcomponent_port_reference
	//  //change to how OSATE references subcomponents?
	////  subcomponent=[aadl2::Subcomponent|ID]    <-just one level down
	//    sub+=ID ( '.' sub+=ID )* '.' sub+=ID ( '[' index=NUMBER ']' )?
	//    | '(' tle=TriggerLogicalExpression ')'
	//;
	public EventTriggerElements getEventTriggerAccess() {
		return pEventTrigger;
	}
	
	public ParserRule getEventTriggerRule() {
		return getEventTriggerAccess().getRule();
	}
	
	//LogicalOperator:
	//    op='and'
	//    | op='or'
	//    | op='xor'
	//    | 'and' op='then'
	//    | 'or' op='else'
	//;
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return pLogicalOperator;
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}
	
	//@Deprecated
	//InternalCondition:
	//    'on' 'internal' first=[aadl2::Port] ( 'or' ports+=[aadl2::Port] )*
	//;
	public InternalConditionElements getInternalConditionAccess() {
		return pInternalCondition;
	}
	
	public ParserRule getInternalConditionRule() {
		return getInternalConditionAccess().getRule();
	}
	
	//  //note may need to make real port Name with index
	//AssertClause:
	//  'assert' (assertions+=NamedAssertion)+
	//;
	public AssertClauseElements getAssertClauseAccess() {
		return pAssertClause;
	}
	
	public ParserRule getAssertClauseRule() {
		return getAssertClauseAccess().getRule();
	}
	
	///////////////////////////  LATTICE QUANTIFICATION  ////////////////////////
	////behavior_action_block
	//ExistentialLatticeQuantification:
	//  quantified_variables=QuantifiedVariables?
	//  '{'
	//  actions=BehaviorActions
	//   '}'
	//  timeout=ActionTimeout?
	//  catch_clause=CatchClause?
	//;
	public ExistentialLatticeQuantificationElements getExistentialLatticeQuantificationAccess() {
		return pExistentialLatticeQuantification;
	}
	
	public ParserRule getExistentialLatticeQuantificationRule() {
		return getExistentialLatticeQuantificationAccess().getRule();
	}
	
	////quanitfied_variables
	//QuantifiedVariables:
	//  'declare' variables+=VariableDeclaration+
	//;
	public QuantifiedVariablesElements getQuantifiedVariablesAccess() {
		return pQuantifiedVariables;
	}
	
	public ParserRule getQuantifiedVariablesRule() {
		return getQuantifiedVariablesAccess().getRule();
	}
	
	////forall_action
	//UniversalLatticeQuantification returns UniversalLatticeQuantification:
	////  {UniversalLatticeQuantification}
	//  'forall'
	//  variables+=ForallVariable+
	//    'in'   lower_bound=Expression  DOTDOT upper_bound=Expression
	//  elq=ExistentialLatticeQuantification
	//;
	public UniversalLatticeQuantificationElements getUniversalLatticeQuantificationAccess() {
		return pUniversalLatticeQuantification;
	}
	
	public ParserRule getUniversalLatticeQuantificationRule() {
		return getUniversalLatticeQuantificationAccess().getRule();
	}
	
	//ForallVariable:
	//  name=ID
	//;
	public ForallVariableElements getForallVariableAccess() {
		return pForallVariable;
	}
	
	public ParserRule getForallVariableRule() {
		return getForallVariableAccess().getRule();
	}
	
	////////////////////////  Variable  DECLARATION  ////////////////////////////
	//VariableDeclaration:
	//  variable=Variable
	//    ( //modifier
	//      nonvolatile?='nonvolatile'
	//      | shared?='shared'
	//      | constant?='constant'
	//    | spread?='spread'
	//    | final?='final'
	//  )?
	//  ( assign?=':=' expression=Expression )?
	//  assertion=Assertion?
	//  ';'?
	//  ;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//////////////////////////////////  FUNCTION CALL  //////////////////////////////
	//// put in ValueName
	////FunctionCall:
	////  ( pack+=ID '::' )*
	////    func=ID
	////    '(' //'$' //BA2015 reconciliation remove $
	////    parameters=FunctionParameters? ')'
	////;
	//FunctionParameters:
	//     parameters+=FormalExpressionPair ( comma?=',' parameters+=FormalExpressionPair
	//        ( ',' parameters+=FormalExpressionPair)* )?
	//;
	public FunctionParametersElements getFunctionParametersAccess() {
		return pFunctionParameters;
	}
	
	public ParserRule getFunctionParametersRule() {
		return getFunctionParametersAccess().getRule();
	}
	
	//FormalExpressionPair:
	//  formal=ID  //[aadl2::Parameter]
	//    ':' actual=Expression
	//  ;
	public FormalExpressionPairElements getFormalExpressionPairAccess() {
		return pFormalExpressionPair;
	}
	
	public ParserRule getFormalExpressionPairRule() {
		return getFormalExpressionPairAccess().getRule();
	}
	
	//////////////////////////////  BEHAVIOR ACTIONS  ///////////////////////////////
	////behavior_actions
	//BehaviorActions:
	//  action+=AssertedAction
	//  (  //sequential_composition
	//      ( semi?=';' action+=AssertedAction ( ';' action+=AssertedAction )* )
	//      |  //concurrent_composition
	//      ( amp?='&' action+=AssertedAction ( '&' action+=AssertedAction)* )
	//  )?
	//;
	public BehaviorActionsElements getBehaviorActionsAccess() {
		return pBehaviorActions;
	}
	
	public ParserRule getBehaviorActionsRule() {
		return getBehaviorActionsAccess().getRule();
	}
	
	////asserted_action
	//AssertedAction:
	//  precondition=Assertion? action=Action postcondition=Assertion?
	//;
	public AssertedActionElements getAssertedActionAccess() {
		return pAssertedAction;
	}
	
	public ParserRule getAssertedActionRule() {
		return getAssertedActionAccess().getRule();
	}
	
	//Action:
	////  {Action}
	//   basic=BasicAction
	//  | if_fi=Alternative
	//  | wl=WhileLoop
	//  | fl=ForLoop
	//  | du=DoUntilLoop
	//  | elq=ExistentialLatticeQuantification //behavior_action_block
	//  | ulq=UniversalLatticeQuantification   //forall_action
	////  //BA2015 reconciliation add LockingAction
	//  | la=LockingAction
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	////basic_action
	//BasicAction:
	////  {BasicAction}
	//  skip='skip'
	//  | assign=Assignment
	//  | 'setmode' mode=[aadl2::Mode]
	//  | when=WhenThrow
	//  | comb=CombinableOperation
	//  | communication=CommunicationAction
	//  | computation=Computation
	//  | multi_assign=SimultaneousAssignment
	//// //BA2015 reconciliation add IssueException
	//  | exc=IssueException
	//;
	public BasicActionElements getBasicActionAccess() {
		return pBasicAction;
	}
	
	public ParserRule getBasicActionRule() {
		return getBasicActionAccess().getRule();
	}
	
	////combinable_operation
	//// bnf has target_variable_name, but this is just target ID
	////  change [Variable] to ValueName
	//CombinableOperation returns CombinableOperation:
	////  {CombinableOperation}
	//  f_add?='fetchadd' '(' target=[Variable] ',' arithmetic=Expression ',' result=[Variable] ')'
	//  |
	//  ( f_or?='fetchor' | f_and?='fetchand' | f_xor?='fetchxor' )
	//    '(' target=[Variable] ',' bool=Expression ( ',' result=[Variable] )? ')'
	//  |
	//  sw?='swap' '(' target=[Variable] ',' reference=[Variable] ',' result=[Variable] ')'
	//;
	public CombinableOperationElements getCombinableOperationAccess() {
		return pCombinableOperation;
	}
	
	public ParserRule getCombinableOperationRule() {
		return getCombinableOperationAccess().getRule();
	}
	
	///////////////////////////  COMMUNICATION  /////////////////////////
	////communication_action
	//CommunicationAction:
	//  pc=SubprogramCall
	//  |
	//  po=PortOutput
	//  |
	//  pi=PortInput
	//  |  //freeze port
	//  fp=FreezePort
	//  |
	//  pause=Pause
	//;
	public CommunicationActionElements getCommunicationActionAccess() {
		return pCommunicationAction;
	}
	
	public ParserRule getCommunicationActionRule() {
		return getCommunicationActionAccess().getRule();
	}
	
	////subprogram_call
	//SubprogramCall:
	//  procedure=[aadl2::CalledSubprogram]
	//  '(' parameters=FormalActualList? ')'
	//;
	public SubprogramCallElements getSubprogramCallAccess() {
		return pSubprogramCall;
	}
	
	public ParserRule getSubprogramCallRule() {
		return getSubprogramCallAccess().getRule();
	}
	
	////parameter_list
	//FormalActualList:
	//  variables+=FormalActual ( comma?=',' variables+=FormalActual ( ',' variables+=FormalActual )* )?
	//;
	public FormalActualListElements getFormalActualListAccess() {
		return pFormalActualList;
	}
	
	public ParserRule getFormalActualListRule() {
		return getFormalActualListAccess().getRule();
	}
	
	////actual_parameter
	//FormalActual:
	//  ( formal=[aadl2::Parameter]
	//    ':' )? actual=SubProgramParameter
	//;
	public FormalActualElements getFormalActualAccess() {
		return pFormalActual;
	}
	
	public ParserRule getFormalActualRule() {
		return getFormalActualAccess().getRule();
	}
	
	//SubProgramParameter:
	//    value=ValueName
	//    | constant=Constant
	//    | expression=ParenthesizedSubexpression
	//;
	public SubProgramParameterElements getSubProgramParameterAccess() {
		return pSubProgramParameter;
	}
	
	public ParserRule getSubProgramParameterRule() {
		return getSubProgramParameterAccess().getRule();
	}
	
	//PortOutput:
	//  port=[aadl2::Port|ID]
	//    '!' ( '(' eor=Expression  // ExpressionOrRelation
	//        ')' )?
	//;
	public PortOutputElements getPortOutputAccess() {
		return pPortOutput;
	}
	
	public ParserRule getPortOutputRule() {
		return getPortOutputAccess().getRule();
	}
	
	//PortInput:
	//  port=[aadl2::Port|ID] '?' '(' target=ValueName ')'
	//   ;
	public PortInputElements getPortInputAccess() {
		return pPortInput;
	}
	
	public ParserRule getPortInputRule() {
		return getPortInputAccess().getRule();
	}
	
	///////////////////////  ASSIGNMENT  ///////////////////////
	//Assignment:
	//   lhs=ValueName asgn=':=' rhs=ExpressionOrAny
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////NameTick:
	////    value=ValueName
	////  tick?='\''?
	////;
	//ExpressionOrAny:
	//    exp=Expression | any=Any
	//;
	public ExpressionOrAnyElements getExpressionOrAnyAccess() {
		return pExpressionOrAny;
	}
	
	public ParserRule getExpressionOrAnyRule() {
		return getExpressionOrAnyAccess().getRule();
	}
	
	////@Deprecated
	//Any: 'any';
	public AnyElements getAnyAccess() {
		return pAny;
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}
	
	//SimultaneousAssignment returns SimultaneousAssignment:
	//    '|'
	//    lhs+=ValueName  ( ',' lhs+=ValueName )+
	//    asgn=':='
	//    rhs+=ExpressionOrAny  ( ',' rhs+=ExpressionOrAny )+
	//  '|'
	//;
	public SimultaneousAssignmentElements getSimultaneousAssignmentAccess() {
		return pSimultaneousAssignment;
	}
	
	public ParserRule getSimultaneousAssignmentRule() {
		return getSimultaneousAssignmentAccess().getRule();
	}
	
	////////////////////////////  CONTROL  ////////////////////////////
	////alternative
	//Alternative:
	//  'if'
	//'(' guard=BooleanExpression
	//  (
	//  blessalt=BLESSAlternative
	//  | baalt=BAAlternative
	//    )
	//;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//BLESSAlternative:
	//     ')~>' action=AssertedAction
	//      ( '[]' alternative+=GuardedAction )+
	//  'fi'
	//;
	public BLESSAlternativeElements getBLESSAlternativeAccess() {
		return pBLESSAlternative;
	}
	
	public ParserRule getBLESSAlternativeRule() {
		return getBLESSAlternativeAccess().getRule();
	}
	
	//GuardedAction:
	//  '(' guard=BooleanExpression ')~>' action=AssertedAction
	//;
	public GuardedActionElements getGuardedActionAccess() {
		return pGuardedAction;
	}
	
	public ParserRule getGuardedActionRule() {
		return getGuardedActionAccess().getRule();
	}
	
	//WhileLoop:
	//  'while'
	////  availability=Availability?
	//  '(' test=BooleanExpression ')'
	//  ( invariant?='invariant' inv=NamelessAssertion )?
	//  ( bound?='bound' bound_function=Expression )?
	//  elq=ExistentialLatticeQuantification
	//;
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//ForLoop:
	//  'for'
	//  count=ForallVariable
	//  'in' lower_bound=Expression DOTDOT upper_bound=Expression
	//  ( invariant?='invariant' inv=NamelessAssertion )?
	//  '{'  action=BehaviorActions '}'
	//;
	public ForLoopElements getForLoopAccess() {
		return pForLoop;
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}
	
	//DoUntilLoop:
	//  'do'
	////  availability=Availability?
	//  ( invariant?='invariant' inv=NamelessAssertion )?
	//  ( bound?='bound' bnd=Expression )?
	//  actions=BehaviorActions
	//  'until' '(' guard=BooleanExpression ')'
	//;
	public DoUntilLoopElements getDoUntilLoopAccess() {
		return pDoUntilLoop;
	}
	
	public ParserRule getDoUntilLoopRule() {
		return getDoUntilLoopAccess().getRule();
	}
	
	////////////////////////////   EXCEPTIONS   ////////////////////////////
	//ThrowsClause:
	//    'throws' exceptions+=[Exception]
	//;
	public ThrowsClauseElements getThrowsClauseAccess() {
		return pThrowsClause;
	}
	
	public ParserRule getThrowsClauseRule() {
		return getThrowsClauseAccess().getRule();
	}
	
	////catch_clause
	//CatchClause:
	//  'catch'
	//  ( catches+=CatchClauseTerm )+
	//;
	public CatchClauseElements getCatchClauseAccess() {
		return pCatchClause;
	}
	
	public ParserRule getCatchClauseRule() {
		return getCatchClauseAccess().getRule();
	}
	
	//CatchClauseTerm:
	//  '(' //exception_label
	//  ( exceptions+=[Exception]+ | all?='all' ) ':' action=BasicAction
	//  ')'
	//;
	public CatchClauseTermElements getCatchClauseTermAccess() {
		return pCatchClauseTerm;
	}
	
	public ParserRule getCatchClauseTermRule() {
		return getCatchClauseTermAccess().getRule();
	}
	
	//WhenThrow:
	//  'when' '(' exp=Expression ')' 'throw' exception=[Exception]  message=STRING?
	//;
	public WhenThrowElements getWhenThrowAccess() {
		return pWhenThrow;
	}
	
	public ParserRule getWhenThrowRule() {
		return getWhenThrowAccess().getRule();
	}
	
	///////////////////////  DEPRICATED  ///////////////////////////////
	//@Deprecated
	//Computation:
	//    'computation'
	//    '(' lb=BehaviorTime ( ',' ub=BehaviorTime )? ')'
	//    ( 'in' 'binding' component+=[aadl2::ComponentClassifier|QCREF]+ )?
	//;
	public ComputationElements getComputationAccess() {
		return pComputation;
	}
	
	public ParserRule getComputationRule() {
		return getComputationAccess().getRule();
	}
	
	//@Deprecated
	//BAAlternative:
	//   //BA2015 reconciliation  add if-elsif-else-end if
	//  ')' actions=BehaviorActions
	//  ( elseifalt+=ElseifAlternative )*
	//  ( elsealt=ElseAlternative)?
	//  'end' 'if'
	//;
	public BAAlternativeElements getBAAlternativeAccess() {
		return pBAAlternative;
	}
	
	public ParserRule getBAAlternativeRule() {
		return getBAAlternativeAccess().getRule();
	}
	
	//ElseifAlternative:
	//  'elsif' '(' test=BooleanExpression ')' actions=BehaviorActions
	//;
	public ElseifAlternativeElements getElseifAlternativeAccess() {
		return pElseifAlternative;
	}
	
	public ParserRule getElseifAlternativeRule() {
		return getElseifAlternativeAccess().getRule();
	}
	
	//ElseAlternative:
	//  'else' actions=BehaviorActions
	//;
	public ElseAlternativeElements getElseAlternativeAccess() {
		return pElseAlternative;
	}
	
	public ParserRule getElseAlternativeRule() {
		return getElseAlternativeAccess().getRule();
	}
	
	// //BA2015 reconciliation add IssueException
	//@Deprecated
	//IssueException:
	//    'exception' '(' exception=[Exception] message=STRING? ')'
	//;
	public IssueExceptionElements getIssueExceptionAccess() {
		return pIssueException;
	}
	
	public ParserRule getIssueExceptionRule() {
		return getIssueExceptionAccess().getRule();
	}
	
	// //BA2015 reconciliation add LockingAction
	//@Deprecated
	//LockingAction:
	//  entercritical='*!<'
	//  | leavecritical='*!>'
	//  | required_data_access=[aadl2::DataAccess] lock='!<'
	//  | required_data_access=[aadl2::DataAccess] unlock='!>'
	//;
	public LockingActionElements getLockingActionAccess() {
		return pLockingAction;
	}
	
	public ParserRule getLockingActionRule() {
		return getLockingActionAccess().getRule();
	}
	
	////@Deprecated
	////Freeze:
	////  freeze='>>'  //added for BA2015, set `freeze' flag on the port
	////;
	////frozen_ports
	//@Deprecated
	//FreezePort:
	//   'frozen' '(' frozen+=[aadl2::Port|ID] ( ','  frozen+=[aadl2::Port|ID] )* ')'
	////  frozen_port=[aadl2::NamedElement|ID] '>>'
	// ;
	public FreezePortElements getFreezePortAccess() {
		return pFreezePort;
	}
	
	public ParserRule getFreezePortRule() {
		return getFreezePortAccess().getRule();
	}
	
	//@Deprecated
	//Pause:
	//  pause='pause'
	//;
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//@Deprecated
	//ActionTimeout:
	//  'timeout' duration=BehaviorTime
	//;
	public ActionTimeoutElements getActionTimeoutAccess() {
		return pActionTimeout;
	}
	
	public ParserRule getActionTimeoutRule() {
		return getActionTimeoutAccess().getRule();
	}
	
	////behavior_time
	//BehaviorTime:
	//    quantity=Quantity
	//    |
	//    value=ValueName  (unit=[UnitName] | scalar='scalar' | whole='whole' )?
	////    |
	////    duration=ParenthesizedSubexpression // (unit=[UnitName] | scalar?='scalar' | whole?='whole' )?
	//;
	public BehaviorTimeElements getBehaviorTimeAccess() {
		return pBehaviorTime;
	}
	
	public ParserRule getBehaviorTimeRule() {
		return getBehaviorTimeAccess().getRule();
	}
	
	/////////////////////////////////////  EXCEPTION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//@Exported
	//Exception:
	//    name=ID description=STRING ( code=NUMBER )?  //add check for natural number
	//;
	public ExceptionElements getExceptionAccess() {
		return pException;
	}
	
	public ParserRule getExceptionRule() {
		return getExceptionAccess().getRule();
	}
	
	///////////////////////////////////////   ASSERTION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//GhostVariables
	//  :
	//      'ghost' 'variables'
	//      gv+=GhostVariable+
	//  ;
	public GhostVariablesElements getGhostVariablesAccess() {
		return pGhostVariables;
	}
	
	public ParserRule getGhostVariablesRule() {
		return getGhostVariablesAccess().getRule();
	}
	
	//@Exported
	//GhostVariable:
	// 'def'  name=ID '~' tod=TypeOrReference ( ':' assn=Assertion )?
	//    ;
	public GhostVariableElements getGhostVariableAccess() {
		return pGhostVariable;
	}
	
	public ParserRule getGhostVariableRule() {
		return getGhostVariableAccess().getRule();
	}
	
	////assertion
	//Assertion :
	//    namedassertion=NamedAssertion |
	//    namelessassertion=NamelessAssertion |
	//    namelessfunction=NamelessFunction |
	//    namelessenumeration=NamelessEnumeration
	//    ;
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//@Exported
	//NamedAssertion:
	//    '<<'
	//    name=ID ':'
	//    (
	//        formals=VariableList?
	//          ( //assertion_predicate
	//          pred?=':'  predicate=Predicate
	//          | //assertion_function
	//          'returns' tod=TypeOrReference func?=':='    functionvalue=AssertionFunctionValue
	//          )
	//        | //assertion_enumeration
	//        assertionvariable=ID '~' enumerationType=[TypeDeclaration] enumer?='+=>' enumeration=AssertionEnumeration
	//    )
	//    '>>'
	//;
	public NamedAssertionElements getNamedAssertionAccess() {
		return pNamedAssertion;
	}
	
	public ParserRule getNamedAssertionRule() {
		return getNamedAssertionAccess().getRule();
	}
	
	////assertion_predicate
	//NamelessAssertion:  '<<' predicate=Predicate '>>' ;
	public NamelessAssertionElements getNamelessAssertionAccess() {
		return pNamelessAssertion;
	}
	
	public ParserRule getNamelessAssertionRule() {
		return getNamelessAssertionAccess().getRule();
	}
	
	////assertion_)function
	//NamelessFunction:  '<<' 'returns' tod=TypeOrReference func?=':=' functionvalue=AssertionFunctionValue '>>' ;
	public NamelessFunctionElements getNamelessFunctionAccess() {
		return pNamelessFunction;
	}
	
	public ParserRule getNamelessFunctionRule() {
		return getNamelessFunctionAccess().getRule();
	}
	
	////assertion_enumeration
	//NamelessEnumeration:  '<<' '+=>' enumeration=Invocation '>>';
	public NamelessEnumerationElements getNamelessEnumerationAccess() {
		return pNamelessEnumeration;
	}
	
	public ParserRule getNamelessEnumerationRule() {
		return getNamelessEnumerationAccess().getRule();
	}
	
	///////////////////////////////////////   EXPRESSION   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//Predicate:  //used within Assertions
	//    Expression
	//;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}
	
	//AssertionNumericExpression:  //used within Assertions
	//    Expression
	//;
	public AssertionNumericExpressionElements getAssertionNumericExpressionAccess() {
		return pAssertionNumericExpression;
	}
	
	public ParserRule getAssertionNumericExpressionRule() {
		return getAssertionNumericExpressionAccess().getRule();
	}
	
	//BooleanExpression:  //used in actions
	//    Expression
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//NumericExpression:  //used in actions
	//    Expression
	//;
	public NumericExpressionElements getNumericExpressionAccess() {
		return pNumericExpression;
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}
	
	//Expression:
	//  all=UniversalQuantification
	//  | exists=ExistentialQuantification
	//  | sum=SumQuantification
	//  | product=ProductQuantification
	//  | numberof=CountingQuantification
	//  | l=Disjunction ( (sym='iff' | sym='implies') r=Disjunction)?
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Disjunction:
	//  l=Conjunction
	//     (
	//     ( sym='or' r+=Conjunction ( 'or' r+=Conjunction )*)
	//     |
	//     ( 'or' sym='else' r+=Conjunction ( 'or' 'else' r+=Conjunction )*)
	//     |
	//     ( sym='xor' r+=Conjunction ( 'xor' r+=Conjunction )*)
	//     )?
	//;
	public DisjunctionElements getDisjunctionAccess() {
		return pDisjunction;
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}
	
	//Conjunction:
	//  l=Relation
	//    ( ( sym='and' r+=Relation ( 'and' r+=Relation )* )
	//    |    ( 'and' sym='then' r+=Relation ( 'and' 'then' r+=Relation )* )
	//    )?
	//;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//Relation:
	//    l=AddSub
	//    (
	//    ( sym=('=' | '<>' | '<' | '<=' | '>=' | '>' | '!=' | '+=') r=AddSub )
	//    |
	//    ( in='in'    range=Range )
	//    )?
	//;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	////add_subtract
	//AddSub:
	//    l=MultDiv
	//    (
	//    ( sym='+' r+=MultDiv ( '+' r+=MultDiv )* )
	//    |
	//    ( sym='-' r+=MultDiv )
	//    )?
	//;
	public AddSubElements getAddSubAccess() {
		return pAddSub;
	}
	
	public ParserRule getAddSubRule() {
		return getAddSubAccess().getRule();
	}
	
	//MultDiv:
	//    l=Exp
	//    ( ( sym=('/' | 'div' | 'mod' | 'rem') r+=Exp)
	//    | ( sym='*' r+=Exp ( '*' r+=Exp )* )
	//    )?
	//;
	public MultDivElements getMultDivAccess() {
		return pMultDiv;
	}
	
	public ParserRule getMultDivRule() {
		return getMultDivAccess().getRule();
	}
	
	//Exp:
	//    l=Subexpression ( sym='**' r=Subexpression )?
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Subexpression:
	//  ( unary=UnaryOperator  )?
	//  timed_expression=TimedExpression
	//;
	public SubexpressionElements getSubexpressionAccess() {
		return pSubexpression;
	}
	
	public ParserRule getSubexpressionRule() {
		return getSubexpressionAccess().getRule();
	}
	
	//TimedExpression:
	//    subject=TimedSubject
	//  (
	//  //tick='\'' |
	//  at?='@' time=Subexpression  //must ensure no @ in time
	//  | caret?='^' shift=PeriodShift
	//  )?
	//;
	public TimedExpressionElements getTimedExpressionAccess() {
		return pTimedExpression;
	}
	
	public ParserRule getTimedExpressionRule() {
		return getTimedExpressionAccess().getRule();
	}
	
	//TimedSubject:
	//  ps=ParenthesizedSubexpression
	//  | value=Value
	//  | conditional=ConditionalExpression
	//  | record=RecordTerm
	//  | invocation=Invocation
	//;
	public TimedSubjectElements getTimedSubjectAccess() {
		return pTimedSubject;
	}
	
	public ParserRule getTimedSubjectRule() {
		return getTimedSubjectAccess().getRule();
	}
	
	//ParenthesizedSubexpression:
	//    '('
	//    ( expression=Expression ( '??' t=Expression ':' f=Expression )?
	//    | caseexpression=CaseExpression
	//  )
	//  ')'
	//;
	public ParenthesizedSubexpressionElements getParenthesizedSubexpressionAccess() {
		return pParenthesizedSubexpression;
	}
	
	public ParserRule getParenthesizedSubexpressionRule() {
		return getParenthesizedSubexpressionAccess().getRule();
	}
	
	//UnaryOperator:
	//    not='not'
	//    | unary_minus='-'
	//    | absolute_value='abs'
	//    | truncate='truncate'
	//    | round='round'
	//;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	////assertion_range
	//Range:
	//    lower_bound=Subexpression sym=RangeSymbol upper_bound=Subexpression
	//;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//RangeSymbol : DOTDOT | COMMADOT | DOTCOMMA | COMMACOMMA;
	public RangeSymbolElements getRangeSymbolAccess() {
		return pRangeSymbol;
	}
	
	public ParserRule getRangeSymbolRule() {
		return getRangeSymbolAccess().getRule();
	}
	
	//ConditionalExpression:
	//    '(' 'if' pred=Expression 'then' t=Expression 'else' f=Expression ')'
	////    |  MOVED TO ParenthesizedSubexpression
	////    '(' pred=Expression '??' t=Expression ':' f=Expression ')'
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	/////////////////////////   VALUE   ///////////////////////////////
	//Value:
	//  value_name=ValueName
	//  | constant=Constant
	//  | timeout='timeout'
	//  | now='now'
	//  | tops='tops'
	//  | enum_val=EnumerationValue
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//EnumerationValue:
	//  enumeration_type=[TypeDeclaration] tick='\'' enumeration_value=ID
	//;
	public EnumerationValueElements getEnumerationValueAccess() {
		return pEnumerationValue;
	}
	
	public ParserRule getEnumerationValueRule() {
		return getEnumerationValueAccess().getRule();
	}
	
	//Constant:
	//  numeric_constant=Quantity
	//  | string_literal=STRING
	//  | t='true'
	//  | f='false'
	//  | nul='null'
	//  | prop=NonNumericProperty
	//;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//NonNumericProperty:
	//   "["
	//  ( property=PropertyReference
	//  | propertyConstant=[aadl2::PropertyConstant|QCLREF]
	//  )
	//  "]->"   tod=TypeOrReference
	//;
	public NonNumericPropertyElements getNonNumericPropertyAccess() {
		return pNonNumericProperty;
	}
	
	public ParserRule getNonNumericPropertyRule() {
		return getNonNumericPropertyAccess().getRule();
	}
	
	/////////////////////////   NAME  ////////////////////////////////////
	//Variable:
	//    name=ID '~' tod=TypeOrReference
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////name and port_name
	//ValueName:
	//  id=[aadl2::NamedElement|ID] //resolve as variable or feature (port)
	//  //either function call or variable or port
	//    ( dol?='$' lp?='('  pr=FunctionParameters? ')' )?
	//      ( lb?='[' array_index+=IndexExpressionOrRange ']'
	//        ( '[' array_index+=IndexExpressionOrRange ']' )* )? //optional array index
	//      ( dot?='.' pn+=PartialName ( '.' pn+=PartialName )* )?
	//    (  q?='?'
	//    | '\'' fresh?='fresh' //fresh is boolean
	//    | '\'' count?='count'
	//    | '\'' updated?='updated'
	//    )?
	//;
	public ValueNameElements getValueNameAccess() {
		return pValueName;
	}
	
	public ParserRule getValueNameRule() {
		return getValueNameAccess().getRule();
	}
	
	//PartialName:
	//    record_id=ID  //[RecordField]
	//     ( lb?='[' array_index+=IndexExpressionOrRange ']'
	//        ( '[' array_index+=IndexExpressionOrRange ']' )* )?
	//;
	public PartialNameElements getPartialNameAccess() {
		return pPartialName;
	}
	
	public ParserRule getPartialNameRule() {
		return getPartialNameAccess().getRule();
	}
	
	///////////////////////  INDEX EXPRESSION   //////////////////////
	////integer_expression_or_range
	//IndexExpressionOrRange:
	//  left_hand_side=IndexExpression
	//    ( dd?=DOTDOT right_hand_side=IndexExpression )?
	//;
	public IndexExpressionOrRangeElements getIndexExpressionOrRangeAccess() {
		return pIndexExpressionOrRange;
	}
	
	public ParserRule getIndexExpressionOrRangeRule() {
		return getIndexExpressionOrRangeAccess().getRule();
	}
	
	////period_shift
	//PeriodShift:
	//  unary_minus?='-'?
	//  (
	//  v=Value
	//  | '('  index_expression=IndexExpression ')'
	//  )
	//;
	public PeriodShiftElements getPeriodShiftAccess() {
		return pPeriodShift;
	}
	
	public ParserRule getPeriodShiftRule() {
		return getPeriodShiftAccess().getRule();
	}
	
	////index_expression
	//IndexExpression:
	//    l=PeriodShift
	//    (
	//    sym='-' r+=PeriodShift
	//    |
	//    sym='div' r+=PeriodShift
	//    |
	//    sym='mod' r+=PeriodShift
	//    |
	//    sym='+' r+=PeriodShift ('+' r+=PeriodShift)*
	//    |
	//    sym=TIMES r+=PeriodShift (TIMES r+=PeriodShift)*
	//    )?
	//;
	public IndexExpressionElements getIndexExpressionAccess() {
		return pIndexExpression;
	}
	
	public ParserRule getIndexExpressionRule() {
		return getIndexExpressionAccess().getRule();
	}
	
	////////////////////  CASE CHOICE //////////////////////////////////////
	//CaseExpression returns CaseExpression:
	//    'case'
	//    cc+=CaseChoice+
	//;
	public CaseExpressionElements getCaseExpressionAccess() {
		return pCaseExpression;
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}
	
	//CaseChoice returns CaseChoice:
	//    '(' be=BooleanExpression '->' exp=Expression ')'
	//;
	public CaseChoiceElements getCaseChoiceAccess() {
		return pCaseChoice;
	}
	
	public ParserRule getCaseChoiceRule() {
		return getCaseChoiceAccess().getRule();
	}
	
	///////////////////////  QUANTIFICATION   ////////////////////////////
	//LogicVariables:
	//  lv+=Variable (',' lv+=Variable)*
	//;
	public LogicVariablesElements getLogicVariablesAccess() {
		return pLogicVariables;
	}
	
	public ParserRule getLogicVariablesRule() {
		return getLogicVariablesAccess().getRule();
	}
	
	//SumQuantification:
	//  'sum' variables=LogicVariables
	//    (in?='in' range=Range | which?='which' condition=Predicate )
	//     'of' numeric_expression=NumericExpression ;
	public SumQuantificationElements getSumQuantificationAccess() {
		return pSumQuantification;
	}
	
	public ParserRule getSumQuantificationRule() {
		return getSumQuantificationAccess().getRule();
	}
	
	//ProductQuantification:
	//  'product' variables=LogicVariables
	//    (in?='in' range=Range | which?='which' condition=Predicate )
	//     'of' numeric_expression=NumericExpression ;
	public ProductQuantificationElements getProductQuantificationAccess() {
		return pProductQuantification;
	}
	
	public ParserRule getProductQuantificationRule() {
		return getProductQuantificationAccess().getRule();
	}
	
	//CountingQuantification:
	//  'numberof' variables=LogicVariables
	//    (in?='in' range=Range | which?='which' condition=Predicate )
	//     'that' counted=Predicate ;
	public CountingQuantificationElements getCountingQuantificationAccess() {
		return pCountingQuantification;
	}
	
	public ParserRule getCountingQuantificationRule() {
		return getCountingQuantificationAccess().getRule();
	}
	
	//UniversalQuantification:
	//  'all' variables=LogicVariables
	//    (in?='in' range=Range | which?='which' condition=Predicate )
	//     'are' predicate=Predicate
	//;
	public UniversalQuantificationElements getUniversalQuantificationAccess() {
		return pUniversalQuantification;
	}
	
	public ParserRule getUniversalQuantificationRule() {
		return getUniversalQuantificationAccess().getRule();
	}
	
	//ExistentialQuantification:
	//  'exists' variables=LogicVariables
	//    (in?='in' range=Range | which?='which' condition=Predicate )
	//     'that' predicate=Predicate
	//;
	public ExistentialQuantificationElements getExistentialQuantificationAccess() {
		return pExistentialQuantification;
	}
	
	public ParserRule getExistentialQuantificationRule() {
		return getExistentialQuantificationAccess().getRule();
	}
	
	/////////////////////   RECORD VALUES   //////////////////////
	//RecordTerm:
	//  '[' record_type=[TypeDeclaration] ':' record_value+=RecordValue+ ']'
	//;
	public RecordTermElements getRecordTermAccess() {
		return pRecordTerm;
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}
	
	//RecordValue:
	//  label=ID
	//  '=>' aval=Value ';'?
	//;
	public RecordValueElements getRecordValueAccess() {
		return pRecordValue;
	}
	
	public ParserRule getRecordValueRule() {
		return getRecordValueAccess().getRule();
	}
	
	////predicate_invocation and assertion_function_invocation
	//Invocation:
	//    label=[NamedAssertion|ID]
	//    '('     //actual_assertion_parameter_list
	//    ( (params+=ActualParameter ( ',' params+=ActualParameter )* )
	//        |
	//        actual_parameter=NumericExpression
	//    )?
	//     ')'
	//;
	public InvocationElements getInvocationAccess() {
		return pInvocation;
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}
	
	////actual_assertion_parameter
	//ActualParameter:
	//    formal=ID ':' actual=Expression
	//;
	public ActualParameterElements getActualParameterAccess() {
		return pActualParameter;
	}
	
	public ParserRule getActualParameterRule() {
		return getActualParameterAccess().getRule();
	}
	
	//VariableList:
	//    first=Variable ( comma?=',' parameter+=Variable ( ',' parameter+=Variable )* )?
	//;
	public VariableListElements getVariableListAccess() {
		return pVariableList;
	}
	
	public ParserRule getVariableListRule() {
		return getVariableListAccess().getRule();
	}
	
	//AssertionFunctionValue returns AssertionFunctionValue:
	//    cexp=ConditionalAssertionFunction
	//    | pexp=AssertionNumericExpression
	//;
	public AssertionFunctionValueElements getAssertionFunctionValueAccess() {
		return pAssertionFunctionValue;
	}
	
	public ParserRule getAssertionFunctionValueRule() {
		return getAssertionFunctionValueAccess().getRule();
	}
	
	////conditional_assertion_function
	//ConditionalAssertionFunction returns ConditionalAssertionFunction:
	//    '[' cvp+=ConditionValuePair ( ',' cvp+=ConditionValuePair )+ ']'
	//;
	public ConditionalAssertionFunctionElements getConditionalAssertionFunctionAccess() {
		return pConditionalAssertionFunction;
	}
	
	public ParserRule getConditionalAssertionFunctionRule() {
		return getConditionalAssertionFunctionAccess().getRule();
	}
	
	////conditional_value_pair
	//ConditionValuePair returns ConditionValuePair:
	//    '(' condition=Predicate ')->' expression=AssertionNumericExpression
	//;
	public ConditionValuePairElements getConditionValuePairAccess() {
		return pConditionValuePair;
	}
	
	public ParserRule getConditionValuePairRule() {
		return getConditionValuePairAccess().getRule();
	}
	
	//AssertionEnumeration:
	//  pred=Invocation
	//  |
	//  ( pair+=EnumerationPair (',' pair+=EnumerationPair)* )
	//;
	public AssertionEnumerationElements getAssertionEnumerationAccess() {
		return pAssertionEnumeration;
	}
	
	public ParserRule getAssertionEnumerationRule() {
		return getAssertionEnumerationAccess().getRule();
	}
	
	//EnumerationPair returns EnumerationPair:
	//  //{ EnumerationPair}
	//  enumeration_literal=ID '->' predicate=Predicate
	//  ;
	public EnumerationPairElements getEnumerationPairAccess() {
		return pEnumerationPair;
	}
	
	public ParserRule getEnumerationPairRule() {
		return getEnumerationPairAccess().getRule();
	}
	
	///////////////////////////////////////////   TYPE   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//TypeLibrary:
	//    decs+=TypeDeclaration+
	//;
	public TypeLibraryElements getTypeLibraryAccess() {
		return pTypeLibrary;
	}
	
	public ParserRule getTypeLibraryRule() {
		return getTypeLibraryAccess().getRule();
	}
	
	//@Exported
	//TypeDeclaration:
	//    'type' name=ID 'is' type=Type
	//;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//TypeOrReference:
	//    ty=Type | ref=[TypeDeclaration]
	//;
	public TypeOrReferenceElements getTypeOrReferenceAccess() {
		return pTypeOrReference;
	}
	
	public ParserRule getTypeOrReferenceRule() {
		return getTypeOrReferenceAccess().getRule();
	}
	
	//BooleanType: b='boolean';
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//StringType: s='string';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	////TimeType: t='time';
	////NullType cannot appear in program text
	////it is the type of the 'null' constant
	//NullType: n='null';
	public NullTypeElements getNullTypeAccess() {
		return pNullType;
	}
	
	public ParserRule getNullTypeRule() {
		return getNullTypeAccess().getRule();
	}
	
	//EnumerationType:
	// 'enumeration' '(' defining_enumeration_literal+=ID+ ')'
	//;
	public EnumerationTypeElements getEnumerationTypeAccess() {
		return pEnumerationType;
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}
	
	//QuantityType:
	//  'quantity'
	//  ( unit=[UnitName] | scalar='scalar' | whole='whole' )
	//  ( '[' lb=ANumber DOTDOT ub=ANumber ']' )?
	//  ( 'step' step=ANumber )?  //check if positive
	//  ( 'representation' representation=[aadl2::PropertyConstant|QCLREF] )?
	//;
	public QuantityTypeElements getQuantityTypeAccess() {
		return pQuantityType;
	}
	
	public ParserRule getQuantityTypeRule() {
		return getQuantityTypeAccess().getRule();
	}
	
	//ANumber:
	//  lit=NUMBER
	//  | property=PropertyReference
	//  | propertyConstant=[aadl2::PropertyConstant|QCLREF]
	//;
	public ANumberElements getANumberAccess() {
		return pANumber;
	}
	
	public ParserRule getANumberRule() {
		return getANumberAccess().getRule();
	}
	
	////array range must be natural
	////array_type
	//ArrayType :
	//  'array' '[' array_ranges=ArrayRangeList ']' 'of' typ=TypeOrReference
	//;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	////array_range_list
	//ArrayRangeList : range+=ArrayRange ( comma?=',' range+=ArrayRange ( ',' range+=ArrayRange )* )? ;
	public ArrayRangeListElements getArrayRangeListAccess() {
		return pArrayRangeList;
	}
	
	public ParserRule getArrayRangeListRule() {
		return getArrayRangeListAccess().getRule();
	}
	
	////natural_range
	//ArrayRange : lb=ANumber ( DOTDOT ub=ANumber)? ;
	public ArrayRangeElements getArrayRangeAccess() {
		return pArrayRange;
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}
	
	////NaturalConstant returns NumericConstant:
	////    NumericConstant  //check if non-negative *integer*  aka natural number
	////;
	//RecordType :
	//    (record?='record' | variant?='variant' | variant?='union' )
	//    '(' fields+=RecordField+ // ( ',' fields+=RecordField )*
	//      ')'
	//;
	public RecordTypeElements getRecordTypeAccess() {
		return pRecordType;
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}
	
	//RecordField :
	//    label=ID
	//    ':' typ=TypeOrReference
	//;
	public RecordFieldElements getRecordFieldAccess() {
		return pRecordField;
	}
	
	public ParserRule getRecordFieldRule() {
		return getRecordFieldAccess().getRule();
	}
	
	////NumericConstant:
	////    quantity=Quantity //from Unit
	////    | propertyConstant=[aadl2::PropertyConstant|QCLREF]
	////    | property=PropertyReference
	////;
	//PropertyReference:
	//    '#' pname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
	//    //component_element_reference
	//    | self?='self' '#' spname=[aadl2::Property|QCLREF] ( field+=PropertyField )*
	//    | component=[aadl2::ComponentClassifier|QCREF] '#' cpname=[aadl2::Property|QCLREF]
	//       ( field+=PropertyField )*
	//;
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return pPropertyReference;
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}
	
	////PropertyName:
	////    simple=[aadl2::Property|QCLREF] ;
	//PropertyField:
	//    '[' (index=NUMBER | variable=[Variable]) ']'  //must check that number is integer
	//    | '.'  (pf=ID
	//           | upper='upper_bound'
	//           | lower='lower_bound'
	//           )
	//;
	public PropertyFieldElements getPropertyFieldAccess() {
		return pPropertyField;
	}
	
	public ParserRule getPropertyFieldRule() {
		return getPropertyFieldAccess().getRule();
	}
	
	/////////////////////////////////////////   UNIT   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//@Exported
	//UnitName:
	//    ( '<' longname+=ID+ '>' )? name=ID
	//;
	public UnitNameElements getUnitNameAccess() {
		return pUnitName;
	}
	
	public ParserRule getUnitNameRule() {
		return getUnitNameAccess().getRule();
	}
	
	//UnitFormula:
	//    top+=[UnitName]+ ( slash?='/' bottom+=[UnitName]+ )?
	//    |
	//    slash?='/' bottom+=[UnitName]+
	//;
	public UnitFormulaElements getUnitFormulaAccess() {
		return pUnitFormula;
	}
	
	public ParserRule getUnitFormulaRule() {
		return getUnitFormulaAccess().getRule();
	}
	
	//UnitDeclaration:
	//    RootDeclaration | UnitExtension
	//;
	public UnitDeclarationElements getUnitDeclarationAccess() {
		return pUnitDeclaration;
	}
	
	public ParserRule getUnitDeclarationRule() {
		return getUnitDeclarationAccess().getRule();
	}
	
	//RootDeclaration:
	//    ( base?='base' | formula=UnitFormula ) '[' kindWords+=ID+ ']'
	//    unitName=UnitName factors+=UnitFactor* ';'
	//    ;
	public RootDeclarationElements getRootDeclarationAccess() {
		return pRootDeclaration;
	}
	
	public ParserRule getRootDeclarationRule() {
		return getRootDeclarationAccess().getRule();
	}
	
	//UnitExtension:
	//    'extension' root=[UnitName] factors+=UnitFactor+ ';'
	//;
	public UnitExtensionElements getUnitExtensionAccess() {
		return pUnitExtension;
	}
	
	public ParserRule getUnitExtensionRule() {
		return getUnitExtensionAccess().getRule();
	}
	
	//MulDiv: ( TIMES | '/' );
	public MulDivElements getMulDivAccess() {
		return pMulDiv;
	}
	
	public ParserRule getMulDivRule() {
		return getMulDivAccess().getRule();
	}
	
	//UnitFactor: ',' unit=UnitName op=MulDiv factor=PositiveNumber;
	public UnitFactorElements getUnitFactorAccess() {
		return pUnitFactor;
	}
	
	public ParserRule getUnitFactorRule() {
		return getUnitFactorAccess().getRule();
	}
	
	//Quantity: number=ANumber
	//    (unit=[UnitName] | scalar='scalar' | whole='whole' )?
	//;
	public QuantityElements getQuantityAccess() {
		return pQuantity;
	}
	
	public ParserRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}
	
	//PositiveNumber:
	//    NUMBER  //check no leading '-'
	//;
	public PositiveNumberElements getPositiveNumberAccess() {
		return pPositiveNumber;
	}
	
	public ParserRule getPositiveNumberRule() {
		return getPositiveNumberAccess().getRule();
	}
	
	////////////////////////// AADL Elements  //////////////////////////////
	//NamedElement returns aadl2::NamedElement:
	//    UnitName
	//    | TypeDeclaration
	////    | EnumerationLiteral
	//    | NamedAssertion
	//  | Variable
	//  | Exception
	//  | BehaviorState
	//  | ForallVariable
	//  | GhostVariable
	//  | BehaviorTransition
	//;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//Element returns aadl2::Element:
	//    UnitDeclaration
	//    | UnitFactor
	//    | UnitFormula
	//    | Quantity
	//    |    EnumerationType
	//    | QuantityType
	//    | ArrayType
	//    | RecordType
	//    | BooleanType
	//    | StringType
	////    | NumericConstant
	////expression
	//    | PropertyReference
	//    | ArrayRange
	//    | ArrayRangeList
	//    | TypeOrReference
	//    | ActualParameter
	//    | ANumber
	//    | AddSub
	//    | AssertionEnumeration
	//    | AssertionFunctionValue
	//    | AssertionNumericExpression
	//    | BooleanExpression
	//    | CaseChoice
	//    | CaseExpression
	//    | ConditionValuePair
	//    | ConditionalAssertionFunction
	//    | ConditionalExpression
	//    | Conjunction
	//    | Constant
	//    | CountingQuantification
	//    | Disjunction
	//    | EnumerationPair
	//    | EnumerationValue
	//    | ExistentialQuantification
	//    | Exp
	//    | Expression
	//    | IndexExpression
	//    | Invocation
	//    | InvariantClause
	//    | LogicVariables
	//    | MultDiv
	//    | NonNumericProperty
	//    | NumericExpression
	//    | NullType
	//    | ParenthesizedSubexpression
	//    | PartialName
	//    | PeriodShift
	//    | Predicate
	//    | ProductQuantification
	//    | PropertyField
	//    | Range
	//  | RecordField
	//    | RecordTerm
	//    | RecordValue
	//    | Relation
	//    | Subexpression
	//    | SumQuantification
	//    | TimedExpression
	//    | TimedSubject
	//    | UnaryOperator
	//    | UniversalQuantification
	//    | Value
	//  | ValueName
	//    | VariableList
	////assertion
	//    | Assertion
	//  | AssertionLibrary
	//  | GhostVariables
	//  | NamelessAssertion
	//  | NamelessEnumeration
	//  | NamelessFunction
	////action
	//    | ActionSubclause
	//    | Action
	//    | ActionTimeout
	//    | ActualParameter
	//    | Alternative
	//    | BLESSAlternative
	//    | AssertClause
	//    | AssertedAction
	//    | Assignment
	//    | BAAlternative
	//    | BasicAction
	//    | BehaviorActions
	//    | BehaviorTime
	////    | BooleanExpression
	//    | VariableDeclaration
	//    | CatchClause
	//    | CatchClauseTerm
	//    | CombinableOperation
	//    | CommunicationAction
	//    | Computation
	//    | DoUntilLoop
	//  | ElseAlternative
	//  | ElseifAlternative
	//    | ExistentialLatticeQuantification
	//    | Expression
	//    | ExpressionOrAny
	//    | ForLoop
	//    | FormalActual
	//    | FormalActualList
	//    | FormalExpressionPair
	//    | FunctionParameters
	//    | GuardedAction
	//  | IssueException
	////    | NameTick
	//    | PeriodShift
	//    | PortInput
	//    | PortOutput
	//    | QuantifiedVariables
	//    | Range
	//    | RecordTerm
	//    | RecordValue
	//    | SimultaneousAssignment
	//    | SubprogramCall
	//    | SubProgramParameter
	//    | UniversalLatticeQuantification
	//    | WhenThrow
	//    | WhileLoop
	////BLESS
	//    | BLESSSubclause
	//    | StatesSection
	////    | BehaviorTransition
	//    | DispatchCondition
	//    | DispatchConjunction
	//    | DispatchExpression
	//    | DispatchTrigger
	//    | EventTrigger
	//    | ExecuteCondition
	//    | IndexExpressionOrRange
	//    | InternalCondition
	//    | InvariantClause
	//    | LogicalOperator
	//    | ModeCondition
	//    | Otherwise
	//    | Priority
	//    | SubprogramAccessDispatch
	//    | Transitions
	////    | TransitionLabel
	//    | TriggerLogicalExpression
	//    | VariablesSection
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	////this must come after aadl2::Element
	//Type:
	//    EnumerationType
	//    | QuantityType
	//    | ArrayType
	//    | RecordType
	//    | BooleanType
	//    | StringType
	//    | NullType
	////    | DataComponentReference
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////DataComponentReference:
	////  data=[aadl2::DataType|QPREF]
	////;
	/////////////////////////  Terminals  /////////////////////////////
	//terminal WS            : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal SL_COMMENT:
	//    '--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	////////////////////////  Numbers   //////////////////////////////
	//terminal fragment
	//DIGIT     :  ( '0'..'9' ) ;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	////add complex literal 12/11/2021
	//terminal
	//NUMBER: '-'? DIGIT+ ('.' DIGIT+ ('e' '-'? DIGIT+)? )? ( 'i' '-'? DIGIT+ ('.' DIGIT+ ('e' '-'? DIGIT+)? )? )?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal fragment
	//LETTER: ('a'..'z'|'A'..'Z');
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//QCLREF:
	//    ID '::' ID;
	public QCLREFElements getQCLREFAccess() {
		return pQCLREF;
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}
	
	//QPREF:
	//    ID ('::' ID)?;
	public QPREFElements getQPREFAccess() {
		return pQPREF;
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}
	
	//QCREF:
	//    (ID '::')* ID ('.' ID)?;
	public QCREFElements getQCREFAccess() {
		return pQCREF;
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}
	
	////IDDOTID:    ID '.' ID;
	//TIMES : '*';
	public TIMESElements getTIMESAccess() {
		return pTIMES;
	}
	
	public ParserRule getTIMESRule() {
		return getTIMESAccess().getRule();
	}
	
	//terminal STRING :
	//      '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\') | !('\\'|'"') )* '"'
	////    |  "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	//    ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:	LETTER ( ('_')? (LETTER |'0'..'9'))*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	////terminal AID:    '$' LETTER ( ('_')? (LETTER |'0'..'9'))*;
	//terminal DOTDOT: '..';
	public TerminalRule getDOTDOTRule() {
		return tDOTDOT;
	}
	
	//terminal COMMADOT: ',.';
	public TerminalRule getCOMMADOTRule() {
		return tCOMMADOT;
	}
	
	//terminal DOTCOMMA: '.,';
	public TerminalRule getDOTCOMMARule() {
		return tDOTCOMMA;
	}
	
	//terminal COMMACOMMA: ',,';
	public TerminalRule getCOMMACOMMARule() {
		return tCOMMACOMMA;
	}
}
