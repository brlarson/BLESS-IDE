/*
 * (C) Multitude Corporation 2023
 * generated by Xtext 2.27.0
 from BLESS.xtext, by BRL 
 */
grammar InternalBLESS;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.multitude.aadl.bless.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.multitude.aadl.bless.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.multitude.aadl.bless.services.BLESSGrammarAccess;

}

@parser::members {

 	private BLESSGrammarAccess grammarAccess;

    public InternalBLESSParser(TokenStream input, BLESSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BLESSGrammarRoots";
   	}

   	@Override
   	protected BLESSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBLESSGrammarRoots
entryRuleBLESSGrammarRoots returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBLESSGrammarRootsRule()); }
	iv_ruleBLESSGrammarRoots=ruleBLESSGrammarRoots
	{ $current=$iv_ruleBLESSGrammarRoots.current; }
	EOF;

// Rule BLESSGrammarRoots
ruleBLESSGrammarRoots returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='unitlibrary'
			{
				newLeafNode(otherlv_0, grammarAccess.getBLESSGrammarRootsAccess().getUnitlibraryKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getUnit_libraryUnitLibraryParserRuleCall_0_1_0());
					}
					lv_unit_library_1_0=ruleUnitLibrary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"unit_library",
							lv_unit_library_1_0,
							"com.multitude.aadl.bless.BLESS.UnitLibrary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='typelibrary'
			{
				newLeafNode(otherlv_2, grammarAccess.getBLESSGrammarRootsAccess().getTypelibraryKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getType_libraryTypeLibraryParserRuleCall_1_1_0());
					}
					lv_type_library_3_0=ruleTypeLibrary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"type_library",
							lv_type_library_3_0,
							"com.multitude.aadl.bless.BLESS.TypeLibrary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='assertionlibrary'
			{
				newLeafNode(otherlv_4, grammarAccess.getBLESSGrammarRootsAccess().getAssertionlibraryKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getAssertion_libraryAssertionLibraryParserRuleCall_2_1_0());
					}
					lv_assertion_library_5_0=ruleAssertionLibrary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"assertion_library",
							lv_assertion_library_5_0,
							"com.multitude.aadl.bless.BLESS.AssertionLibrary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6='actionsubclause'
			{
				newLeafNode(otherlv_6, grammarAccess.getBLESSGrammarRootsAccess().getActionsubclauseKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getAction_subclauseActionSubclauseParserRuleCall_3_1_0());
					}
					lv_action_subclause_7_0=ruleActionSubclause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"action_subclause",
							lv_action_subclause_7_0,
							"com.multitude.aadl.bless.BLESS.ActionSubclause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_8='exceptions'
			{
				newLeafNode(otherlv_8, grammarAccess.getBLESSGrammarRootsAccess().getExceptionsKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getException_libraryExceptionLibraryParserRuleCall_4_1_0());
					}
					lv_exception_library_9_0=ruleExceptionLibrary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"exception_library",
							lv_exception_library_9_0,
							"com.multitude.aadl.bless.BLESS.ExceptionLibrary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_10='blesssubclause'
			{
				newLeafNode(otherlv_10, grammarAccess.getBLESSGrammarRootsAccess().getBlesssubclauseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSGrammarRootsAccess().getBless_subclauseBLESSSubclauseParserRuleCall_5_1_0());
					}
					lv_bless_subclause_11_0=ruleBLESSSubclause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSGrammarRootsRule());
						}
						set(
							$current,
							"bless_subclause",
							lv_bless_subclause_11_0,
							"com.multitude.aadl.bless.BLESS.BLESSSubclause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBLESSSubclause
entryRuleBLESSSubclause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBLESSSubclauseRule()); }
	iv_ruleBLESSSubclause=ruleBLESSSubclause
	{ $current=$iv_ruleBLESSSubclause.current; }
	EOF;

// Rule BLESSSubclause
ruleBLESSSubclause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBLESSSubclauseAccess().getBLESSSubclauseAction_0(),
					$current);
			}
		)
		(
			(
				lv_no_proof_1_0='DO_NOT_PROVE'
				{
					newLeafNode(lv_no_proof_1_0, grammarAccess.getBLESSSubclauseAccess().getNo_proofDO_NOT_PROVEKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBLESSSubclauseRule());
					}
					setWithLastConsumed($current, "no_proof", lv_no_proof_1_0 != null, "DO_NOT_PROVE");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSSubclauseAccess().getAssert_clauseAssertClauseParserRuleCall_2_0());
				}
				lv_assert_clause_2_0=ruleAssertClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSSubclauseRule());
					}
					set(
						$current,
						"assert_clause",
						lv_assert_clause_2_0,
						"com.multitude.aadl.bless.BLESS.AssertClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSSubclauseAccess().getInvariantInvariantClauseParserRuleCall_3_0());
				}
				lv_invariant_3_0=ruleInvariantClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSSubclauseRule());
					}
					set(
						$current,
						"invariant",
						lv_invariant_3_0,
						"com.multitude.aadl.bless.BLESS.InvariantClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSSubclauseAccess().getVariablesVariablesSectionParserRuleCall_4_0());
				}
				lv_variables_4_0=ruleVariablesSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSSubclauseRule());
					}
					set(
						$current,
						"variables",
						lv_variables_4_0,
						"com.multitude.aadl.bless.BLESS.VariablesSection");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSSubclauseAccess().getStatesSectionStatesSectionParserRuleCall_5_0());
				}
				lv_statesSection_5_0=ruleStatesSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSSubclauseRule());
					}
					set(
						$current,
						"statesSection",
						lv_statesSection_5_0,
						"com.multitude.aadl.bless.BLESS.StatesSection");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSSubclauseAccess().getTransitionsTransitionsParserRuleCall_6_0());
				}
				lv_transitions_6_0=ruleTransitions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSSubclauseRule());
					}
					set(
						$current,
						"transitions",
						lv_transitions_6_0,
						"com.multitude.aadl.bless.BLESS.Transitions");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleUnitLibrary
entryRuleUnitLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitLibraryRule()); }
	iv_ruleUnitLibrary=ruleUnitLibrary
	{ $current=$iv_ruleUnitLibrary.current; }
	EOF;

// Rule UnitLibrary
ruleUnitLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUnitLibraryAccess().getUnitDeclarationsUnitDeclarationParserRuleCall_0());
			}
			lv_unitDeclarations_0_0=ruleUnitDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUnitLibraryRule());
				}
				add(
					$current,
					"unitDeclarations",
					lv_unitDeclarations_0_0,
					"com.multitude.aadl.bless.BLESS.UnitDeclaration");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleAssertionLibrary
entryRuleAssertionLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionLibraryRule()); }
	iv_ruleAssertionLibrary=ruleAssertionLibrary
	{ $current=$iv_ruleAssertionLibrary.current; }
	EOF;

// Rule AssertionLibrary
ruleAssertionLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAssertionLibraryAccess().getAssertionLibraryAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionLibraryAccess().getGhostsGhostVariablesParserRuleCall_1_0());
				}
				lv_ghosts_1_0=ruleGhostVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionLibraryRule());
					}
					set(
						$current,
						"ghosts",
						lv_ghosts_1_0,
						"com.multitude.aadl.bless.BLESS.GhostVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionLibraryAccess().getAssertion_listNamedAssertionParserRuleCall_2_0());
				}
				lv_assertion_list_2_0=ruleNamedAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionLibraryRule());
					}
					add(
						$current,
						"assertion_list",
						lv_assertion_list_2_0,
						"com.multitude.aadl.bless.BLESS.NamedAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleExceptionLibrary
entryRuleExceptionLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionLibraryRule()); }
	iv_ruleExceptionLibrary=ruleExceptionLibrary
	{ $current=$iv_ruleExceptionLibrary.current; }
	EOF;

// Rule ExceptionLibrary
ruleExceptionLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExceptionLibraryAccess().getExceptionLibraryAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExceptionLibraryAccess().getExceptiondefinitionsExceptionParserRuleCall_1_0());
				}
				lv_exceptiondefinitions_1_0=ruleException
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExceptionLibraryRule());
					}
					add(
						$current,
						"exceptiondefinitions",
						lv_exceptiondefinitions_1_0,
						"com.multitude.aadl.bless.BLESS.Exception");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleActionSubclause
entryRuleActionSubclause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionSubclauseRule()); }
	iv_ruleActionSubclause=ruleActionSubclause
	{ $current=$iv_ruleActionSubclause.current; }
	EOF;

// Rule ActionSubclause
ruleActionSubclause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionSubclauseAccess().getActionSubclauseAction_0(),
					$current);
			}
		)
		(
			(
				lv_no_proof_1_0='DO_NOT_PROVE'
				{
					newLeafNode(lv_no_proof_1_0, grammarAccess.getActionSubclauseAccess().getNo_proofDO_NOT_PROVEKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionSubclauseRule());
					}
					setWithLastConsumed($current, "no_proof", lv_no_proof_1_0 != null, "DO_NOT_PROVE");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActionSubclauseAccess().getThrows_clauseThrowsClauseParserRuleCall_2_0());
				}
				lv_throws_clause_2_0=ruleThrowsClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
					}
					set(
						$current,
						"throws_clause",
						lv_throws_clause_2_0,
						"com.multitude.aadl.bless.BLESS.ThrowsClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActionSubclauseAccess().getAssert_clauseAssertClauseParserRuleCall_3_0());
				}
				lv_assert_clause_3_0=ruleAssertClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
					}
					set(
						$current,
						"assert_clause",
						lv_assert_clause_3_0,
						"com.multitude.aadl.bless.BLESS.AssertClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4='pre'
			{
				newLeafNode(otherlv_4, grammarAccess.getActionSubclauseAccess().getPreKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSubclauseAccess().getPreconditionAssertionParserRuleCall_4_1_0());
					}
					lv_precondition_5_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
						}
						set(
							$current,
							"precondition",
							lv_precondition_5_0,
							"com.multitude.aadl.bless.BLESS.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='post'
			{
				newLeafNode(otherlv_6, grammarAccess.getActionSubclauseAccess().getPostKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSubclauseAccess().getPostconditionAssertionParserRuleCall_5_1_0());
					}
					lv_postcondition_7_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
						}
						set(
							$current,
							"postcondition",
							lv_postcondition_7_0,
							"com.multitude.aadl.bless.BLESS.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='invariant'
			{
				newLeafNode(otherlv_8, grammarAccess.getActionSubclauseAccess().getInvariantKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSubclauseAccess().getInvariantAssertionParserRuleCall_6_1_0());
					}
					lv_invariant_9_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
						}
						set(
							$current,
							"invariant",
							lv_invariant_9_0,
							"com.multitude.aadl.bless.BLESS.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getActionSubclauseAccess().getElqExistentialLatticeQuantificationParserRuleCall_7_0());
				}
				lv_elq_10_0=ruleExistentialLatticeQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionSubclauseRule());
					}
					set(
						$current,
						"elq",
						lv_elq_10_0,
						"com.multitude.aadl.bless.BLESS.ExistentialLatticeQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInvariantClause
entryRuleInvariantClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvariantClauseRule()); }
	iv_ruleInvariantClause=ruleInvariantClause
	{ $current=$iv_ruleInvariantClause.current; }
	EOF;

// Rule InvariantClause
ruleInvariantClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='invariant'
		{
			newLeafNode(otherlv_0, grammarAccess.getInvariantClauseAccess().getInvariantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInvariantClauseAccess().getInvAssertionParserRuleCall_1_0());
				}
				lv_inv_1_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInvariantClauseRule());
					}
					set(
						$current,
						"inv",
						lv_inv_1_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariablesSection
entryRuleVariablesSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariablesSectionRule()); }
	iv_ruleVariablesSection=ruleVariablesSection
	{ $current=$iv_ruleVariablesSection.current; }
	EOF;

// Rule VariablesSection
ruleVariablesSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variables'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariablesSectionAccess().getVariablesKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariablesSectionAccess().getBehavior_variablesVariableDeclarationParserRuleCall_1_0());
				}
				lv_behavior_variables_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariablesSectionRule());
					}
					add(
						$current,
						"behavior_variables",
						lv_behavior_variables_1_0,
						"com.multitude.aadl.bless.BLESS.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleStatesSection
entryRuleStatesSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatesSectionRule()); }
	iv_ruleStatesSection=ruleStatesSection
	{ $current=$iv_ruleStatesSection.current; }
	EOF;

// Rule StatesSection
ruleStatesSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_st_0_0='states'
				{
					newLeafNode(lv_st_0_0, grammarAccess.getStatesSectionAccess().getStStatesKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStatesSectionRule());
					}
					setWithLastConsumed($current, "st", lv_st_0_0, "states");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatesSectionAccess().getStatesBehaviorStateParserRuleCall_1_0());
				}
				lv_states_1_0=ruleBehaviorState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatesSectionRule());
					}
					add(
						$current,
						"states",
						lv_states_1_0,
						"com.multitude.aadl.bless.BLESS.BehaviorState");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleBehaviorState
entryRuleBehaviorState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorStateRule()); }
	iv_ruleBehaviorState=ruleBehaviorState
	{ $current=$iv_ruleBehaviorState.current; }
	EOF;

// Rule BehaviorState
ruleBehaviorState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBehaviorStateAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getBehaviorStateAccess().getColonKeyword_1());
		}
		(
			(
				lv_initial_2_0='initial'
				{
					newLeafNode(lv_initial_2_0, grammarAccess.getBehaviorStateAccess().getInitialInitialKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorStateRule());
					}
					setWithLastConsumed($current, "initial", lv_initial_2_0 != null, "initial");
				}
			)
		)?
		(
			(
				lv_complete_3_0='complete'
				{
					newLeafNode(lv_complete_3_0, grammarAccess.getBehaviorStateAccess().getCompleteCompleteKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorStateRule());
					}
					setWithLastConsumed($current, "complete", lv_complete_3_0 != null, "complete");
				}
			)
		)?
		(
			(
				lv_final_4_0='final'
				{
					newLeafNode(lv_final_4_0, grammarAccess.getBehaviorStateAccess().getFinalFinalKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorStateRule());
					}
					setWithLastConsumed($current, "final", lv_final_4_0 != null, "final");
				}
			)
		)?
		(
			(
				lv_mode_5_0='mode'
				{
					newLeafNode(lv_mode_5_0, grammarAccess.getBehaviorStateAccess().getModeModeKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorStateRule());
					}
					setWithLastConsumed($current, "mode", lv_mode_5_0 != null, "mode");
				}
			)
		)?
		otherlv_6='state'
		{
			newLeafNode(otherlv_6, grammarAccess.getBehaviorStateAccess().getStateKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorStateAccess().getState_assertionAssertionParserRuleCall_7_0());
				}
				lv_state_assertion_7_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorStateRule());
					}
					set(
						$current,
						"state_assertion",
						lv_state_assertion_7_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getBehaviorStateAccess().getSemicolonKeyword_8());
			}
		)?
	)
;

// Entry rule entryRuleTransitions
entryRuleTransitions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionsRule()); }
	iv_ruleTransitions=ruleTransitions
	{ $current=$iv_ruleTransitions.current; }
	EOF;

// Rule Transitions
ruleTransitions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transitions'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransitionsAccess().getTransitionsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionsAccess().getBtBehaviorTransitionParserRuleCall_1_0());
				}
				lv_bt_1_0=ruleBehaviorTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionsRule());
					}
					add(
						$current,
						"bt",
						lv_bt_1_0,
						"com.multitude.aadl.bless.BLESS.BehaviorTransition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleBehaviorTransition
entryRuleBehaviorTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorTransitionRule()); }
	iv_ruleBehaviorTransition=ruleBehaviorTransition
	{ $current=$iv_ruleBehaviorTransition.current; }
	EOF;

// Rule BehaviorTransition
ruleBehaviorTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBehaviorTransitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorTransitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getPriorityPriorityParserRuleCall_1_0());
				}
				lv_priority_1_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
					}
					set(
						$current,
						"priority",
						lv_priority_1_0,
						"com.multitude.aadl.bless.BLESS.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_colon_2_0=':'
				{
					newLeafNode(lv_colon_2_0, grammarAccess.getBehaviorTransitionAccess().getColonColonKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorTransitionRule());
					}
					setWithLastConsumed($current, "colon", lv_colon_2_0, ":");
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBehaviorTransitionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getBehaviorTransitionAccess().getSourcesBehaviorStateCrossReference_3_0_0());
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getBehaviorTransitionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorTransitionRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getBehaviorTransitionAccess().getSourcesBehaviorStateCrossReference_3_1_1_0());
						}
					)
				)
			)*
		)
		otherlv_6='-['
		{
			newLeafNode(otherlv_6, grammarAccess.getBehaviorTransitionAccess().getHyphenMinusLeftSquareBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getDispatchDispatchConditionParserRuleCall_5_0_0());
					}
					lv_dispatch_7_0=ruleDispatchCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
						}
						set(
							$current,
							"dispatch",
							lv_dispatch_7_0,
							"com.multitude.aadl.bless.BLESS.DispatchCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getExecuteExecuteConditionParserRuleCall_5_1_0());
					}
					lv_execute_8_0=ruleExecuteCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
						}
						set(
							$current,
							"execute",
							lv_execute_8_0,
							"com.multitude.aadl.bless.BLESS.ExecuteCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getModeModeConditionParserRuleCall_5_2_0());
					}
					lv_mode_9_0=ruleModeCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
						}
						set(
							$current,
							"mode",
							lv_mode_9_0,
							"com.multitude.aadl.bless.BLESS.ModeCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getInternalInternalConditionParserRuleCall_5_3_0());
					}
					lv_internal_10_0=ruleInternalCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
						}
						set(
							$current,
							"internal",
							lv_internal_10_0,
							"com.multitude.aadl.bless.BLESS.InternalCondition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_11=']->'
		{
			newLeafNode(otherlv_11, grammarAccess.getBehaviorTransitionAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBehaviorTransitionRule());
					}
				}
				otherlv_12=RULE_ID
				{
					newLeafNode(otherlv_12, grammarAccess.getBehaviorTransitionAccess().getDestinationBehaviorStateCrossReference_7_0());
				}
			)
		)
		(
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getBehaviorTransitionAccess().getLeftCurlyBracketKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getActionsBehaviorActionsParserRuleCall_8_1_0());
					}
					lv_actions_14_0=ruleBehaviorActions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
						}
						set(
							$current,
							"actions",
							lv_actions_14_0,
							"com.multitude.aadl.bless.BLESS.BehaviorActions");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getBehaviorTransitionAccess().getRightCurlyBracketKeyword_8_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getAssAssertionParserRuleCall_9_0());
				}
				lv_ass_16_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
					}
					set(
						$current,
						"ass",
						lv_ass_16_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_17=';'
			{
				newLeafNode(otherlv_17, grammarAccess.getBehaviorTransitionAccess().getSemicolonKeyword_10());
			}
		)?
	)
;

// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	iv_rulePriority=rulePriority
	{ $current=$iv_rulePriority.current; }
	EOF;

// Rule Priority
rulePriority returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getPriorityAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_priority_1_0=RULE_NUMBER
				{
					newLeafNode(lv_priority_1_0, grammarAccess.getPriorityAccess().getPriorityNUMBERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPriorityRule());
					}
					setWithLastConsumed(
						$current,
						"priority",
						lv_priority_1_0,
						"com.multitude.aadl.bless.BLESS.NUMBER");
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getPriorityAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleDispatchCondition
entryRuleDispatchCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchConditionRule()); }
	iv_ruleDispatchCondition=ruleDispatchCondition
	{ $current=$iv_ruleDispatchCondition.current; }
	EOF;

// Rule DispatchCondition
ruleDispatchCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getDispatchConditionAccess().getOnKeyword_0());
		}
		(
			(
				lv_dispatch_1_0='dispatch'
				{
					newLeafNode(lv_dispatch_1_0, grammarAccess.getDispatchConditionAccess().getDispatchDispatchKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDispatchConditionRule());
					}
					setWithLastConsumed($current, "dispatch", lv_dispatch_1_0, "dispatch");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchConditionAccess().getDeDispatchExpressionParserRuleCall_2_0());
				}
				lv_de_2_0=ruleDispatchExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
					}
					set(
						$current,
						"de",
						lv_de_2_0,
						"com.multitude.aadl.bless.BLESS.DispatchExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchConditionAccess().getFrozenFreezePortParserRuleCall_3_0());
				}
				lv_frozen_3_0=ruleFreezePort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
					}
					set(
						$current,
						"frozen",
						lv_frozen_3_0,
						"com.multitude.aadl.bless.BLESS.FreezePort");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleDispatchExpression
entryRuleDispatchExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchExpressionRule()); }
	iv_ruleDispatchExpression=ruleDispatchExpression
	{ $current=$iv_ruleDispatchExpression.current; }
	EOF;

// Rule DispatchExpression
ruleDispatchExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDispatchExpressionAccess().getDcDispatchConjunctionParserRuleCall_0_0_0());
					}
					lv_dc_0_0=ruleDispatchConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
						}
						add(
							$current,
							"dc",
							lv_dc_0_0,
							"com.multitude.aadl.bless.BLESS.DispatchConjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						lv_or_1_0='or'
						{
							newLeafNode(lv_or_1_0, grammarAccess.getDispatchExpressionAccess().getOrOrKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDispatchExpressionRule());
							}
							setWithLastConsumed($current, "or", lv_or_1_0 != null, "or");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDispatchExpressionAccess().getDcDispatchConjunctionParserRuleCall_0_1_1_0());
						}
						lv_dc_2_0=ruleDispatchConjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
							}
							add(
								$current,
								"dc",
								lv_dc_2_0,
								"com.multitude.aadl.bless.BLESS.DispatchConjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='or'
					{
						newLeafNode(otherlv_3, grammarAccess.getDispatchExpressionAccess().getOrKeyword_0_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDispatchExpressionAccess().getDcDispatchConjunctionParserRuleCall_0_1_2_1_0());
							}
							lv_dc_4_0=ruleDispatchConjunction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
								}
								add(
									$current,
									"dc",
									lv_dc_4_0,
									"com.multitude.aadl.bless.BLESS.DispatchConjunction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchExpressionAccess().getSubprogramaccessdispatchSubprogramAccessDispatchParserRuleCall_1_0());
				}
				lv_subprogramaccessdispatch_5_0=ruleSubprogramAccessDispatch
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchExpressionRule());
					}
					set(
						$current,
						"subprogramaccessdispatch",
						lv_subprogramaccessdispatch_5_0,
						"com.multitude.aadl.bless.BLESS.SubprogramAccessDispatch");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSubprogramAccessDispatch
entryRuleSubprogramAccessDispatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramAccessDispatchRule()); }
	iv_ruleSubprogramAccessDispatch=ruleSubprogramAccessDispatch
	{ $current=$iv_ruleSubprogramAccessDispatch.current; }
	EOF;

// Rule SubprogramAccessDispatch
ruleSubprogramAccessDispatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='access'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubprogramAccessDispatchAccess().getAccessKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubprogramAccessDispatchRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSubprogramAccessDispatchAccess().getAccessSubprogramAccessCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleDispatchConjunction
entryRuleDispatchConjunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchConjunctionRule()); }
	iv_ruleDispatchConjunction=ruleDispatchConjunction
	{ $current=$iv_ruleDispatchConjunction.current; }
	EOF;

// Rule DispatchConjunction
ruleDispatchConjunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchConjunctionAccess().getTriggerDispatchTriggerParserRuleCall_0_0());
				}
				lv_trigger_0_0=ruleDispatchTrigger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchConjunctionRule());
					}
					add(
						$current,
						"trigger",
						lv_trigger_0_0,
						"com.multitude.aadl.bless.BLESS.DispatchTrigger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_and_1_0='and'
					{
						newLeafNode(lv_and_1_0, grammarAccess.getDispatchConjunctionAccess().getAndAndKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDispatchConjunctionRule());
						}
						setWithLastConsumed($current, "and", lv_and_1_0 != null, "and");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDispatchConjunctionAccess().getTriggerDispatchTriggerParserRuleCall_1_1_0());
					}
					lv_trigger_2_0=ruleDispatchTrigger
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDispatchConjunctionRule());
						}
						add(
							$current,
							"trigger",
							lv_trigger_2_0,
							"com.multitude.aadl.bless.BLESS.DispatchTrigger");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3='and'
				{
					newLeafNode(otherlv_3, grammarAccess.getDispatchConjunctionAccess().getAndKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDispatchConjunctionAccess().getTriggerDispatchTriggerParserRuleCall_1_2_1_0());
						}
						lv_trigger_4_0=ruleDispatchTrigger
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDispatchConjunctionRule());
							}
							add(
								$current,
								"trigger",
								lv_trigger_4_0,
								"com.multitude.aadl.bless.BLESS.DispatchTrigger");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleDispatchTrigger
entryRuleDispatchTrigger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDispatchTriggerRule()); }
	iv_ruleDispatchTrigger=ruleDispatchTrigger
	{ $current=$iv_ruleDispatchTrigger.current; }
	EOF;

// Rule DispatchTrigger
ruleDispatchTrigger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDispatchTriggerAccess().getPortPortNameParserRuleCall_0_0());
				}
				lv_port_0_0=rulePortName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDispatchTriggerRule());
					}
					set(
						$current,
						"port",
						lv_port_0_0,
						"com.multitude.aadl.bless.BLESS.PortName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_timeout_1_0='timeout'
					{
						newLeafNode(lv_timeout_1_0, grammarAccess.getDispatchTriggerAccess().getTimeoutTimeoutKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDispatchTriggerRule());
						}
						setWithLastConsumed($current, "timeout", lv_timeout_1_0, "timeout");
					}
				)
			)
			(
				(
					(
						(
							lv_lp_2_0='('
							{
								newLeafNode(lv_lp_2_0, grammarAccess.getDispatchTriggerAccess().getLpLeftParenthesisKeyword_1_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getDispatchTriggerRule());
								}
								setWithLastConsumed($current, "lp", lv_lp_2_0 != null, "(");
							}
						)
					)
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getDispatchTriggerRule());
								}
							}
							otherlv_3=RULE_ID
							{
								newLeafNode(otherlv_3, grammarAccess.getDispatchTriggerAccess().getPortsNamedElementCrossReference_1_1_0_1_0());
							}
						)
					)
					(
						(
							otherlv_4='or'
							{
								newLeafNode(otherlv_4, grammarAccess.getDispatchTriggerAccess().getOrKeyword_1_1_0_2_0());
							}
						)?
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getDispatchTriggerRule());
									}
								}
								otherlv_5=RULE_ID
								{
									newLeafNode(otherlv_5, grammarAccess.getDispatchTriggerAccess().getPortsNamedElementCrossReference_1_1_0_2_1_0());
								}
							)
						)
					)*
					otherlv_6=')'
					{
						newLeafNode(otherlv_6, grammarAccess.getDispatchTriggerAccess().getRightParenthesisKeyword_1_1_0_3());
					}
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getDispatchTriggerAccess().getTimeBehaviorTimeParserRuleCall_1_1_1_0());
						}
						lv_time_7_0=ruleBehaviorTime
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDispatchTriggerRule());
							}
							set(
								$current,
								"time",
								lv_time_7_0,
								"com.multitude.aadl.bless.BLESS.BehaviorTime");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRulePortName
entryRulePortName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortNameRule()); }
	iv_rulePortName=rulePortName
	{ $current=$iv_rulePortName.current; }
	EOF;

// Rule PortName
rulePortName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortNameRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPortNameAccess().getPortNamedElementCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getPortNameAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_index_2_0=RULE_NUMBER
					{
						newLeafNode(lv_index_2_0, grammarAccess.getPortNameAccess().getIndexNUMBERTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPortNameRule());
						}
						setWithLastConsumed(
							$current,
							"index",
							lv_index_2_0,
							"com.multitude.aadl.bless.BLESS.NUMBER");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getPortNameAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleExecuteCondition
entryRuleExecuteCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecuteConditionRule()); }
	iv_ruleExecuteCondition=ruleExecuteCondition
	{ $current=$iv_ruleExecuteCondition.current; }
	EOF;

// Rule ExecuteCondition
ruleExecuteCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExecuteConditionAccess().getEorBooleanExpressionParserRuleCall_0_0());
				}
				lv_eor_0_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecuteConditionRule());
					}
					set(
						$current,
						"eor",
						lv_eor_0_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExecuteConditionAccess().getOtherwiseOtherwiseParserRuleCall_1_0());
				}
				lv_otherwise_1_0=ruleOtherwise
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExecuteConditionRule());
					}
					set(
						$current,
						"otherwise",
						lv_otherwise_1_0,
						"com.multitude.aadl.bless.BLESS.Otherwise");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOtherwise
entryRuleOtherwise returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtherwiseRule()); }
	iv_ruleOtherwise=ruleOtherwise
	{ $current=$iv_ruleOtherwise.current; }
	EOF;

// Rule Otherwise
ruleOtherwise returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_o_0_0='otherwise'
			{
				newLeafNode(lv_o_0_0, grammarAccess.getOtherwiseAccess().getOOtherwiseKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOtherwiseRule());
				}
				setWithLastConsumed($current, "o", lv_o_0_0, "otherwise");
			}
		)
	)
;

// Entry rule entryRuleModeCondition
entryRuleModeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModeConditionRule()); }
	iv_ruleModeCondition=ruleModeCondition
	{ $current=$iv_ruleModeCondition.current; }
	EOF;

// Rule ModeCondition
ruleModeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getModeConditionAccess().getOnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModeConditionAccess().getTleTriggerLogicalExpressionParserRuleCall_1_0());
				}
				lv_tle_1_0=ruleTriggerLogicalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModeConditionRule());
					}
					set(
						$current,
						"tle",
						lv_tle_1_0,
						"com.multitude.aadl.bless.BLESS.TriggerLogicalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTriggerLogicalExpression
entryRuleTriggerLogicalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriggerLogicalExpressionRule()); }
	iv_ruleTriggerLogicalExpression=ruleTriggerLogicalExpression
	{ $current=$iv_ruleTriggerLogicalExpression.current; }
	EOF;

// Rule TriggerLogicalExpression
ruleTriggerLogicalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTriggerLogicalExpressionAccess().getFirstEventTriggerParserRuleCall_0_0());
				}
				lv_first_0_0=ruleEventTrigger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriggerLogicalExpressionRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"com.multitude.aadl.bless.BLESS.EventTrigger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTriggerLogicalExpressionAccess().getOpLogicalOperatorParserRuleCall_1_0_0());
					}
					lv_op_1_0=ruleLogicalOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTriggerLogicalExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_1_0,
							"com.multitude.aadl.bless.BLESS.LogicalOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTriggerLogicalExpressionAccess().getTriggerEventTriggerParserRuleCall_1_1_0());
					}
					lv_trigger_2_0=ruleEventTrigger
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTriggerLogicalExpressionRule());
						}
						add(
							$current,
							"trigger",
							lv_trigger_2_0,
							"com.multitude.aadl.bless.BLESS.EventTrigger");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTriggerLogicalExpressionAccess().getOpsLogicalOperatorParserRuleCall_1_2_0_0());
						}
						lv_ops_3_0=ruleLogicalOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTriggerLogicalExpressionRule());
							}
							add(
								$current,
								"ops",
								lv_ops_3_0,
								"com.multitude.aadl.bless.BLESS.LogicalOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTriggerLogicalExpressionAccess().getTriggerEventTriggerParserRuleCall_1_2_1_0());
						}
						lv_trigger_4_0=ruleEventTrigger
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTriggerLogicalExpressionRule());
							}
							add(
								$current,
								"trigger",
								lv_trigger_4_0,
								"com.multitude.aadl.bless.BLESS.EventTrigger");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEventTrigger
entryRuleEventTrigger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventTriggerRule()); }
	iv_ruleEventTrigger=ruleEventTrigger
	{ $current=$iv_ruleEventTrigger.current; }
	EOF;

// Rule EventTrigger
ruleEventTrigger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_sub_0_0=RULE_ID
					{
						newLeafNode(lv_sub_0_0, grammarAccess.getEventTriggerAccess().getSubIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventTriggerRule());
						}
						addWithLastConsumed(
							$current,
							"sub",
							lv_sub_0_0,
							"com.multitude.aadl.bless.BLESS.ID");
					}
				)
			)
			(
				otherlv_1='.'
				{
					newLeafNode(otherlv_1, grammarAccess.getEventTriggerAccess().getFullStopKeyword_0_1_0());
				}
				(
					(
						lv_sub_2_0=RULE_ID
						{
							newLeafNode(lv_sub_2_0, grammarAccess.getEventTriggerAccess().getSubIDTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEventTriggerRule());
							}
							addWithLastConsumed(
								$current,
								"sub",
								lv_sub_2_0,
								"com.multitude.aadl.bless.BLESS.ID");
						}
					)
				)
			)*
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getEventTriggerAccess().getFullStopKeyword_0_2());
			}
			(
				(
					lv_sub_4_0=RULE_ID
					{
						newLeafNode(lv_sub_4_0, grammarAccess.getEventTriggerAccess().getSubIDTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventTriggerRule());
						}
						addWithLastConsumed(
							$current,
							"sub",
							lv_sub_4_0,
							"com.multitude.aadl.bless.BLESS.ID");
					}
				)
			)
			(
				otherlv_5='['
				{
					newLeafNode(otherlv_5, grammarAccess.getEventTriggerAccess().getLeftSquareBracketKeyword_0_4_0());
				}
				(
					(
						lv_index_6_0=RULE_NUMBER
						{
							newLeafNode(lv_index_6_0, grammarAccess.getEventTriggerAccess().getIndexNUMBERTerminalRuleCall_0_4_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEventTriggerRule());
							}
							setWithLastConsumed(
								$current,
								"index",
								lv_index_6_0,
								"com.multitude.aadl.bless.BLESS.NUMBER");
						}
					)
				)
				otherlv_7=']'
				{
					newLeafNode(otherlv_7, grammarAccess.getEventTriggerAccess().getRightSquareBracketKeyword_0_4_2());
				}
			)?
		)
		    |
		(
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getEventTriggerAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventTriggerAccess().getTleTriggerLogicalExpressionParserRuleCall_1_1_0());
					}
					lv_tle_9_0=ruleTriggerLogicalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventTriggerRule());
						}
						set(
							$current,
							"tle",
							lv_tle_9_0,
							"com.multitude.aadl.bless.BLESS.TriggerLogicalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getEventTriggerAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleLogicalOperator
entryRuleLogicalOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOperatorRule()); }
	iv_ruleLogicalOperator=ruleLogicalOperator
	{ $current=$iv_ruleLogicalOperator.current; }
	EOF;

// Rule LogicalOperator
ruleLogicalOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_0='and'
				{
					newLeafNode(lv_op_0_0, grammarAccess.getLogicalOperatorAccess().getOpAndKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_0, "and");
				}
			)
		)
		    |
		(
			(
				lv_op_1_0='or'
				{
					newLeafNode(lv_op_1_0, grammarAccess.getLogicalOperatorAccess().getOpOrKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_1_0, "or");
				}
			)
		)
		    |
		(
			(
				lv_op_2_0='xor'
				{
					newLeafNode(lv_op_2_0, grammarAccess.getLogicalOperatorAccess().getOpXorKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_2_0, "xor");
				}
			)
		)
		    |
		(
			otherlv_3='and'
			{
				newLeafNode(otherlv_3, grammarAccess.getLogicalOperatorAccess().getAndKeyword_3_0());
			}
			(
				(
					lv_op_4_0='then'
					{
						newLeafNode(lv_op_4_0, grammarAccess.getLogicalOperatorAccess().getOpThenKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicalOperatorRule());
						}
						setWithLastConsumed($current, "op", lv_op_4_0, "then");
					}
				)
			)
		)
		    |
		(
			otherlv_5='or'
			{
				newLeafNode(otherlv_5, grammarAccess.getLogicalOperatorAccess().getOrKeyword_4_0());
			}
			(
				(
					lv_op_6_0='else'
					{
						newLeafNode(lv_op_6_0, grammarAccess.getLogicalOperatorAccess().getOpElseKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicalOperatorRule());
						}
						setWithLastConsumed($current, "op", lv_op_6_0, "else");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInternalCondition
entryRuleInternalCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInternalConditionRule()); }
	iv_ruleInternalCondition=ruleInternalCondition
	{ $current=$iv_ruleInternalCondition.current; }
	EOF;

// Rule InternalCondition
ruleInternalCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getInternalConditionAccess().getOnKeyword_0());
		}
		otherlv_1='internal'
		{
			newLeafNode(otherlv_1, grammarAccess.getInternalConditionAccess().getInternalKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInternalConditionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getInternalConditionAccess().getFirstPortCrossReference_2_0());
				}
			)
		)
		(
			otherlv_3='or'
			{
				newLeafNode(otherlv_3, grammarAccess.getInternalConditionAccess().getOrKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInternalConditionRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getInternalConditionAccess().getPortsPortCrossReference_3_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssertClause
entryRuleAssertClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertClauseRule()); }
	iv_ruleAssertClause=ruleAssertClause
	{ $current=$iv_ruleAssertClause.current; }
	EOF;

// Rule AssertClause
ruleAssertClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertClauseAccess().getAssertKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertClauseAccess().getAssertionsNamedAssertionParserRuleCall_1_0());
				}
				lv_assertions_1_0=ruleNamedAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertClauseRule());
					}
					add(
						$current,
						"assertions",
						lv_assertions_1_0,
						"com.multitude.aadl.bless.BLESS.NamedAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleExistentialLatticeQuantification
entryRuleExistentialLatticeQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistentialLatticeQuantificationRule()); }
	iv_ruleExistentialLatticeQuantification=ruleExistentialLatticeQuantification
	{ $current=$iv_ruleExistentialLatticeQuantification.current; }
	EOF;

// Rule ExistentialLatticeQuantification
ruleExistentialLatticeQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialLatticeQuantificationAccess().getQuantified_variablesQuantifiedVariablesParserRuleCall_0_0());
				}
				lv_quantified_variables_0_0=ruleQuantifiedVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialLatticeQuantificationRule());
					}
					set(
						$current,
						"quantified_variables",
						lv_quantified_variables_0_0,
						"com.multitude.aadl.bless.BLESS.QuantifiedVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getExistentialLatticeQuantificationAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialLatticeQuantificationAccess().getActionsBehaviorActionsParserRuleCall_2_0());
				}
				lv_actions_2_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialLatticeQuantificationRule());
					}
					set(
						$current,
						"actions",
						lv_actions_2_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getExistentialLatticeQuantificationAccess().getRightCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialLatticeQuantificationAccess().getTimeoutActionTimeoutParserRuleCall_4_0());
				}
				lv_timeout_4_0=ruleActionTimeout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialLatticeQuantificationRule());
					}
					set(
						$current,
						"timeout",
						lv_timeout_4_0,
						"com.multitude.aadl.bless.BLESS.ActionTimeout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialLatticeQuantificationAccess().getCatch_clauseCatchClauseParserRuleCall_5_0());
				}
				lv_catch_clause_5_0=ruleCatchClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialLatticeQuantificationRule());
					}
					set(
						$current,
						"catch_clause",
						lv_catch_clause_5_0,
						"com.multitude.aadl.bless.BLESS.CatchClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleQuantifiedVariables
entryRuleQuantifiedVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantifiedVariablesRule()); }
	iv_ruleQuantifiedVariables=ruleQuantifiedVariables
	{ $current=$iv_ruleQuantifiedVariables.current; }
	EOF;

// Rule QuantifiedVariables
ruleQuantifiedVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='declare'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuantifiedVariablesAccess().getDeclareKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantifiedVariablesAccess().getVariablesVariableDeclarationParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantifiedVariablesRule());
					}
					add(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleUniversalLatticeQuantification
entryRuleUniversalLatticeQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversalLatticeQuantificationRule()); }
	iv_ruleUniversalLatticeQuantification=ruleUniversalLatticeQuantification
	{ $current=$iv_ruleUniversalLatticeQuantification.current; }
	EOF;

// Rule UniversalLatticeQuantification
ruleUniversalLatticeQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forall'
		{
			newLeafNode(otherlv_0, grammarAccess.getUniversalLatticeQuantificationAccess().getForallKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalLatticeQuantificationAccess().getVariablesForallVariableParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleForallVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalLatticeQuantificationRule());
					}
					add(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.ForallVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getUniversalLatticeQuantificationAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalLatticeQuantificationAccess().getLower_boundExpressionParserRuleCall_3_0());
				}
				lv_lower_bound_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalLatticeQuantificationRule());
					}
					set(
						$current,
						"lower_bound",
						lv_lower_bound_3_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_DOTDOT_4=RULE_DOTDOT
		{
			newLeafNode(this_DOTDOT_4, grammarAccess.getUniversalLatticeQuantificationAccess().getDOTDOTTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalLatticeQuantificationAccess().getUpper_boundExpressionParserRuleCall_5_0());
				}
				lv_upper_bound_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalLatticeQuantificationRule());
					}
					set(
						$current,
						"upper_bound",
						lv_upper_bound_5_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalLatticeQuantificationAccess().getElqExistentialLatticeQuantificationParserRuleCall_6_0());
				}
				lv_elq_6_0=ruleExistentialLatticeQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalLatticeQuantificationRule());
					}
					set(
						$current,
						"elq",
						lv_elq_6_0,
						"com.multitude.aadl.bless.BLESS.ExistentialLatticeQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForallVariable
entryRuleForallVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForallVariableRule()); }
	iv_ruleForallVariable=ruleForallVariable
	{ $current=$iv_ruleForallVariable.current; }
	EOF;

// Rule ForallVariable
ruleForallVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getForallVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getForallVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"com.multitude.aadl.bless.BLESS.ID");
			}
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableVariableParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"com.multitude.aadl.bless.BLESS.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_nonvolatile_1_0='nonvolatile'
					{
						newLeafNode(lv_nonvolatile_1_0, grammarAccess.getVariableDeclarationAccess().getNonvolatileNonvolatileKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "nonvolatile", lv_nonvolatile_1_0 != null, "nonvolatile");
					}
				)
			)
			    |
			(
				(
					lv_shared_2_0='shared'
					{
						newLeafNode(lv_shared_2_0, grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "shared", lv_shared_2_0 != null, "shared");
					}
				)
			)
			    |
			(
				(
					lv_constant_3_0='constant'
					{
						newLeafNode(lv_constant_3_0, grammarAccess.getVariableDeclarationAccess().getConstantConstantKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "constant", lv_constant_3_0 != null, "constant");
					}
				)
			)
			    |
			(
				(
					lv_spread_4_0='spread'
					{
						newLeafNode(lv_spread_4_0, grammarAccess.getVariableDeclarationAccess().getSpreadSpreadKeyword_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "spread", lv_spread_4_0 != null, "spread");
					}
				)
			)
			    |
			(
				(
					lv_final_5_0='final'
					{
						newLeafNode(lv_final_5_0, grammarAccess.getVariableDeclarationAccess().getFinalFinalKeyword_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "final", lv_final_5_0 != null, "final");
					}
				)
			)
		)?
		(
			(
				(
					lv_assign_6_0=':='
					{
						newLeafNode(lv_assign_6_0, grammarAccess.getVariableDeclarationAccess().getAssignColonEqualsSignKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						setWithLastConsumed($current, "assign", lv_assign_6_0 != null, ":=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_2_1_0());
					}
					lv_expression_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_7_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getAssertionAssertionParserRuleCall_3_0());
				}
				lv_assertion_8_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"assertion",
						lv_assertion_8_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleFunctionParameters
entryRuleFunctionParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionParametersRule()); }
	iv_ruleFunctionParameters=ruleFunctionParameters
	{ $current=$iv_ruleFunctionParameters.current; }
	EOF;

// Rule FunctionParameters
ruleFunctionParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionParametersAccess().getParametersFormalExpressionPairParserRuleCall_0_0());
				}
				lv_parameters_0_0=ruleFormalExpressionPair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_0_0,
						"com.multitude.aadl.bless.BLESS.FormalExpressionPair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_comma_1_0=','
					{
						newLeafNode(lv_comma_1_0, grammarAccess.getFunctionParametersAccess().getCommaCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionParametersRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_1_0 != null, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionParametersAccess().getParametersFormalExpressionPairParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=ruleFormalExpressionPair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"com.multitude.aadl.bless.BLESS.FormalExpressionPair");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionParametersAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionParametersAccess().getParametersFormalExpressionPairParserRuleCall_1_2_1_0());
						}
						lv_parameters_4_0=ruleFormalExpressionPair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionParametersRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"com.multitude.aadl.bless.BLESS.FormalExpressionPair");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleFormalExpressionPair
entryRuleFormalExpressionPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalExpressionPairRule()); }
	iv_ruleFormalExpressionPair=ruleFormalExpressionPair
	{ $current=$iv_ruleFormalExpressionPair.current; }
	EOF;

// Rule FormalExpressionPair
ruleFormalExpressionPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_formal_0_0=RULE_ID
				{
					newLeafNode(lv_formal_0_0, grammarAccess.getFormalExpressionPairAccess().getFormalIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormalExpressionPairRule());
					}
					setWithLastConsumed(
						$current,
						"formal",
						lv_formal_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFormalExpressionPairAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalExpressionPairAccess().getActualExpressionParserRuleCall_2_0());
				}
				lv_actual_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalExpressionPairRule());
					}
					set(
						$current,
						"actual",
						lv_actual_2_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBehaviorActions
entryRuleBehaviorActions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorActionsRule()); }
	iv_ruleBehaviorActions=ruleBehaviorActions
	{ $current=$iv_ruleBehaviorActions.current; }
	EOF;

// Rule BehaviorActions
ruleBehaviorActions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorActionsAccess().getActionAssertedActionParserRuleCall_0_0());
				}
				lv_action_0_0=ruleAssertedAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorActionsRule());
					}
					add(
						$current,
						"action",
						lv_action_0_0,
						"com.multitude.aadl.bless.BLESS.AssertedAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_semi_1_0=';'
						{
							newLeafNode(lv_semi_1_0, grammarAccess.getBehaviorActionsAccess().getSemiSemicolonKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorActionsRule());
							}
							setWithLastConsumed($current, "semi", lv_semi_1_0 != null, ";");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBehaviorActionsAccess().getActionAssertedActionParserRuleCall_1_0_1_0());
						}
						lv_action_2_0=ruleAssertedAction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBehaviorActionsRule());
							}
							add(
								$current,
								"action",
								lv_action_2_0,
								"com.multitude.aadl.bless.BLESS.AssertedAction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=';'
					{
						newLeafNode(otherlv_3, grammarAccess.getBehaviorActionsAccess().getSemicolonKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getBehaviorActionsAccess().getActionAssertedActionParserRuleCall_1_0_2_1_0());
							}
							lv_action_4_0=ruleAssertedAction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getBehaviorActionsRule());
								}
								add(
									$current,
									"action",
									lv_action_4_0,
									"com.multitude.aadl.bless.BLESS.AssertedAction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						lv_amp_5_0='&'
						{
							newLeafNode(lv_amp_5_0, grammarAccess.getBehaviorActionsAccess().getAmpAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorActionsRule());
							}
							setWithLastConsumed($current, "amp", lv_amp_5_0 != null, "&");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getBehaviorActionsAccess().getActionAssertedActionParserRuleCall_1_1_1_0());
						}
						lv_action_6_0=ruleAssertedAction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBehaviorActionsRule());
							}
							add(
								$current,
								"action",
								lv_action_6_0,
								"com.multitude.aadl.bless.BLESS.AssertedAction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7='&'
					{
						newLeafNode(otherlv_7, grammarAccess.getBehaviorActionsAccess().getAmpersandKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getBehaviorActionsAccess().getActionAssertedActionParserRuleCall_1_1_2_1_0());
							}
							lv_action_8_0=ruleAssertedAction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getBehaviorActionsRule());
								}
								add(
									$current,
									"action",
									lv_action_8_0,
									"com.multitude.aadl.bless.BLESS.AssertedAction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleAssertedAction
entryRuleAssertedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertedActionRule()); }
	iv_ruleAssertedAction=ruleAssertedAction
	{ $current=$iv_ruleAssertedAction.current; }
	EOF;

// Rule AssertedAction
ruleAssertedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertedActionAccess().getPreconditionAssertionParserRuleCall_0_0());
				}
				lv_precondition_0_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertedActionRule());
					}
					set(
						$current,
						"precondition",
						lv_precondition_0_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertedActionAccess().getActionActionParserRuleCall_1_0());
				}
				lv_action_1_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertedActionRule());
					}
					set(
						$current,
						"action",
						lv_action_1_0,
						"com.multitude.aadl.bless.BLESS.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertedActionAccess().getPostconditionAssertionParserRuleCall_2_0());
				}
				lv_postcondition_2_0=ruleAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertedActionRule());
					}
					set(
						$current,
						"postcondition",
						lv_postcondition_2_0,
						"com.multitude.aadl.bless.BLESS.Assertion");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getBasicBasicActionParserRuleCall_0_0());
				}
				lv_basic_0_0=ruleBasicAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"basic",
						lv_basic_0_0,
						"com.multitude.aadl.bless.BLESS.BasicAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getIf_fiAlternativeParserRuleCall_1_0());
				}
				lv_if_fi_1_0=ruleAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"if_fi",
						lv_if_fi_1_0,
						"com.multitude.aadl.bless.BLESS.Alternative");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getWlWhileLoopParserRuleCall_2_0());
				}
				lv_wl_2_0=ruleWhileLoop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"wl",
						lv_wl_2_0,
						"com.multitude.aadl.bless.BLESS.WhileLoop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getFlForLoopParserRuleCall_3_0());
				}
				lv_fl_3_0=ruleForLoop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"fl",
						lv_fl_3_0,
						"com.multitude.aadl.bless.BLESS.ForLoop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getDuDoUntilLoopParserRuleCall_4_0());
				}
				lv_du_4_0=ruleDoUntilLoop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"du",
						lv_du_4_0,
						"com.multitude.aadl.bless.BLESS.DoUntilLoop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getElqExistentialLatticeQuantificationParserRuleCall_5_0());
				}
				lv_elq_5_0=ruleExistentialLatticeQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"elq",
						lv_elq_5_0,
						"com.multitude.aadl.bless.BLESS.ExistentialLatticeQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getUlqUniversalLatticeQuantificationParserRuleCall_6_0());
				}
				lv_ulq_6_0=ruleUniversalLatticeQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"ulq",
						lv_ulq_6_0,
						"com.multitude.aadl.bless.BLESS.UniversalLatticeQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getLaLockingActionParserRuleCall_7_0());
				}
				lv_la_7_0=ruleLockingAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"la",
						lv_la_7_0,
						"com.multitude.aadl.bless.BLESS.LockingAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBasicAction
entryRuleBasicAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicActionRule()); }
	iv_ruleBasicAction=ruleBasicAction
	{ $current=$iv_ruleBasicAction.current; }
	EOF;

// Rule BasicAction
ruleBasicAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_skip_0_0='skip'
				{
					newLeafNode(lv_skip_0_0, grammarAccess.getBasicActionAccess().getSkipSkipKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicActionRule());
					}
					setWithLastConsumed($current, "skip", lv_skip_0_0, "skip");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getAssignAssignmentParserRuleCall_1_0());
				}
				lv_assign_1_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"assign",
						lv_assign_1_0,
						"com.multitude.aadl.bless.BLESS.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='setmode'
			{
				newLeafNode(otherlv_2, grammarAccess.getBasicActionAccess().getSetmodeKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBasicActionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getBasicActionAccess().getModeModeCrossReference_2_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getWhenWhenThrowParserRuleCall_3_0());
				}
				lv_when_4_0=ruleWhenThrow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"when",
						lv_when_4_0,
						"com.multitude.aadl.bless.BLESS.WhenThrow");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getCombCombinableOperationParserRuleCall_4_0());
				}
				lv_comb_5_0=ruleCombinableOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"comb",
						lv_comb_5_0,
						"com.multitude.aadl.bless.BLESS.CombinableOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getCommunicationCommunicationActionParserRuleCall_5_0());
				}
				lv_communication_6_0=ruleCommunicationAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"communication",
						lv_communication_6_0,
						"com.multitude.aadl.bless.BLESS.CommunicationAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getComputationComputationParserRuleCall_6_0());
				}
				lv_computation_7_0=ruleComputation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"computation",
						lv_computation_7_0,
						"com.multitude.aadl.bless.BLESS.Computation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getMulti_assignSimultaneousAssignmentParserRuleCall_7_0());
				}
				lv_multi_assign_8_0=ruleSimultaneousAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"multi_assign",
						lv_multi_assign_8_0,
						"com.multitude.aadl.bless.BLESS.SimultaneousAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicActionAccess().getExcIssueExceptionParserRuleCall_8_0());
				}
				lv_exc_9_0=ruleIssueException
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicActionRule());
					}
					set(
						$current,
						"exc",
						lv_exc_9_0,
						"com.multitude.aadl.bless.BLESS.IssueException");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCombinableOperation
entryRuleCombinableOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCombinableOperationRule()); }
	iv_ruleCombinableOperation=ruleCombinableOperation
	{ $current=$iv_ruleCombinableOperation.current; }
	EOF;

// Rule CombinableOperation
ruleCombinableOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_f_add_0_0='fetchadd'
					{
						newLeafNode(lv_f_add_0_0, grammarAccess.getCombinableOperationAccess().getF_addFetchaddKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
						setWithLastConsumed($current, "f_add", lv_f_add_0_0 != null, "fetchadd");
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCombinableOperationAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getCombinableOperationAccess().getTargetVariableCrossReference_0_2_0());
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getCombinableOperationAccess().getCommaKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCombinableOperationAccess().getArithmeticExpressionParserRuleCall_0_4_0());
					}
					lv_arithmetic_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCombinableOperationRule());
						}
						set(
							$current,
							"arithmetic",
							lv_arithmetic_4_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getCombinableOperationAccess().getCommaKeyword_0_5());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getCombinableOperationAccess().getResultVariableCrossReference_0_6_0());
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getCombinableOperationAccess().getRightParenthesisKeyword_0_7());
			}
		)
		    |
		(
			(
				(
					(
						lv_f_or_8_0='fetchor'
						{
							newLeafNode(lv_f_or_8_0, grammarAccess.getCombinableOperationAccess().getF_orFetchorKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCombinableOperationRule());
							}
							setWithLastConsumed($current, "f_or", lv_f_or_8_0 != null, "fetchor");
						}
					)
				)
				    |
				(
					(
						lv_f_and_9_0='fetchand'
						{
							newLeafNode(lv_f_and_9_0, grammarAccess.getCombinableOperationAccess().getF_andFetchandKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCombinableOperationRule());
							}
							setWithLastConsumed($current, "f_and", lv_f_and_9_0 != null, "fetchand");
						}
					)
				)
				    |
				(
					(
						lv_f_xor_10_0='fetchxor'
						{
							newLeafNode(lv_f_xor_10_0, grammarAccess.getCombinableOperationAccess().getF_xorFetchxorKeyword_1_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCombinableOperationRule());
							}
							setWithLastConsumed($current, "f_xor", lv_f_xor_10_0 != null, "fetchxor");
						}
					)
				)
			)
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getCombinableOperationAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getCombinableOperationAccess().getTargetVariableCrossReference_1_2_0());
					}
				)
			)
			otherlv_13=','
			{
				newLeafNode(otherlv_13, grammarAccess.getCombinableOperationAccess().getCommaKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCombinableOperationAccess().getBoolExpressionParserRuleCall_1_4_0());
					}
					lv_bool_14_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCombinableOperationRule());
						}
						set(
							$current,
							"bool",
							lv_bool_14_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getCombinableOperationAccess().getCommaKeyword_1_5_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCombinableOperationRule());
							}
						}
						otherlv_16=RULE_ID
						{
							newLeafNode(otherlv_16, grammarAccess.getCombinableOperationAccess().getResultVariableCrossReference_1_5_1_0());
						}
					)
				)
			)?
			otherlv_17=')'
			{
				newLeafNode(otherlv_17, grammarAccess.getCombinableOperationAccess().getRightParenthesisKeyword_1_6());
			}
		)
		    |
		(
			(
				(
					lv_sw_18_0='swap'
					{
						newLeafNode(lv_sw_18_0, grammarAccess.getCombinableOperationAccess().getSwSwapKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
						setWithLastConsumed($current, "sw", lv_sw_18_0 != null, "swap");
					}
				)
			)
			otherlv_19='('
			{
				newLeafNode(otherlv_19, grammarAccess.getCombinableOperationAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_20=RULE_ID
					{
						newLeafNode(otherlv_20, grammarAccess.getCombinableOperationAccess().getTargetVariableCrossReference_2_2_0());
					}
				)
			)
			otherlv_21=','
			{
				newLeafNode(otherlv_21, grammarAccess.getCombinableOperationAccess().getCommaKeyword_2_3());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_22=RULE_ID
					{
						newLeafNode(otherlv_22, grammarAccess.getCombinableOperationAccess().getReferenceVariableCrossReference_2_4_0());
					}
				)
			)
			otherlv_23=','
			{
				newLeafNode(otherlv_23, grammarAccess.getCombinableOperationAccess().getCommaKeyword_2_5());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCombinableOperationRule());
						}
					}
					otherlv_24=RULE_ID
					{
						newLeafNode(otherlv_24, grammarAccess.getCombinableOperationAccess().getResultVariableCrossReference_2_6_0());
					}
				)
			)
			otherlv_25=')'
			{
				newLeafNode(otherlv_25, grammarAccess.getCombinableOperationAccess().getRightParenthesisKeyword_2_7());
			}
		)
	)
;

// Entry rule entryRuleCommunicationAction
entryRuleCommunicationAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommunicationActionRule()); }
	iv_ruleCommunicationAction=ruleCommunicationAction
	{ $current=$iv_ruleCommunicationAction.current; }
	EOF;

// Rule CommunicationAction
ruleCommunicationAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationActionAccess().getPcSubprogramCallParserRuleCall_0_0());
				}
				lv_pc_0_0=ruleSubprogramCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
					}
					set(
						$current,
						"pc",
						lv_pc_0_0,
						"com.multitude.aadl.bless.BLESS.SubprogramCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationActionAccess().getPoPortOutputParserRuleCall_1_0());
				}
				lv_po_1_0=rulePortOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
					}
					set(
						$current,
						"po",
						lv_po_1_0,
						"com.multitude.aadl.bless.BLESS.PortOutput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationActionAccess().getPiPortInputParserRuleCall_2_0());
				}
				lv_pi_2_0=rulePortInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
					}
					set(
						$current,
						"pi",
						lv_pi_2_0,
						"com.multitude.aadl.bless.BLESS.PortInput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationActionAccess().getFpFreezePortParserRuleCall_3_0());
				}
				lv_fp_3_0=ruleFreezePort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
					}
					set(
						$current,
						"fp",
						lv_fp_3_0,
						"com.multitude.aadl.bless.BLESS.FreezePort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getCommunicationActionAccess().getPausePauseParserRuleCall_4_0());
				}
				lv_pause_4_0=rulePause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
					}
					set(
						$current,
						"pause",
						lv_pause_4_0,
						"com.multitude.aadl.bless.BLESS.Pause");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSubprogramCall
entryRuleSubprogramCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramCallRule()); }
	iv_ruleSubprogramCall=ruleSubprogramCall
	{ $current=$iv_ruleSubprogramCall.current; }
	EOF;

// Rule SubprogramCall
ruleSubprogramCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubprogramCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSubprogramCallAccess().getProcedureCalledSubprogramCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSubprogramCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubprogramCallAccess().getParametersFormalActualListParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleFormalActualList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubprogramCallRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"com.multitude.aadl.bless.BLESS.FormalActualList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSubprogramCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFormalActualList
entryRuleFormalActualList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalActualListRule()); }
	iv_ruleFormalActualList=ruleFormalActualList
	{ $current=$iv_ruleFormalActualList.current; }
	EOF;

// Rule FormalActualList
ruleFormalActualList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalActualListAccess().getVariablesFormalActualParserRuleCall_0_0());
				}
				lv_variables_0_0=ruleFormalActual
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalActualListRule());
					}
					add(
						$current,
						"variables",
						lv_variables_0_0,
						"com.multitude.aadl.bless.BLESS.FormalActual");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_comma_1_0=','
					{
						newLeafNode(lv_comma_1_0, grammarAccess.getFormalActualListAccess().getCommaCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormalActualListRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_1_0 != null, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFormalActualListAccess().getVariablesFormalActualParserRuleCall_1_1_0());
					}
					lv_variables_2_0=ruleFormalActual
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormalActualListRule());
						}
						add(
							$current,
							"variables",
							lv_variables_2_0,
							"com.multitude.aadl.bless.BLESS.FormalActual");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFormalActualListAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFormalActualListAccess().getVariablesFormalActualParserRuleCall_1_2_1_0());
						}
						lv_variables_4_0=ruleFormalActual
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFormalActualListRule());
							}
							add(
								$current,
								"variables",
								lv_variables_4_0,
								"com.multitude.aadl.bless.BLESS.FormalActual");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleFormalActual
entryRuleFormalActual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormalActualRule()); }
	iv_ruleFormalActual=ruleFormalActual
	{ $current=$iv_ruleFormalActual.current; }
	EOF;

// Rule FormalActual
ruleFormalActual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormalActualRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getFormalActualAccess().getFormalParameterCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getFormalActualAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFormalActualAccess().getActualSubProgramParameterParserRuleCall_1_0());
				}
				lv_actual_2_0=ruleSubProgramParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormalActualRule());
					}
					set(
						$current,
						"actual",
						lv_actual_2_0,
						"com.multitude.aadl.bless.BLESS.SubProgramParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSubProgramParameter
entryRuleSubProgramParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubProgramParameterRule()); }
	iv_ruleSubProgramParameter=ruleSubProgramParameter
	{ $current=$iv_ruleSubProgramParameter.current; }
	EOF;

// Rule SubProgramParameter
ruleSubProgramParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubProgramParameterAccess().getValueValueNameParserRuleCall_0_0());
				}
				lv_value_0_0=ruleValueName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubProgramParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"com.multitude.aadl.bless.BLESS.ValueName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSubProgramParameterAccess().getConstantConstantParserRuleCall_1_0());
				}
				lv_constant_1_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubProgramParameterRule());
					}
					set(
						$current,
						"constant",
						lv_constant_1_0,
						"com.multitude.aadl.bless.BLESS.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSubProgramParameterAccess().getExpressionParenthesizedSubexpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleParenthesizedSubexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubProgramParameterRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"com.multitude.aadl.bless.BLESS.ParenthesizedSubexpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePortOutput
entryRulePortOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortOutputRule()); }
	iv_rulePortOutput=rulePortOutput
	{ $current=$iv_rulePortOutput.current; }
	EOF;

// Rule PortOutput
rulePortOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortOutputRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPortOutputAccess().getPortPortCrossReference_0_0());
				}
			)
		)
		otherlv_1='!'
		{
			newLeafNode(otherlv_1, grammarAccess.getPortOutputAccess().getExclamationMarkKeyword_1());
		}
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPortOutputAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPortOutputAccess().getEorExpressionParserRuleCall_2_1_0());
					}
					lv_eor_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPortOutputRule());
						}
						set(
							$current,
							"eor",
							lv_eor_3_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPortOutputAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRulePortInput
entryRulePortInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPortInputRule()); }
	iv_rulePortInput=rulePortInput
	{ $current=$iv_rulePortInput.current; }
	EOF;

// Rule PortInput
rulePortInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPortInputRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPortInputAccess().getPortPortCrossReference_0_0());
				}
			)
		)
		otherlv_1='?'
		{
			newLeafNode(otherlv_1, grammarAccess.getPortInputAccess().getQuestionMarkKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getPortInputAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPortInputAccess().getTargetValueNameParserRuleCall_3_0());
				}
				lv_target_3_0=ruleValueName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPortInputRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"com.multitude.aadl.bless.BLESS.ValueName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPortInputAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getLhsNameTickParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleNameTick
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"com.multitude.aadl.bless.BLESS.NameTick");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_asgn_1_0=':='
				{
					newLeafNode(lv_asgn_1_0, grammarAccess.getAssignmentAccess().getAsgnColonEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed($current, "asgn", lv_asgn_1_0, ":=");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getRhsExpressionOrAnyParserRuleCall_2_0());
				}
				lv_rhs_2_0=ruleExpressionOrAny
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_2_0,
						"com.multitude.aadl.bless.BLESS.ExpressionOrAny");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNameTick
entryRuleNameTick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameTickRule()); }
	iv_ruleNameTick=ruleNameTick
	{ $current=$iv_ruleNameTick.current; }
	EOF;

// Rule NameTick
ruleNameTick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNameTickAccess().getValueValueNameParserRuleCall_0_0());
				}
				lv_value_0_0=ruleValueName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameTickRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"com.multitude.aadl.bless.BLESS.ValueName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_tick_1_0='\''
				{
					newLeafNode(lv_tick_1_0, grammarAccess.getNameTickAccess().getTickApostropheKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameTickRule());
					}
					setWithLastConsumed($current, "tick", lv_tick_1_0 != null, "\'");
				}
			)
		)?
	)
;

// Entry rule entryRuleExpressionOrAny
entryRuleExpressionOrAny returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionOrAnyRule()); }
	iv_ruleExpressionOrAny=ruleExpressionOrAny
	{ $current=$iv_ruleExpressionOrAny.current; }
	EOF;

// Rule ExpressionOrAny
ruleExpressionOrAny returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionOrAnyAccess().getExpExpressionParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionOrAnyRule());
					}
					set(
						$current,
						"exp",
						lv_exp_0_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionOrAnyAccess().getAnyAnyParserRuleCall_1_0());
				}
				lv_any_1_0=ruleAny
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionOrAnyRule());
					}
					set(
						$current,
						"any",
						lv_any_1_0,
						"com.multitude.aadl.bless.BLESS.Any");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAny
entryRuleAny returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyRule()); }
	iv_ruleAny=ruleAny
	{ $current=$iv_ruleAny.current.getText(); }
	EOF;

// Rule Any
ruleAny returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='any'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAnyAccess().getAnyKeyword());
	}
;

// Entry rule entryRuleSimultaneousAssignment
entryRuleSimultaneousAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimultaneousAssignmentRule()); }
	iv_ruleSimultaneousAssignment=ruleSimultaneousAssignment
	{ $current=$iv_ruleSimultaneousAssignment.current; }
	EOF;

// Rule SimultaneousAssignment
ruleSimultaneousAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getSimultaneousAssignmentAccess().getVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimultaneousAssignmentAccess().getLhsNameTickParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleNameTick
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimultaneousAssignmentRule());
					}
					add(
						$current,
						"lhs",
						lv_lhs_1_0,
						"com.multitude.aadl.bless.BLESS.NameTick");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSimultaneousAssignmentAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimultaneousAssignmentAccess().getLhsNameTickParserRuleCall_2_1_0());
					}
					lv_lhs_3_0=ruleNameTick
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimultaneousAssignmentRule());
						}
						add(
							$current,
							"lhs",
							lv_lhs_3_0,
							"com.multitude.aadl.bless.BLESS.NameTick");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		(
			(
				lv_asgn_4_0=':='
				{
					newLeafNode(lv_asgn_4_0, grammarAccess.getSimultaneousAssignmentAccess().getAsgnColonEqualsSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimultaneousAssignmentRule());
					}
					setWithLastConsumed($current, "asgn", lv_asgn_4_0, ":=");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSimultaneousAssignmentAccess().getRhsExpressionOrAnyParserRuleCall_4_0());
				}
				lv_rhs_5_0=ruleExpressionOrAny
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimultaneousAssignmentRule());
					}
					add(
						$current,
						"rhs",
						lv_rhs_5_0,
						"com.multitude.aadl.bless.BLESS.ExpressionOrAny");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getSimultaneousAssignmentAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimultaneousAssignmentAccess().getRhsExpressionOrAnyParserRuleCall_5_1_0());
					}
					lv_rhs_7_0=ruleExpressionOrAny
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimultaneousAssignmentRule());
						}
						add(
							$current,
							"rhs",
							lv_rhs_7_0,
							"com.multitude.aadl.bless.BLESS.ExpressionOrAny");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_8='|'
		{
			newLeafNode(otherlv_8, grammarAccess.getSimultaneousAssignmentAccess().getVerticalLineKeyword_6());
		}
	)
;

// Entry rule entryRuleAlternative
entryRuleAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlternativeRule()); }
	iv_ruleAlternative=ruleAlternative
	{ $current=$iv_ruleAlternative.current; }
	EOF;

// Rule Alternative
ruleAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlternativeAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAlternativeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlternativeAccess().getGuardBooleanExpressionParserRuleCall_2_0());
				}
				lv_guard_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlternativeRule());
					}
					set(
						$current,
						"guard",
						lv_guard_2_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlternativeAccess().getBlessaltBLESSAlternativeParserRuleCall_3_0_0());
					}
					lv_blessalt_3_0=ruleBLESSAlternative
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlternativeRule());
						}
						set(
							$current,
							"blessalt",
							lv_blessalt_3_0,
							"com.multitude.aadl.bless.BLESS.BLESSAlternative");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAlternativeAccess().getBaaltBAAlternativeParserRuleCall_3_1_0());
					}
					lv_baalt_4_0=ruleBAAlternative
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlternativeRule());
						}
						set(
							$current,
							"baalt",
							lv_baalt_4_0,
							"com.multitude.aadl.bless.BLESS.BAAlternative");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBLESSAlternative
entryRuleBLESSAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBLESSAlternativeRule()); }
	iv_ruleBLESSAlternative=ruleBLESSAlternative
	{ $current=$iv_ruleBLESSAlternative.current; }
	EOF;

// Rule BLESSAlternative
ruleBLESSAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=')~>'
		{
			newLeafNode(otherlv_0, grammarAccess.getBLESSAlternativeAccess().getRightParenthesisTildeGreaterThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBLESSAlternativeAccess().getActionAssertedActionParserRuleCall_1_0());
				}
				lv_action_1_0=ruleAssertedAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBLESSAlternativeRule());
					}
					set(
						$current,
						"action",
						lv_action_1_0,
						"com.multitude.aadl.bless.BLESS.AssertedAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='[]'
			{
				newLeafNode(otherlv_2, grammarAccess.getBLESSAlternativeAccess().getLeftSquareBracketRightSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBLESSAlternativeAccess().getAlternativeGuardedActionParserRuleCall_2_1_0());
					}
					lv_alternative_3_0=ruleGuardedAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBLESSAlternativeRule());
						}
						add(
							$current,
							"alternative",
							lv_alternative_3_0,
							"com.multitude.aadl.bless.BLESS.GuardedAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4='fi'
		{
			newLeafNode(otherlv_4, grammarAccess.getBLESSAlternativeAccess().getFiKeyword_3());
		}
	)
;

// Entry rule entryRuleGuardedAction
entryRuleGuardedAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardedActionRule()); }
	iv_ruleGuardedAction=ruleGuardedAction
	{ $current=$iv_ruleGuardedAction.current; }
	EOF;

// Rule GuardedAction
ruleGuardedAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getGuardedActionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardedActionAccess().getGuardBooleanExpressionParserRuleCall_1_0());
				}
				lv_guard_1_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardedActionRule());
					}
					set(
						$current,
						"guard",
						lv_guard_1_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')~>'
		{
			newLeafNode(otherlv_2, grammarAccess.getGuardedActionAccess().getRightParenthesisTildeGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardedActionAccess().getActionAssertedActionParserRuleCall_3_0());
				}
				lv_action_3_0=ruleAssertedAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardedActionRule());
					}
					set(
						$current,
						"action",
						lv_action_3_0,
						"com.multitude.aadl.bless.BLESS.AssertedAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getTestBooleanExpressionParserRuleCall_2_0());
				}
				lv_test_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"test",
						lv_test_2_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				(
					lv_invariant_4_0='invariant'
					{
						newLeafNode(lv_invariant_4_0, grammarAccess.getWhileLoopAccess().getInvariantInvariantKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWhileLoopRule());
						}
						setWithLastConsumed($current, "invariant", lv_invariant_4_0 != null, "invariant");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getWhileLoopAccess().getInvNamelessAssertionParserRuleCall_4_1_0());
					}
					lv_inv_5_0=ruleNamelessAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
						}
						set(
							$current,
							"inv",
							lv_inv_5_0,
							"com.multitude.aadl.bless.BLESS.NamelessAssertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					lv_bound_6_0='bound'
					{
						newLeafNode(lv_bound_6_0, grammarAccess.getWhileLoopAccess().getBoundBoundKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWhileLoopRule());
						}
						setWithLastConsumed($current, "bound", lv_bound_6_0 != null, "bound");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getWhileLoopAccess().getBound_functionExpressionParserRuleCall_5_1_0());
					}
					lv_bound_function_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
						}
						set(
							$current,
							"bound_function",
							lv_bound_function_7_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getElqExistentialLatticeQuantificationParserRuleCall_6_0());
				}
				lv_elq_8_0=ruleExistentialLatticeQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"elq",
						lv_elq_8_0,
						"com.multitude.aadl.bless.BLESS.ExistentialLatticeQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getCountForallVariableParserRuleCall_1_0());
				}
				lv_count_1_0=ruleForallVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"count",
						lv_count_1_0,
						"com.multitude.aadl.bless.BLESS.ForallVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getLower_boundExpressionParserRuleCall_3_0());
				}
				lv_lower_bound_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"lower_bound",
						lv_lower_bound_3_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_DOTDOT_4=RULE_DOTDOT
		{
			newLeafNode(this_DOTDOT_4, grammarAccess.getForLoopAccess().getDOTDOTTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getUpper_boundExpressionParserRuleCall_5_0());
				}
				lv_upper_bound_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"upper_bound",
						lv_upper_bound_5_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_invariant_6_0='invariant'
					{
						newLeafNode(lv_invariant_6_0, grammarAccess.getForLoopAccess().getInvariantInvariantKeyword_6_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForLoopRule());
						}
						setWithLastConsumed($current, "invariant", lv_invariant_6_0 != null, "invariant");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getForLoopAccess().getInvNamelessAssertionParserRuleCall_6_1_0());
					}
					lv_inv_7_0=ruleNamelessAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForLoopRule());
						}
						set(
							$current,
							"inv",
							lv_inv_7_0,
							"com.multitude.aadl.bless.BLESS.NamelessAssertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getActionBehaviorActionsParserRuleCall_8_0());
				}
				lv_action_9_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"action",
						lv_action_9_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleDoUntilLoop
entryRuleDoUntilLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoUntilLoopRule()); }
	iv_ruleDoUntilLoop=ruleDoUntilLoop
	{ $current=$iv_ruleDoUntilLoop.current; }
	EOF;

// Rule DoUntilLoop
ruleDoUntilLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='do'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoUntilLoopAccess().getDoKeyword_0());
		}
		(
			(
				(
					lv_invariant_1_0='invariant'
					{
						newLeafNode(lv_invariant_1_0, grammarAccess.getDoUntilLoopAccess().getInvariantInvariantKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDoUntilLoopRule());
						}
						setWithLastConsumed($current, "invariant", lv_invariant_1_0 != null, "invariant");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDoUntilLoopAccess().getInvNamelessAssertionParserRuleCall_1_1_0());
					}
					lv_inv_2_0=ruleNamelessAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDoUntilLoopRule());
						}
						set(
							$current,
							"inv",
							lv_inv_2_0,
							"com.multitude.aadl.bless.BLESS.NamelessAssertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					lv_bound_3_0='bound'
					{
						newLeafNode(lv_bound_3_0, grammarAccess.getDoUntilLoopAccess().getBoundBoundKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDoUntilLoopRule());
						}
						setWithLastConsumed($current, "bound", lv_bound_3_0 != null, "bound");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDoUntilLoopAccess().getBndExpressionParserRuleCall_2_1_0());
					}
					lv_bnd_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDoUntilLoopRule());
						}
						set(
							$current,
							"bnd",
							lv_bnd_4_0,
							"com.multitude.aadl.bless.BLESS.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDoUntilLoopAccess().getActionsBehaviorActionsParserRuleCall_3_0());
				}
				lv_actions_5_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoUntilLoopRule());
					}
					set(
						$current,
						"actions",
						lv_actions_5_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='until'
		{
			newLeafNode(otherlv_6, grammarAccess.getDoUntilLoopAccess().getUntilKeyword_4());
		}
		otherlv_7='('
		{
			newLeafNode(otherlv_7, grammarAccess.getDoUntilLoopAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoUntilLoopAccess().getGuardBooleanExpressionParserRuleCall_6_0());
				}
				lv_guard_8_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoUntilLoopRule());
					}
					set(
						$current,
						"guard",
						lv_guard_8_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getDoUntilLoopAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleThrowsClause
entryRuleThrowsClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThrowsClauseRule()); }
	iv_ruleThrowsClause=ruleThrowsClause
	{ $current=$iv_ruleThrowsClause.current; }
	EOF;

// Rule ThrowsClause
ruleThrowsClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='throws'
		{
			newLeafNode(otherlv_0, grammarAccess.getThrowsClauseAccess().getThrowsKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getThrowsClauseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getThrowsClauseAccess().getExceptionsExceptionCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleCatchClause
entryRuleCatchClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCatchClauseRule()); }
	iv_ruleCatchClause=ruleCatchClause
	{ $current=$iv_ruleCatchClause.current; }
	EOF;

// Rule CatchClause
ruleCatchClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='catch'
		{
			newLeafNode(otherlv_0, grammarAccess.getCatchClauseAccess().getCatchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCatchClauseAccess().getCatchesCatchClauseTermParserRuleCall_1_0());
				}
				lv_catches_1_0=ruleCatchClauseTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCatchClauseRule());
					}
					add(
						$current,
						"catches",
						lv_catches_1_0,
						"com.multitude.aadl.bless.BLESS.CatchClauseTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleCatchClauseTerm
entryRuleCatchClauseTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCatchClauseTermRule()); }
	iv_ruleCatchClauseTerm=ruleCatchClauseTerm
	{ $current=$iv_ruleCatchClauseTerm.current; }
	EOF;

// Rule CatchClauseTerm
ruleCatchClauseTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCatchClauseTermAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCatchClauseTermRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getCatchClauseTermAccess().getExceptionsExceptionCrossReference_1_0_0());
					}
				)
			)+
			    |
			(
				(
					lv_all_2_0='all'
					{
						newLeafNode(lv_all_2_0, grammarAccess.getCatchClauseTermAccess().getAllAllKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCatchClauseTermRule());
						}
						setWithLastConsumed($current, "all", lv_all_2_0 != null, "all");
					}
				)
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getCatchClauseTermAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCatchClauseTermAccess().getActionBasicActionParserRuleCall_3_0());
				}
				lv_action_4_0=ruleBasicAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCatchClauseTermRule());
					}
					set(
						$current,
						"action",
						lv_action_4_0,
						"com.multitude.aadl.bless.BLESS.BasicAction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCatchClauseTermAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleWhenThrow
entryRuleWhenThrow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhenThrowRule()); }
	iv_ruleWhenThrow=ruleWhenThrow
	{ $current=$iv_ruleWhenThrow.current; }
	EOF;

// Rule WhenThrow
ruleWhenThrow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='when'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhenThrowAccess().getWhenKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhenThrowAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhenThrowAccess().getExpExpressionParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhenThrowRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhenThrowAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='throw'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhenThrowAccess().getThrowKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhenThrowRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getWhenThrowAccess().getExceptionExceptionCrossReference_5_0());
				}
			)
		)
		(
			(
				lv_message_6_0=RULE_STRING
				{
					newLeafNode(lv_message_6_0, grammarAccess.getWhenThrowAccess().getMessageSTRINGTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWhenThrowRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_6_0,
						"com.multitude.aadl.bless.BLESS.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleComputation
entryRuleComputation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComputationRule()); }
	iv_ruleComputation=ruleComputation
	{ $current=$iv_ruleComputation.current; }
	EOF;

// Rule Computation
ruleComputation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='computation'
		{
			newLeafNode(otherlv_0, grammarAccess.getComputationAccess().getComputationKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getComputationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComputationAccess().getLbBehaviorTimeParserRuleCall_2_0());
				}
				lv_lb_2_0=ruleBehaviorTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComputationRule());
					}
					set(
						$current,
						"lb",
						lv_lb_2_0,
						"com.multitude.aadl.bless.BLESS.BehaviorTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getComputationAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComputationAccess().getUbBehaviorTimeParserRuleCall_3_1_0());
					}
					lv_ub_4_0=ruleBehaviorTime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComputationRule());
						}
						set(
							$current,
							"ub",
							lv_ub_4_0,
							"com.multitude.aadl.bless.BLESS.BehaviorTime");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getComputationAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_6='in'
			{
				newLeafNode(otherlv_6, grammarAccess.getComputationAccess().getInKeyword_5_0());
			}
			otherlv_7='binding'
			{
				newLeafNode(otherlv_7, grammarAccess.getComputationAccess().getBindingKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComputationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getComputationAccess().getComponentComponentClassifierCrossReference_5_2_0());
					}
					ruleQCREF
					{
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleBAAlternative
entryRuleBAAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBAAlternativeRule()); }
	iv_ruleBAAlternative=ruleBAAlternative
	{ $current=$iv_ruleBAAlternative.current; }
	EOF;

// Rule BAAlternative
ruleBAAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=')'
		{
			newLeafNode(otherlv_0, grammarAccess.getBAAlternativeAccess().getRightParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBAAlternativeAccess().getActionsBehaviorActionsParserRuleCall_1_0());
				}
				lv_actions_1_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBAAlternativeRule());
					}
					set(
						$current,
						"actions",
						lv_actions_1_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBAAlternativeAccess().getElseifaltElseifAlternativeParserRuleCall_2_0());
				}
				lv_elseifalt_2_0=ruleElseifAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBAAlternativeRule());
					}
					add(
						$current,
						"elseifalt",
						lv_elseifalt_2_0,
						"com.multitude.aadl.bless.BLESS.ElseifAlternative");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getBAAlternativeAccess().getElsealtElseAlternativeParserRuleCall_3_0());
				}
				lv_elsealt_3_0=ruleElseAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBAAlternativeRule());
					}
					set(
						$current,
						"elsealt",
						lv_elsealt_3_0,
						"com.multitude.aadl.bless.BLESS.ElseAlternative");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getBAAlternativeAccess().getEndKeyword_4());
		}
		otherlv_5='if'
		{
			newLeafNode(otherlv_5, grammarAccess.getBAAlternativeAccess().getIfKeyword_5());
		}
	)
;

// Entry rule entryRuleElseifAlternative
entryRuleElseifAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseifAlternativeRule()); }
	iv_ruleElseifAlternative=ruleElseifAlternative
	{ $current=$iv_ruleElseifAlternative.current; }
	EOF;

// Rule ElseifAlternative
ruleElseifAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elsif'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseifAlternativeAccess().getElsifKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getElseifAlternativeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseifAlternativeAccess().getTestBooleanExpressionParserRuleCall_2_0());
				}
				lv_test_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseifAlternativeRule());
					}
					set(
						$current,
						"test",
						lv_test_2_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getElseifAlternativeAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseifAlternativeAccess().getActionsBehaviorActionsParserRuleCall_4_0());
				}
				lv_actions_4_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseifAlternativeRule());
					}
					set(
						$current,
						"actions",
						lv_actions_4_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElseAlternative
entryRuleElseAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseAlternativeRule()); }
	iv_ruleElseAlternative=ruleElseAlternative
	{ $current=$iv_ruleElseAlternative.current; }
	EOF;

// Rule ElseAlternative
ruleElseAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='else'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseAlternativeAccess().getElseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseAlternativeAccess().getActionsBehaviorActionsParserRuleCall_1_0());
				}
				lv_actions_1_0=ruleBehaviorActions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseAlternativeRule());
					}
					set(
						$current,
						"actions",
						lv_actions_1_0,
						"com.multitude.aadl.bless.BLESS.BehaviorActions");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIssueException
entryRuleIssueException returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIssueExceptionRule()); }
	iv_ruleIssueException=ruleIssueException
	{ $current=$iv_ruleIssueException.current; }
	EOF;

// Rule IssueException
ruleIssueException returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exception'
		{
			newLeafNode(otherlv_0, grammarAccess.getIssueExceptionAccess().getExceptionKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIssueExceptionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIssueExceptionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getIssueExceptionAccess().getExceptionExceptionCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getIssueExceptionAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIssueExceptionRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"com.multitude.aadl.bless.BLESS.STRING");
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIssueExceptionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLockingAction
entryRuleLockingAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLockingActionRule()); }
	iv_ruleLockingAction=ruleLockingAction
	{ $current=$iv_ruleLockingAction.current; }
	EOF;

// Rule LockingAction
ruleLockingAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_entercritical_0_0='*!<'
				{
					newLeafNode(lv_entercritical_0_0, grammarAccess.getLockingActionAccess().getEntercriticalAsteriskExclamationMarkLessThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLockingActionRule());
					}
					setWithLastConsumed($current, "entercritical", lv_entercritical_0_0, "*!<");
				}
			)
		)
		    |
		(
			(
				lv_leavecritical_1_0='*!>'
				{
					newLeafNode(lv_leavecritical_1_0, grammarAccess.getLockingActionAccess().getLeavecriticalAsteriskExclamationMarkGreaterThanSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLockingActionRule());
					}
					setWithLastConsumed($current, "leavecritical", lv_leavecritical_1_0, "*!>");
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLockingActionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getLockingActionAccess().getRequired_data_accessDataAccessCrossReference_2_0_0());
					}
				)
			)
			(
				(
					lv_lock_3_0='!<'
					{
						newLeafNode(lv_lock_3_0, grammarAccess.getLockingActionAccess().getLockExclamationMarkLessThanSignKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLockingActionRule());
						}
						setWithLastConsumed($current, "lock", lv_lock_3_0, "!<");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLockingActionRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getLockingActionAccess().getRequired_data_accessDataAccessCrossReference_3_0_0());
					}
				)
			)
			(
				(
					lv_unlock_5_0='!>'
					{
						newLeafNode(lv_unlock_5_0, grammarAccess.getLockingActionAccess().getUnlockExclamationMarkGreaterThanSignKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLockingActionRule());
						}
						setWithLastConsumed($current, "unlock", lv_unlock_5_0, "!>");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFreezePort
entryRuleFreezePort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreezePortRule()); }
	iv_ruleFreezePort=ruleFreezePort
	{ $current=$iv_ruleFreezePort.current; }
	EOF;

// Rule FreezePort
ruleFreezePort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='frozen'
		{
			newLeafNode(otherlv_0, grammarAccess.getFreezePortAccess().getFrozenKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFreezePortAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFreezePortRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getFreezePortAccess().getFrozenPortCrossReference_2_0());
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFreezePortAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFreezePortRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getFreezePortAccess().getFrozenPortCrossReference_3_1_0());
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFreezePortAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePause
entryRulePause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPauseRule()); }
	iv_rulePause=rulePause
	{ $current=$iv_rulePause.current; }
	EOF;

// Rule Pause
rulePause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_pause_0_0='pause'
			{
				newLeafNode(lv_pause_0_0, grammarAccess.getPauseAccess().getPausePauseKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPauseRule());
				}
				setWithLastConsumed($current, "pause", lv_pause_0_0, "pause");
			}
		)
	)
;

// Entry rule entryRuleActionTimeout
entryRuleActionTimeout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionTimeoutRule()); }
	iv_ruleActionTimeout=ruleActionTimeout
	{ $current=$iv_ruleActionTimeout.current; }
	EOF;

// Rule ActionTimeout
ruleActionTimeout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='timeout'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionTimeoutAccess().getTimeoutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionTimeoutAccess().getDurationBehaviorTimeParserRuleCall_1_0());
				}
				lv_duration_1_0=ruleBehaviorTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionTimeoutRule());
					}
					set(
						$current,
						"duration",
						lv_duration_1_0,
						"com.multitude.aadl.bless.BLESS.BehaviorTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBehaviorTime
entryRuleBehaviorTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehaviorTimeRule()); }
	iv_ruleBehaviorTime=ruleBehaviorTime
	{ $current=$iv_ruleBehaviorTime.current; }
	EOF;

// Rule BehaviorTime
ruleBehaviorTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBehaviorTimeAccess().getQuantityQuantityParserRuleCall_0_0());
				}
				lv_quantity_0_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehaviorTimeRule());
					}
					set(
						$current,
						"quantity",
						lv_quantity_0_0,
						"com.multitude.aadl.bless.BLESS.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBehaviorTimeAccess().getValueValueNameParserRuleCall_1_0_0());
					}
					lv_value_1_0=ruleValueName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBehaviorTimeRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"com.multitude.aadl.bless.BLESS.ValueName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorTimeRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getBehaviorTimeAccess().getUnitUnitNameCrossReference_1_1_0_0());
						}
					)
				)
				    |
				(
					(
						lv_scalar_3_0='scalar'
						{
							newLeafNode(lv_scalar_3_0, grammarAccess.getBehaviorTimeAccess().getScalarScalarKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorTimeRule());
							}
							setWithLastConsumed($current, "scalar", lv_scalar_3_0, "scalar");
						}
					)
				)
				    |
				(
					(
						lv_whole_4_0='whole'
						{
							newLeafNode(lv_whole_4_0, grammarAccess.getBehaviorTimeAccess().getWholeWholeKeyword_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBehaviorTimeRule());
							}
							setWithLastConsumed($current, "whole", lv_whole_4_0, "whole");
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleException
entryRuleException returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionRule()); }
	iv_ruleException=ruleException
	{ $current=$iv_ruleException.current; }
	EOF;

// Rule Exception
ruleException returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExceptionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		(
			(
				lv_description_1_0=RULE_STRING
				{
					newLeafNode(lv_description_1_0, grammarAccess.getExceptionAccess().getDescriptionSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_1_0,
						"com.multitude.aadl.bless.BLESS.STRING");
				}
			)
		)
		(
			(
				lv_code_2_0=RULE_NUMBER
				{
					newLeafNode(lv_code_2_0, grammarAccess.getExceptionAccess().getCodeNUMBERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionRule());
					}
					setWithLastConsumed(
						$current,
						"code",
						lv_code_2_0,
						"com.multitude.aadl.bless.BLESS.NUMBER");
				}
			)
		)?
	)
;

// Entry rule entryRuleGhostVariables
entryRuleGhostVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGhostVariablesRule()); }
	iv_ruleGhostVariables=ruleGhostVariables
	{ $current=$iv_ruleGhostVariables.current; }
	EOF;

// Rule GhostVariables
ruleGhostVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ghost'
		{
			newLeafNode(otherlv_0, grammarAccess.getGhostVariablesAccess().getGhostKeyword_0());
		}
		otherlv_1='variables'
		{
			newLeafNode(otherlv_1, grammarAccess.getGhostVariablesAccess().getVariablesKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGhostVariablesAccess().getGvGhostVariableParserRuleCall_2_0());
				}
				lv_gv_2_0=ruleGhostVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGhostVariablesRule());
					}
					add(
						$current,
						"gv",
						lv_gv_2_0,
						"com.multitude.aadl.bless.BLESS.GhostVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleGhostVariable
entryRuleGhostVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGhostVariableRule()); }
	iv_ruleGhostVariable=ruleGhostVariable
	{ $current=$iv_ruleGhostVariable.current; }
	EOF;

// Rule GhostVariable
ruleGhostVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='def'
		{
			newLeafNode(otherlv_0, grammarAccess.getGhostVariableAccess().getDefKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGhostVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGhostVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_2='~'
		{
			newLeafNode(otherlv_2, grammarAccess.getGhostVariableAccess().getTildeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGhostVariableAccess().getTodTypeOrReferenceParserRuleCall_3_0());
				}
				lv_tod_3_0=ruleTypeOrReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGhostVariableRule());
					}
					set(
						$current,
						"tod",
						lv_tod_3_0,
						"com.multitude.aadl.bless.BLESS.TypeOrReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getNamedassertionNamedAssertionParserRuleCall_0_0());
				}
				lv_namedassertion_0_0=ruleNamedAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"namedassertion",
						lv_namedassertion_0_0,
						"com.multitude.aadl.bless.BLESS.NamedAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getNamelessassertionNamelessAssertionParserRuleCall_1_0());
				}
				lv_namelessassertion_1_0=ruleNamelessAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"namelessassertion",
						lv_namelessassertion_1_0,
						"com.multitude.aadl.bless.BLESS.NamelessAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getNamelessfunctionNamelessFunctionParserRuleCall_2_0());
				}
				lv_namelessfunction_2_0=ruleNamelessFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"namelessfunction",
						lv_namelessfunction_2_0,
						"com.multitude.aadl.bless.BLESS.NamelessFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionAccess().getNamelessenumerationNamelessEnumerationParserRuleCall_3_0());
				}
				lv_namelessenumeration_3_0=ruleNamelessEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionRule());
					}
					set(
						$current,
						"namelessenumeration",
						lv_namelessenumeration_3_0,
						"com.multitude.aadl.bless.BLESS.NamelessEnumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNamedAssertion
entryRuleNamedAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedAssertionRule()); }
	iv_ruleNamedAssertion=ruleNamedAssertion
	{ $current=$iv_ruleNamedAssertion.current; }
	EOF;

// Rule NamedAssertion
ruleNamedAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<<'
		{
			newLeafNode(otherlv_0, grammarAccess.getNamedAssertionAccess().getLessThanSignLessThanSignKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNamedAssertionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamedAssertionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getNamedAssertionAccess().getColonKeyword_2());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNamedAssertionAccess().getFormalsVariableListParserRuleCall_3_0_0_0());
						}
						lv_formals_3_0=ruleVariableList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNamedAssertionRule());
							}
							set(
								$current,
								"formals",
								lv_formals_3_0,
								"com.multitude.aadl.bless.BLESS.VariableList");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					(
						(
							(
								lv_pred_4_0=':'
								{
									newLeafNode(lv_pred_4_0, grammarAccess.getNamedAssertionAccess().getPredColonKeyword_3_0_1_0_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNamedAssertionRule());
									}
									setWithLastConsumed($current, "pred", lv_pred_4_0 != null, ":");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNamedAssertionAccess().getPredicatePredicateParserRuleCall_3_0_1_0_1_0());
								}
								lv_predicate_5_0=rulePredicate
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNamedAssertionRule());
									}
									set(
										$current,
										"predicate",
										lv_predicate_5_0,
										"com.multitude.aadl.bless.BLESS.Predicate");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					    |
					(
						otherlv_6='returns'
						{
							newLeafNode(otherlv_6, grammarAccess.getNamedAssertionAccess().getReturnsKeyword_3_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getNamedAssertionAccess().getTodTypeOrReferenceParserRuleCall_3_0_1_1_1_0());
								}
								lv_tod_7_0=ruleTypeOrReference
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNamedAssertionRule());
									}
									set(
										$current,
										"tod",
										lv_tod_7_0,
										"com.multitude.aadl.bless.BLESS.TypeOrReference");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							(
								lv_func_8_0=':='
								{
									newLeafNode(lv_func_8_0, grammarAccess.getNamedAssertionAccess().getFuncColonEqualsSignKeyword_3_0_1_1_2_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getNamedAssertionRule());
									}
									setWithLastConsumed($current, "func", lv_func_8_0 != null, ":=");
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getNamedAssertionAccess().getFunctionvalueAssertionFunctionValueParserRuleCall_3_0_1_1_3_0());
								}
								lv_functionvalue_9_0=ruleAssertionFunctionValue
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNamedAssertionRule());
									}
									set(
										$current,
										"functionvalue",
										lv_functionvalue_9_0,
										"com.multitude.aadl.bless.BLESS.AssertionFunctionValue");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
			    |
			(
				(
					(
						lv_assertionvariable_10_0=RULE_ID
						{
							newLeafNode(lv_assertionvariable_10_0, grammarAccess.getNamedAssertionAccess().getAssertionvariableIDTerminalRuleCall_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNamedAssertionRule());
							}
							setWithLastConsumed(
								$current,
								"assertionvariable",
								lv_assertionvariable_10_0,
								"com.multitude.aadl.bless.BLESS.ID");
						}
					)
				)
				otherlv_11='~'
				{
					newLeafNode(otherlv_11, grammarAccess.getNamedAssertionAccess().getTildeKeyword_3_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNamedAssertionRule());
							}
						}
						otherlv_12=RULE_ID
						{
							newLeafNode(otherlv_12, grammarAccess.getNamedAssertionAccess().getEnumerationTypeTypeDeclarationCrossReference_3_1_2_0());
						}
					)
				)
				(
					(
						lv_enumer_13_0='+=>'
						{
							newLeafNode(lv_enumer_13_0, grammarAccess.getNamedAssertionAccess().getEnumerPlusSignEqualsSignGreaterThanSignKeyword_3_1_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getNamedAssertionRule());
							}
							setWithLastConsumed($current, "enumer", lv_enumer_13_0 != null, "+=>");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getNamedAssertionAccess().getEnumerationAssertionEnumerationParserRuleCall_3_1_4_0());
						}
						lv_enumeration_14_0=ruleAssertionEnumeration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNamedAssertionRule());
							}
							set(
								$current,
								"enumeration",
								lv_enumeration_14_0,
								"com.multitude.aadl.bless.BLESS.AssertionEnumeration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_15='>>'
		{
			newLeafNode(otherlv_15, grammarAccess.getNamedAssertionAccess().getGreaterThanSignGreaterThanSignKeyword_4());
		}
	)
;

// Entry rule entryRuleNamelessAssertion
entryRuleNamelessAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamelessAssertionRule()); }
	iv_ruleNamelessAssertion=ruleNamelessAssertion
	{ $current=$iv_ruleNamelessAssertion.current; }
	EOF;

// Rule NamelessAssertion
ruleNamelessAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<<'
		{
			newLeafNode(otherlv_0, grammarAccess.getNamelessAssertionAccess().getLessThanSignLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamelessAssertionAccess().getPredicatePredicateParserRuleCall_1_0());
				}
				lv_predicate_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamelessAssertionRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_1_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>>'
		{
			newLeafNode(otherlv_2, grammarAccess.getNamelessAssertionAccess().getGreaterThanSignGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleNamelessFunction
entryRuleNamelessFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamelessFunctionRule()); }
	iv_ruleNamelessFunction=ruleNamelessFunction
	{ $current=$iv_ruleNamelessFunction.current; }
	EOF;

// Rule NamelessFunction
ruleNamelessFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<<'
		{
			newLeafNode(otherlv_0, grammarAccess.getNamelessFunctionAccess().getLessThanSignLessThanSignKeyword_0());
		}
		otherlv_1='returns'
		{
			newLeafNode(otherlv_1, grammarAccess.getNamelessFunctionAccess().getReturnsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamelessFunctionAccess().getTodTypeOrReferenceParserRuleCall_2_0());
				}
				lv_tod_2_0=ruleTypeOrReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamelessFunctionRule());
					}
					set(
						$current,
						"tod",
						lv_tod_2_0,
						"com.multitude.aadl.bless.BLESS.TypeOrReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_func_3_0=':='
				{
					newLeafNode(lv_func_3_0, grammarAccess.getNamelessFunctionAccess().getFuncColonEqualsSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamelessFunctionRule());
					}
					setWithLastConsumed($current, "func", lv_func_3_0 != null, ":=");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNamelessFunctionAccess().getFunctionvalueAssertionFunctionValueParserRuleCall_4_0());
				}
				lv_functionvalue_4_0=ruleAssertionFunctionValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamelessFunctionRule());
					}
					set(
						$current,
						"functionvalue",
						lv_functionvalue_4_0,
						"com.multitude.aadl.bless.BLESS.AssertionFunctionValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='>>'
		{
			newLeafNode(otherlv_5, grammarAccess.getNamelessFunctionAccess().getGreaterThanSignGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleNamelessEnumeration
entryRuleNamelessEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamelessEnumerationRule()); }
	iv_ruleNamelessEnumeration=ruleNamelessEnumeration
	{ $current=$iv_ruleNamelessEnumeration.current; }
	EOF;

// Rule NamelessEnumeration
ruleNamelessEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<<'
		{
			newLeafNode(otherlv_0, grammarAccess.getNamelessEnumerationAccess().getLessThanSignLessThanSignKeyword_0());
		}
		otherlv_1='+=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getNamelessEnumerationAccess().getPlusSignEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNamelessEnumerationAccess().getEnumerationInvocationParserRuleCall_2_0());
				}
				lv_enumeration_2_0=ruleInvocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNamelessEnumerationRule());
					}
					set(
						$current,
						"enumeration",
						lv_enumeration_2_0,
						"com.multitude.aadl.bless.BLESS.Invocation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>>'
		{
			newLeafNode(otherlv_3, grammarAccess.getNamelessEnumerationAccess().getGreaterThanSignGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPredicateAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssertionNumericExpression
entryRuleAssertionNumericExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionNumericExpressionRule()); }
	iv_ruleAssertionNumericExpression=ruleAssertionNumericExpression
	{ $current=$iv_ruleAssertionNumericExpression.current; }
	EOF;

// Rule AssertionNumericExpression
ruleAssertionNumericExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAssertionNumericExpressionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanExpressionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleNumericExpression
entryRuleNumericExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericExpressionRule()); }
	iv_ruleNumericExpression=ruleNumericExpression
	{ $current=$iv_ruleNumericExpression.current; }
	EOF;

// Rule NumericExpression
ruleNumericExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getNumericExpressionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getAllUniversalQuantificationParserRuleCall_0_0());
				}
				lv_all_0_0=ruleUniversalQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"all",
						lv_all_0_0,
						"com.multitude.aadl.bless.BLESS.UniversalQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExistsExistentialQuantificationParserRuleCall_1_0());
				}
				lv_exists_1_0=ruleExistentialQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"exists",
						lv_exists_1_0,
						"com.multitude.aadl.bless.BLESS.ExistentialQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getSumSumQuantificationParserRuleCall_2_0());
				}
				lv_sum_2_0=ruleSumQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"sum",
						lv_sum_2_0,
						"com.multitude.aadl.bless.BLESS.SumQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getProductProductQuantificationParserRuleCall_3_0());
				}
				lv_product_3_0=ruleProductQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"product",
						lv_product_3_0,
						"com.multitude.aadl.bless.BLESS.ProductQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getNumberofCountingQuantificationParserRuleCall_4_0());
				}
				lv_numberof_4_0=ruleCountingQuantification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"numberof",
						lv_numberof_4_0,
						"com.multitude.aadl.bless.BLESS.CountingQuantification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getLDisjunctionParserRuleCall_5_0_0());
					}
					lv_l_5_0=ruleDisjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"l",
							lv_l_5_0,
							"com.multitude.aadl.bless.BLESS.Disjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						(
							lv_sym_6_0='iff'
							{
								newLeafNode(lv_sym_6_0, grammarAccess.getExpressionAccess().getSymIffKeyword_5_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getExpressionRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_6_0, "iff");
							}
						)
					)
					    |
					(
						(
							lv_sym_7_0='implies'
							{
								newLeafNode(lv_sym_7_0, grammarAccess.getExpressionAccess().getSymImpliesKeyword_5_1_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getExpressionRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_7_0, "implies");
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getRDisjunctionParserRuleCall_5_1_1_0());
						}
						lv_r_8_0=ruleDisjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"r",
								lv_r_8_0,
								"com.multitude.aadl.bless.BLESS.Disjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleDisjunction
entryRuleDisjunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionRule()); }
	iv_ruleDisjunction=ruleDisjunction
	{ $current=$iv_ruleDisjunction.current; }
	EOF;

// Rule Disjunction
ruleDisjunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDisjunctionAccess().getLConjunctionParserRuleCall_0_0());
				}
				lv_l_0_0=ruleConjunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.Conjunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_sym_1_0='or'
						{
							newLeafNode(lv_sym_1_0, grammarAccess.getDisjunctionAccess().getSymOrKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDisjunctionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_1_0, "or");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=ruleConjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
							}
							add(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.Conjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='or'
					{
						newLeafNode(otherlv_3, grammarAccess.getDisjunctionAccess().getOrKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_0_2_1_0());
							}
							lv_r_4_0=ruleConjunction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
								}
								add(
									$current,
									"r",
									lv_r_4_0,
									"com.multitude.aadl.bless.BLESS.Conjunction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				otherlv_5='or'
				{
					newLeafNode(otherlv_5, grammarAccess.getDisjunctionAccess().getOrKeyword_1_1_0());
				}
				(
					(
						lv_sym_6_0='else'
						{
							newLeafNode(lv_sym_6_0, grammarAccess.getDisjunctionAccess().getSymElseKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDisjunctionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_6_0, "else");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_1_2_0());
						}
						lv_r_7_0=ruleConjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
							}
							add(
								$current,
								"r",
								lv_r_7_0,
								"com.multitude.aadl.bless.BLESS.Conjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8='or'
					{
						newLeafNode(otherlv_8, grammarAccess.getDisjunctionAccess().getOrKeyword_1_1_3_0());
					}
					otherlv_9='else'
					{
						newLeafNode(otherlv_9, grammarAccess.getDisjunctionAccess().getElseKeyword_1_1_3_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_1_3_2_0());
							}
							lv_r_10_0=ruleConjunction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
								}
								add(
									$current,
									"r",
									lv_r_10_0,
									"com.multitude.aadl.bless.BLESS.Conjunction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						lv_sym_11_0='xor'
						{
							newLeafNode(lv_sym_11_0, grammarAccess.getDisjunctionAccess().getSymXorKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDisjunctionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_11_0, "xor");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_2_1_0());
						}
						lv_r_12_0=ruleConjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
							}
							add(
								$current,
								"r",
								lv_r_12_0,
								"com.multitude.aadl.bless.BLESS.Conjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_13='xor'
					{
						newLeafNode(otherlv_13, grammarAccess.getDisjunctionAccess().getXorKeyword_1_2_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDisjunctionAccess().getRConjunctionParserRuleCall_1_2_2_1_0());
							}
							lv_r_14_0=ruleConjunction
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDisjunctionRule());
								}
								add(
									$current,
									"r",
									lv_r_14_0,
									"com.multitude.aadl.bless.BLESS.Conjunction");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	iv_ruleConjunction=ruleConjunction
	{ $current=$iv_ruleConjunction.current; }
	EOF;

// Rule Conjunction
ruleConjunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConjunctionAccess().getLRelationParserRuleCall_0_0());
				}
				lv_l_0_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConjunctionRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_sym_1_0='and'
						{
							newLeafNode(lv_sym_1_0, grammarAccess.getConjunctionAccess().getSymAndKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConjunctionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_1_0, "and");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getConjunctionAccess().getRRelationParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=ruleRelation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConjunctionRule());
							}
							add(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.Relation");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='and'
					{
						newLeafNode(otherlv_3, grammarAccess.getConjunctionAccess().getAndKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getConjunctionAccess().getRRelationParserRuleCall_1_0_2_1_0());
							}
							lv_r_4_0=ruleRelation
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConjunctionRule());
								}
								add(
									$current,
									"r",
									lv_r_4_0,
									"com.multitude.aadl.bless.BLESS.Relation");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getConjunctionAccess().getAndKeyword_1_1_0());
				}
				(
					(
						lv_sym_6_0='then'
						{
							newLeafNode(lv_sym_6_0, grammarAccess.getConjunctionAccess().getSymThenKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConjunctionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_6_0, "then");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getConjunctionAccess().getRRelationParserRuleCall_1_1_2_0());
						}
						lv_r_7_0=ruleRelation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConjunctionRule());
							}
							add(
								$current,
								"r",
								lv_r_7_0,
								"com.multitude.aadl.bless.BLESS.Relation");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_8='and'
					{
						newLeafNode(otherlv_8, grammarAccess.getConjunctionAccess().getAndKeyword_1_1_3_0());
					}
					otherlv_9='then'
					{
						newLeafNode(otherlv_9, grammarAccess.getConjunctionAccess().getThenKeyword_1_1_3_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getConjunctionAccess().getRRelationParserRuleCall_1_1_3_2_0());
							}
							lv_r_10_0=ruleRelation
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConjunctionRule());
								}
								add(
									$current,
									"r",
									lv_r_10_0,
									"com.multitude.aadl.bless.BLESS.Relation");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationAccess().getLAddSubParserRuleCall_0_0());
				}
				lv_l_0_0=ruleAddSub
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.AddSub");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						(
							lv_sym_1_1='='
							{
								newLeafNode(lv_sym_1_1, grammarAccess.getRelationAccess().getSymEqualsSignKeyword_1_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_1, null);
							}
							    |
							lv_sym_1_2='<>'
							{
								newLeafNode(lv_sym_1_2, grammarAccess.getRelationAccess().getSymLessThanSignGreaterThanSignKeyword_1_0_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_2, null);
							}
							    |
							lv_sym_1_3='<'
							{
								newLeafNode(lv_sym_1_3, grammarAccess.getRelationAccess().getSymLessThanSignKeyword_1_0_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_3, null);
							}
							    |
							lv_sym_1_4='<='
							{
								newLeafNode(lv_sym_1_4, grammarAccess.getRelationAccess().getSymLessThanSignEqualsSignKeyword_1_0_0_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_4, null);
							}
							    |
							lv_sym_1_5='>='
							{
								newLeafNode(lv_sym_1_5, grammarAccess.getRelationAccess().getSymGreaterThanSignEqualsSignKeyword_1_0_0_0_4());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_5, null);
							}
							    |
							lv_sym_1_6='>'
							{
								newLeafNode(lv_sym_1_6, grammarAccess.getRelationAccess().getSymGreaterThanSignKeyword_1_0_0_0_5());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_6, null);
							}
							    |
							lv_sym_1_7='!='
							{
								newLeafNode(lv_sym_1_7, grammarAccess.getRelationAccess().getSymExclamationMarkEqualsSignKeyword_1_0_0_0_6());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_7, null);
							}
							    |
							lv_sym_1_8='+='
							{
								newLeafNode(lv_sym_1_8, grammarAccess.getRelationAccess().getSymPlusSignEqualsSignKeyword_1_0_0_0_7());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getRelationRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_8, null);
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getRelationAccess().getRAddSubParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=ruleAddSub
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelationRule());
							}
							set(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.AddSub");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_in_3_0='in'
						{
							newLeafNode(lv_in_3_0, grammarAccess.getRelationAccess().getInInKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationRule());
							}
							setWithLastConsumed($current, "in", lv_in_3_0, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getRelationAccess().getRangeRangeParserRuleCall_1_1_1_0());
						}
						lv_range_4_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelationRule());
							}
							set(
								$current,
								"range",
								lv_range_4_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleAddSub
entryRuleAddSub returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddSubRule()); }
	iv_ruleAddSub=ruleAddSub
	{ $current=$iv_ruleAddSub.current; }
	EOF;

// Rule AddSub
ruleAddSub returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAddSubAccess().getLMultDivParserRuleCall_0_0());
				}
				lv_l_0_0=ruleMultDiv
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddSubRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.MultDiv");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_sym_1_0='+'
						{
							newLeafNode(lv_sym_1_0, grammarAccess.getAddSubAccess().getSymPlusSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddSubRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_1_0, "+");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddSubAccess().getRMultDivParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=ruleMultDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddSubRule());
							}
							add(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.MultDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3='+'
					{
						newLeafNode(otherlv_3, grammarAccess.getAddSubAccess().getPlusSignKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAddSubAccess().getRMultDivParserRuleCall_1_0_2_1_0());
							}
							lv_r_4_0=ruleMultDiv
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAddSubRule());
								}
								add(
									$current,
									"r",
									lv_r_4_0,
									"com.multitude.aadl.bless.BLESS.MultDiv");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						lv_sym_5_0='-'
						{
							newLeafNode(lv_sym_5_0, grammarAccess.getAddSubAccess().getSymHyphenMinusKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAddSubRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_5_0, "-");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddSubAccess().getRMultDivParserRuleCall_1_1_1_0());
						}
						lv_r_6_0=ruleMultDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddSubRule());
							}
							add(
								$current,
								"r",
								lv_r_6_0,
								"com.multitude.aadl.bless.BLESS.MultDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleMultDiv
entryRuleMultDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultDivRule()); }
	iv_ruleMultDiv=ruleMultDiv
	{ $current=$iv_ruleMultDiv.current; }
	EOF;

// Rule MultDiv
ruleMultDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultDivAccess().getLExpParserRuleCall_0_0());
				}
				lv_l_0_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultDivRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						(
							lv_sym_1_1='/'
							{
								newLeafNode(lv_sym_1_1, grammarAccess.getMultDivAccess().getSymSolidusKeyword_1_0_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultDivRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_1, null);
							}
							    |
							lv_sym_1_2='div'
							{
								newLeafNode(lv_sym_1_2, grammarAccess.getMultDivAccess().getSymDivKeyword_1_0_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultDivRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_2, null);
							}
							    |
							lv_sym_1_3='mod'
							{
								newLeafNode(lv_sym_1_3, grammarAccess.getMultDivAccess().getSymModKeyword_1_0_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultDivRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_3, null);
							}
							    |
							lv_sym_1_4='rem'
							{
								newLeafNode(lv_sym_1_4, grammarAccess.getMultDivAccess().getSymRemKeyword_1_0_0_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getMultDivRule());
								}
								setWithLastConsumed($current, "sym", lv_sym_1_4, null);
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultDivAccess().getRExpParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultDivRule());
							}
							add(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_sym_3_0='*'
						{
							newLeafNode(lv_sym_3_0, grammarAccess.getMultDivAccess().getSymAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultDivRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_3_0, "*");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultDivAccess().getRExpParserRuleCall_1_1_1_0());
						}
						lv_r_4_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultDivRule());
							}
							add(
								$current,
								"r",
								lv_r_4_0,
								"com.multitude.aadl.bless.BLESS.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5='*'
					{
						newLeafNode(otherlv_5, grammarAccess.getMultDivAccess().getAsteriskKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMultDivAccess().getRExpParserRuleCall_1_1_2_1_0());
							}
							lv_r_6_0=ruleExp
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultDivRule());
								}
								add(
									$current,
									"r",
									lv_r_6_0,
									"com.multitude.aadl.bless.BLESS.Exp");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getLSubexpressionParserRuleCall_0_0());
				}
				lv_l_0_0=ruleSubexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.Subexpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_sym_1_0='**'
					{
						newLeafNode(lv_sym_1_0, grammarAccess.getExpAccess().getSymAsteriskAsteriskKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpRule());
						}
						setWithLastConsumed($current, "sym", lv_sym_1_0, "**");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getRSubexpressionParserRuleCall_1_1_0());
					}
					lv_r_2_0=ruleSubexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						set(
							$current,
							"r",
							lv_r_2_0,
							"com.multitude.aadl.bless.BLESS.Subexpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSubexpression
entryRuleSubexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubexpressionRule()); }
	iv_ruleSubexpression=ruleSubexpression
	{ $current=$iv_ruleSubexpression.current; }
	EOF;

// Rule Subexpression
ruleSubexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubexpressionAccess().getUnaryUnaryOperatorParserRuleCall_0_0());
				}
				lv_unary_0_0=ruleUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubexpressionRule());
					}
					set(
						$current,
						"unary",
						lv_unary_0_0,
						"com.multitude.aadl.bless.BLESS.UnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSubexpressionAccess().getTimed_expressionTimedExpressionParserRuleCall_1_0());
				}
				lv_timed_expression_1_0=ruleTimedExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubexpressionRule());
					}
					set(
						$current,
						"timed_expression",
						lv_timed_expression_1_0,
						"com.multitude.aadl.bless.BLESS.TimedExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimedExpression
entryRuleTimedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimedExpressionRule()); }
	iv_ruleTimedExpression=ruleTimedExpression
	{ $current=$iv_ruleTimedExpression.current; }
	EOF;

// Rule TimedExpression
ruleTimedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedExpressionAccess().getSubjectTimedSubjectParserRuleCall_0_0());
				}
				lv_subject_0_0=ruleTimedSubject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedExpressionRule());
					}
					set(
						$current,
						"subject",
						lv_subject_0_0,
						"com.multitude.aadl.bless.BLESS.TimedSubject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_tick_1_0='\''
					{
						newLeafNode(lv_tick_1_0, grammarAccess.getTimedExpressionAccess().getTickApostropheKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimedExpressionRule());
						}
						setWithLastConsumed($current, "tick", lv_tick_1_0, "\'");
					}
				)
			)
			    |
			(
				(
					(
						lv_at_2_0='@'
						{
							newLeafNode(lv_at_2_0, grammarAccess.getTimedExpressionAccess().getAtCommercialAtKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTimedExpressionRule());
							}
							setWithLastConsumed($current, "at", lv_at_2_0 != null, "@");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTimedExpressionAccess().getTimeSubexpressionParserRuleCall_1_1_1_0());
						}
						lv_time_3_0=ruleSubexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTimedExpressionRule());
							}
							set(
								$current,
								"time",
								lv_time_3_0,
								"com.multitude.aadl.bless.BLESS.Subexpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_caret_4_0='^'
						{
							newLeafNode(lv_caret_4_0, grammarAccess.getTimedExpressionAccess().getCaretCircumflexAccentKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTimedExpressionRule());
							}
							setWithLastConsumed($current, "caret", lv_caret_4_0 != null, "^");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTimedExpressionAccess().getShiftPeriodShiftParserRuleCall_1_2_1_0());
						}
						lv_shift_5_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTimedExpressionRule());
							}
							set(
								$current,
								"shift",
								lv_shift_5_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleTimedSubject
entryRuleTimedSubject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimedSubjectRule()); }
	iv_ruleTimedSubject=ruleTimedSubject
	{ $current=$iv_ruleTimedSubject.current; }
	EOF;

// Rule TimedSubject
ruleTimedSubject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedSubjectAccess().getPsParenthesizedSubexpressionParserRuleCall_0_0());
				}
				lv_ps_0_0=ruleParenthesizedSubexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedSubjectRule());
					}
					set(
						$current,
						"ps",
						lv_ps_0_0,
						"com.multitude.aadl.bless.BLESS.ParenthesizedSubexpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedSubjectAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedSubjectRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"com.multitude.aadl.bless.BLESS.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedSubjectAccess().getConditionalConditionalExpressionParserRuleCall_2_0());
				}
				lv_conditional_2_0=ruleConditionalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedSubjectRule());
					}
					set(
						$current,
						"conditional",
						lv_conditional_2_0,
						"com.multitude.aadl.bless.BLESS.ConditionalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedSubjectAccess().getRecordRecordTermParserRuleCall_3_0());
				}
				lv_record_3_0=ruleRecordTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedSubjectRule());
					}
					set(
						$current,
						"record",
						lv_record_3_0,
						"com.multitude.aadl.bless.BLESS.RecordTerm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedSubjectAccess().getInvocationInvocationParserRuleCall_4_0());
				}
				lv_invocation_4_0=ruleInvocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedSubjectRule());
					}
					set(
						$current,
						"invocation",
						lv_invocation_4_0,
						"com.multitude.aadl.bless.BLESS.Invocation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParenthesizedSubexpression
entryRuleParenthesizedSubexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesizedSubexpressionRule()); }
	iv_ruleParenthesizedSubexpression=ruleParenthesizedSubexpression
	{ $current=$iv_ruleParenthesizedSubexpression.current; }
	EOF;

// Rule ParenthesizedSubexpression
ruleParenthesizedSubexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesizedSubexpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParenthesizedSubexpressionAccess().getExpressionExpressionParserRuleCall_1_0_0_0());
						}
						lv_expression_1_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParenthesizedSubexpressionRule());
							}
							set(
								$current,
								"expression",
								lv_expression_1_0,
								"com.multitude.aadl.bless.BLESS.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2='??'
					{
						newLeafNode(otherlv_2, grammarAccess.getParenthesizedSubexpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParenthesizedSubexpressionAccess().getTExpressionParserRuleCall_1_0_1_1_0());
							}
							lv_t_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParenthesizedSubexpressionRule());
								}
								set(
									$current,
									"t",
									lv_t_3_0,
									"com.multitude.aadl.bless.BLESS.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_4=':'
					{
						newLeafNode(otherlv_4, grammarAccess.getParenthesizedSubexpressionAccess().getColonKeyword_1_0_1_2());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParenthesizedSubexpressionAccess().getFExpressionParserRuleCall_1_0_1_3_0());
							}
							lv_f_5_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParenthesizedSubexpressionRule());
								}
								set(
									$current,
									"f",
									lv_f_5_0,
									"com.multitude.aadl.bless.BLESS.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getParenthesizedSubexpressionAccess().getCaseexpressionCaseExpressionParserRuleCall_1_1_0());
					}
					lv_caseexpression_6_0=ruleCaseExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParenthesizedSubexpressionRule());
						}
						set(
							$current,
							"caseexpression",
							lv_caseexpression_6_0,
							"com.multitude.aadl.bless.BLESS.CaseExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getParenthesizedSubexpressionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current; }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_not_0_0='not'
				{
					newLeafNode(lv_not_0_0, grammarAccess.getUnaryOperatorAccess().getNotNotKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "not", lv_not_0_0, "not");
				}
			)
		)
		    |
		(
			(
				lv_unary_minus_1_0='-'
				{
					newLeafNode(lv_unary_minus_1_0, grammarAccess.getUnaryOperatorAccess().getUnary_minusHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "unary_minus", lv_unary_minus_1_0, "-");
				}
			)
		)
		    |
		(
			(
				lv_absolute_value_2_0='abs'
				{
					newLeafNode(lv_absolute_value_2_0, grammarAccess.getUnaryOperatorAccess().getAbsolute_valueAbsKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "absolute_value", lv_absolute_value_2_0, "abs");
				}
			)
		)
		    |
		(
			(
				lv_truncate_3_0='truncate'
				{
					newLeafNode(lv_truncate_3_0, grammarAccess.getUnaryOperatorAccess().getTruncateTruncateKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "truncate", lv_truncate_3_0, "truncate");
				}
			)
		)
		    |
		(
			(
				lv_round_4_0='round'
				{
					newLeafNode(lv_round_4_0, grammarAccess.getUnaryOperatorAccess().getRoundRoundKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryOperatorRule());
					}
					setWithLastConsumed($current, "round", lv_round_4_0, "round");
				}
			)
		)
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getLower_boundSubexpressionParserRuleCall_0_0());
				}
				lv_lower_bound_0_0=ruleSubexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"lower_bound",
						lv_lower_bound_0_0,
						"com.multitude.aadl.bless.BLESS.Subexpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getSymRangeSymbolParserRuleCall_1_0());
				}
				lv_sym_1_0=ruleRangeSymbol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"sym",
						lv_sym_1_0,
						"com.multitude.aadl.bless.BLESS.RangeSymbol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getUpper_boundSubexpressionParserRuleCall_2_0());
				}
				lv_upper_bound_2_0=ruleSubexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"upper_bound",
						lv_upper_bound_2_0,
						"com.multitude.aadl.bless.BLESS.Subexpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRangeSymbol
entryRuleRangeSymbol returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRangeSymbolRule()); }
	iv_ruleRangeSymbol=ruleRangeSymbol
	{ $current=$iv_ruleRangeSymbol.current.getText(); }
	EOF;

// Rule RangeSymbol
ruleRangeSymbol returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DOTDOT_0=RULE_DOTDOT
		{
			$current.merge(this_DOTDOT_0);
		}
		{
			newLeafNode(this_DOTDOT_0, grammarAccess.getRangeSymbolAccess().getDOTDOTTerminalRuleCall_0());
		}
		    |
		this_COMMADOT_1=RULE_COMMADOT
		{
			$current.merge(this_COMMADOT_1);
		}
		{
			newLeafNode(this_COMMADOT_1, grammarAccess.getRangeSymbolAccess().getCOMMADOTTerminalRuleCall_1());
		}
		    |
		this_DOTCOMMA_2=RULE_DOTCOMMA
		{
			$current.merge(this_DOTCOMMA_2);
		}
		{
			newLeafNode(this_DOTCOMMA_2, grammarAccess.getRangeSymbolAccess().getDOTCOMMATerminalRuleCall_2());
		}
		    |
		this_COMMACOMMA_3=RULE_COMMACOMMA
		{
			$current.merge(this_COMMACOMMA_3);
		}
		{
			newLeafNode(this_COMMACOMMA_3, grammarAccess.getRangeSymbolAccess().getCOMMACOMMATerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	iv_ruleConditionalExpression=ruleConditionalExpression
	{ $current=$iv_ruleConditionalExpression.current; }
	EOF;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalExpressionAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getPredExpressionParserRuleCall_2_0());
				}
				lv_pred_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"pred",
						lv_pred_2_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='then'
		{
			newLeafNode(otherlv_3, grammarAccess.getConditionalExpressionAccess().getThenKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getTExpressionParserRuleCall_4_0());
				}
				lv_t_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"t",
						lv_t_4_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='else'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalExpressionAccess().getElseKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getFExpressionParserRuleCall_6_0());
				}
				lv_f_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"f",
						lv_f_6_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getValue_nameValueNameParserRuleCall_0_0());
				}
				lv_value_name_0_0=ruleValueName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"value_name",
						lv_value_name_0_0,
						"com.multitude.aadl.bless.BLESS.ValueName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getConstantConstantParserRuleCall_1_0());
				}
				lv_constant_1_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"constant",
						lv_constant_1_0,
						"com.multitude.aadl.bless.BLESS.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_timeout_2_0='timeout'
				{
					newLeafNode(lv_timeout_2_0, grammarAccess.getValueAccess().getTimeoutTimeoutKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "timeout", lv_timeout_2_0, "timeout");
				}
			)
		)
		    |
		(
			(
				lv_now_3_0='now'
				{
					newLeafNode(lv_now_3_0, grammarAccess.getValueAccess().getNowNowKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "now", lv_now_3_0, "now");
				}
			)
		)
		    |
		(
			(
				lv_tops_4_0='tops'
				{
					newLeafNode(lv_tops_4_0, grammarAccess.getValueAccess().getTopsTopsKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "tops", lv_tops_4_0, "tops");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getEnum_valEnumerationValueParserRuleCall_5_0());
				}
				lv_enum_val_5_0=ruleEnumerationValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"enum_val",
						lv_enum_val_5_0,
						"com.multitude.aadl.bless.BLESS.EnumerationValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumerationValue
entryRuleEnumerationValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationValueRule()); }
	iv_ruleEnumerationValue=ruleEnumerationValue
	{ $current=$iv_ruleEnumerationValue.current; }
	EOF;

// Rule EnumerationValue
ruleEnumerationValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationValueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEnumerationValueAccess().getEnumeration_typeTypeDeclarationCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_tick_1_0='\''
				{
					newLeafNode(lv_tick_1_0, grammarAccess.getEnumerationValueAccess().getTickApostropheKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationValueRule());
					}
					setWithLastConsumed($current, "tick", lv_tick_1_0, "\'");
				}
			)
		)
		(
			(
				lv_enumeration_value_2_0=RULE_ID
				{
					newLeafNode(lv_enumeration_value_2_0, grammarAccess.getEnumerationValueAccess().getEnumeration_valueIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationValueRule());
					}
					setWithLastConsumed(
						$current,
						"enumeration_value",
						lv_enumeration_value_2_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getNumeric_constantQuantityParserRuleCall_0_0());
				}
				lv_numeric_constant_0_0=ruleQuantity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"numeric_constant",
						lv_numeric_constant_0_0,
						"com.multitude.aadl.bless.BLESS.Quantity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_string_literal_1_0=RULE_STRING
				{
					newLeafNode(lv_string_literal_1_0, grammarAccess.getConstantAccess().getString_literalSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"string_literal",
						lv_string_literal_1_0,
						"com.multitude.aadl.bless.BLESS.STRING");
				}
			)
		)
		    |
		(
			(
				lv_t_2_0='true'
				{
					newLeafNode(lv_t_2_0, grammarAccess.getConstantAccess().getTTrueKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "t", lv_t_2_0, "true");
				}
			)
		)
		    |
		(
			(
				lv_f_3_0='false'
				{
					newLeafNode(lv_f_3_0, grammarAccess.getConstantAccess().getFFalseKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "f", lv_f_3_0, "false");
				}
			)
		)
		    |
		(
			(
				lv_nul_4_0='null'
				{
					newLeafNode(lv_nul_4_0, grammarAccess.getConstantAccess().getNulNullKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed($current, "nul", lv_nul_4_0, "null");
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1='~'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getTildeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTodTypeOrReferenceParserRuleCall_2_0());
				}
				lv_tod_2_0=ruleTypeOrReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"tod",
						lv_tod_2_0,
						"com.multitude.aadl.bless.BLESS.TypeOrReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValueName
entryRuleValueName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueNameRule()); }
	iv_ruleValueName=ruleValueName
	{ $current=$iv_ruleValueName.current; }
	EOF;

// Rule ValueName
ruleValueName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueNameRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getValueNameAccess().getIdNamedElementCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='$'
			{
				newLeafNode(otherlv_1, grammarAccess.getValueNameAccess().getDollarSignKeyword_1_0());
			}
			(
				(
					lv_lp_2_0='('
					{
						newLeafNode(lv_lp_2_0, grammarAccess.getValueNameAccess().getLpLeftParenthesisKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueNameRule());
						}
						setWithLastConsumed($current, "lp", lv_lp_2_0 != null, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getValueNameAccess().getPrFunctionParametersParserRuleCall_1_2_0());
					}
					lv_pr_3_0=ruleFunctionParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueNameRule());
						}
						set(
							$current,
							"pr",
							lv_pr_3_0,
							"com.multitude.aadl.bless.BLESS.FunctionParameters");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getValueNameAccess().getRightParenthesisKeyword_1_3());
			}
		)?
		(
			(
				(
					lv_lb_5_0='['
					{
						newLeafNode(lv_lb_5_0, grammarAccess.getValueNameAccess().getLbLeftSquareBracketKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueNameRule());
						}
						setWithLastConsumed($current, "lb", lv_lb_5_0 != null, "[");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getValueNameAccess().getArray_indexIndexExpressionOrRangeParserRuleCall_2_1_0());
					}
					lv_array_index_6_0=ruleIndexExpressionOrRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueNameRule());
						}
						add(
							$current,
							"array_index",
							lv_array_index_6_0,
							"com.multitude.aadl.bless.BLESS.IndexExpressionOrRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getValueNameAccess().getRightSquareBracketKeyword_2_2());
			}
			(
				otherlv_8='['
				{
					newLeafNode(otherlv_8, grammarAccess.getValueNameAccess().getLeftSquareBracketKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValueNameAccess().getArray_indexIndexExpressionOrRangeParserRuleCall_2_3_1_0());
						}
						lv_array_index_9_0=ruleIndexExpressionOrRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueNameRule());
							}
							add(
								$current,
								"array_index",
								lv_array_index_9_0,
								"com.multitude.aadl.bless.BLESS.IndexExpressionOrRange");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_10=']'
				{
					newLeafNode(otherlv_10, grammarAccess.getValueNameAccess().getRightSquareBracketKeyword_2_3_2());
				}
			)*
		)?
		(
			(
				(
					lv_dot_11_0='.'
					{
						newLeafNode(lv_dot_11_0, grammarAccess.getValueNameAccess().getDotFullStopKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueNameRule());
						}
						setWithLastConsumed($current, "dot", lv_dot_11_0 != null, ".");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getValueNameAccess().getPnPartialNameParserRuleCall_3_1_0());
					}
					lv_pn_12_0=rulePartialName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueNameRule());
						}
						add(
							$current,
							"pn",
							lv_pn_12_0,
							"com.multitude.aadl.bless.BLESS.PartialName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13='.'
				{
					newLeafNode(otherlv_13, grammarAccess.getValueNameAccess().getFullStopKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValueNameAccess().getPnPartialNameParserRuleCall_3_2_1_0());
						}
						lv_pn_14_0=rulePartialName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueNameRule());
							}
							add(
								$current,
								"pn",
								lv_pn_14_0,
								"com.multitude.aadl.bless.BLESS.PartialName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				(
					lv_q_15_0='?'
					{
						newLeafNode(lv_q_15_0, grammarAccess.getValueNameAccess().getQQuestionMarkKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValueNameRule());
						}
						setWithLastConsumed($current, "q", lv_q_15_0 != null, "?");
					}
				)
			)
			    |
			(
				otherlv_16='\''
				{
					newLeafNode(otherlv_16, grammarAccess.getValueNameAccess().getApostropheKeyword_4_1_0());
				}
				(
					(
						lv_fresh_17_0='fresh'
						{
							newLeafNode(lv_fresh_17_0, grammarAccess.getValueNameAccess().getFreshFreshKeyword_4_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueNameRule());
							}
							setWithLastConsumed($current, "fresh", lv_fresh_17_0 != null, "fresh");
						}
					)
				)
			)
			    |
			(
				otherlv_18='\''
				{
					newLeafNode(otherlv_18, grammarAccess.getValueNameAccess().getApostropheKeyword_4_2_0());
				}
				(
					(
						lv_count_19_0='count'
						{
							newLeafNode(lv_count_19_0, grammarAccess.getValueNameAccess().getCountCountKeyword_4_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueNameRule());
							}
							setWithLastConsumed($current, "count", lv_count_19_0 != null, "count");
						}
					)
				)
			)
			    |
			(
				otherlv_20='\''
				{
					newLeafNode(otherlv_20, grammarAccess.getValueNameAccess().getApostropheKeyword_4_3_0());
				}
				(
					(
						lv_updated_21_0='updated'
						{
							newLeafNode(lv_updated_21_0, grammarAccess.getValueNameAccess().getUpdatedUpdatedKeyword_4_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueNameRule());
							}
							setWithLastConsumed($current, "updated", lv_updated_21_0 != null, "updated");
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRulePartialName
entryRulePartialName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPartialNameRule()); }
	iv_rulePartialName=rulePartialName
	{ $current=$iv_rulePartialName.current; }
	EOF;

// Rule PartialName
rulePartialName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_record_id_0_0=RULE_ID
				{
					newLeafNode(lv_record_id_0_0, grammarAccess.getPartialNameAccess().getRecord_idIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPartialNameRule());
					}
					setWithLastConsumed(
						$current,
						"record_id",
						lv_record_id_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		(
			(
				(
					lv_lb_1_0='['
					{
						newLeafNode(lv_lb_1_0, grammarAccess.getPartialNameAccess().getLbLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPartialNameRule());
						}
						setWithLastConsumed($current, "lb", lv_lb_1_0 != null, "[");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPartialNameAccess().getArray_indexIndexExpressionOrRangeParserRuleCall_1_1_0());
					}
					lv_array_index_2_0=ruleIndexExpressionOrRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPartialNameRule());
						}
						add(
							$current,
							"array_index",
							lv_array_index_2_0,
							"com.multitude.aadl.bless.BLESS.IndexExpressionOrRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getPartialNameAccess().getRightSquareBracketKeyword_1_2());
			}
			(
				otherlv_4='['
				{
					newLeafNode(otherlv_4, grammarAccess.getPartialNameAccess().getLeftSquareBracketKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPartialNameAccess().getArray_indexIndexExpressionOrRangeParserRuleCall_1_3_1_0());
						}
						lv_array_index_5_0=ruleIndexExpressionOrRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPartialNameRule());
							}
							add(
								$current,
								"array_index",
								lv_array_index_5_0,
								"com.multitude.aadl.bless.BLESS.IndexExpressionOrRange");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getPartialNameAccess().getRightSquareBracketKeyword_1_3_2());
				}
			)*
		)?
	)
;

// Entry rule entryRuleIndexExpressionOrRange
entryRuleIndexExpressionOrRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexExpressionOrRangeRule()); }
	iv_ruleIndexExpressionOrRange=ruleIndexExpressionOrRange
	{ $current=$iv_ruleIndexExpressionOrRange.current; }
	EOF;

// Rule IndexExpressionOrRange
ruleIndexExpressionOrRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexExpressionOrRangeAccess().getLeft_hand_sideIndexExpressionParserRuleCall_0_0());
				}
				lv_left_hand_side_0_0=ruleIndexExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexExpressionOrRangeRule());
					}
					set(
						$current,
						"left_hand_side",
						lv_left_hand_side_0_0,
						"com.multitude.aadl.bless.BLESS.IndexExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_dd_1_0=RULE_DOTDOT
					{
						newLeafNode(lv_dd_1_0, grammarAccess.getIndexExpressionOrRangeAccess().getDdDOTDOTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIndexExpressionOrRangeRule());
						}
						setWithLastConsumed(
							$current,
							"dd",
							lv_dd_1_0 != null,
							"com.multitude.aadl.bless.BLESS.DOTDOT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIndexExpressionOrRangeAccess().getRight_hand_sideIndexExpressionParserRuleCall_1_1_0());
					}
					lv_right_hand_side_2_0=ruleIndexExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIndexExpressionOrRangeRule());
						}
						set(
							$current,
							"right_hand_side",
							lv_right_hand_side_2_0,
							"com.multitude.aadl.bless.BLESS.IndexExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePeriodShift
entryRulePeriodShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPeriodShiftRule()); }
	iv_rulePeriodShift=rulePeriodShift
	{ $current=$iv_rulePeriodShift.current; }
	EOF;

// Rule PeriodShift
rulePeriodShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_unary_minus_0_0='-'
				{
					newLeafNode(lv_unary_minus_0_0, grammarAccess.getPeriodShiftAccess().getUnary_minusHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPeriodShiftRule());
					}
					setWithLastConsumed($current, "unary_minus", lv_unary_minus_0_0 != null, "-");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPeriodShiftAccess().getVValueParserRuleCall_1_0_0());
					}
					lv_v_1_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPeriodShiftRule());
						}
						set(
							$current,
							"v",
							lv_v_1_0,
							"com.multitude.aadl.bless.BLESS.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getPeriodShiftAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPeriodShiftAccess().getIndex_expressionIndexExpressionParserRuleCall_1_1_1_0());
						}
						lv_index_expression_3_0=ruleIndexExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPeriodShiftRule());
							}
							set(
								$current,
								"index_expression",
								lv_index_expression_3_0,
								"com.multitude.aadl.bless.BLESS.IndexExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getPeriodShiftAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleIndexExpression
entryRuleIndexExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexExpressionRule()); }
	iv_ruleIndexExpression=ruleIndexExpression
	{ $current=$iv_ruleIndexExpression.current; }
	EOF;

// Rule IndexExpression
ruleIndexExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexExpressionAccess().getLPeriodShiftParserRuleCall_0_0());
				}
				lv_l_0_0=rulePeriodShift
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
					}
					set(
						$current,
						"l",
						lv_l_0_0,
						"com.multitude.aadl.bless.BLESS.PeriodShift");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_sym_1_0='-'
						{
							newLeafNode(lv_sym_1_0, grammarAccess.getIndexExpressionAccess().getSymHyphenMinusKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIndexExpressionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_1_0, "-");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_0_1_0());
						}
						lv_r_2_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							add(
								$current,
								"r",
								lv_r_2_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_sym_3_0='div'
						{
							newLeafNode(lv_sym_3_0, grammarAccess.getIndexExpressionAccess().getSymDivKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIndexExpressionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_3_0, "div");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_1_1_0());
						}
						lv_r_4_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							add(
								$current,
								"r",
								lv_r_4_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_sym_5_0='mod'
						{
							newLeafNode(lv_sym_5_0, grammarAccess.getIndexExpressionAccess().getSymModKeyword_1_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIndexExpressionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_5_0, "mod");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_2_1_0());
						}
						lv_r_6_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							add(
								$current,
								"r",
								lv_r_6_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_sym_7_0='+'
						{
							newLeafNode(lv_sym_7_0, grammarAccess.getIndexExpressionAccess().getSymPlusSignKeyword_1_3_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIndexExpressionRule());
							}
							setWithLastConsumed($current, "sym", lv_sym_7_0, "+");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_3_1_0());
						}
						lv_r_8_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							add(
								$current,
								"r",
								lv_r_8_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='+'
					{
						newLeafNode(otherlv_9, grammarAccess.getIndexExpressionAccess().getPlusSignKeyword_1_3_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_3_2_1_0());
							}
							lv_r_10_0=rulePeriodShift
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
								}
								add(
									$current,
									"r",
									lv_r_10_0,
									"com.multitude.aadl.bless.BLESS.PeriodShift");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getSymTIMESParserRuleCall_1_4_0_0());
						}
						lv_sym_11_0=ruleTIMES
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							set(
								$current,
								"sym",
								lv_sym_11_0,
								"com.multitude.aadl.bless.BLESS.TIMES");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_4_1_0());
						}
						lv_r_12_0=rulePeriodShift
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
							}
							add(
								$current,
								"r",
								lv_r_12_0,
								"com.multitude.aadl.bless.BLESS.PeriodShift");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					{
						newCompositeNode(grammarAccess.getIndexExpressionAccess().getTIMESParserRuleCall_1_4_2_0());
					}
					ruleTIMES
					{
						afterParserOrEnumRuleCall();
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getIndexExpressionAccess().getRPeriodShiftParserRuleCall_1_4_2_1_0());
							}
							lv_r_14_0=rulePeriodShift
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getIndexExpressionRule());
								}
								add(
									$current,
									"r",
									lv_r_14_0,
									"com.multitude.aadl.bless.BLESS.PeriodShift");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	iv_ruleCaseExpression=ruleCaseExpression
	{ $current=$iv_ruleCaseExpression.current; }
	EOF;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseExpressionAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseExpressionAccess().getCcCaseChoiceParserRuleCall_1_0());
				}
				lv_cc_1_0=ruleCaseChoice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
					}
					add(
						$current,
						"cc",
						lv_cc_1_0,
						"com.multitude.aadl.bless.BLESS.CaseChoice");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleCaseChoice
entryRuleCaseChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseChoiceRule()); }
	iv_ruleCaseChoice=ruleCaseChoice
	{ $current=$iv_ruleCaseChoice.current; }
	EOF;

// Rule CaseChoice
ruleCaseChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseChoiceAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseChoiceAccess().getBeBooleanExpressionParserRuleCall_1_0());
				}
				lv_be_1_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseChoiceRule());
					}
					set(
						$current,
						"be",
						lv_be_1_0,
						"com.multitude.aadl.bless.BLESS.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseChoiceAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseChoiceAccess().getExpExpressionParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseChoiceRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"com.multitude.aadl.bless.BLESS.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCaseChoiceAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLogicVariables
entryRuleLogicVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicVariablesRule()); }
	iv_ruleLogicVariables=ruleLogicVariables
	{ $current=$iv_ruleLogicVariables.current; }
	EOF;

// Rule LogicVariables
ruleLogicVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicVariablesAccess().getLvVariableParserRuleCall_0_0());
				}
				lv_lv_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicVariablesRule());
					}
					add(
						$current,
						"lv",
						lv_lv_0_0,
						"com.multitude.aadl.bless.BLESS.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLogicVariablesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicVariablesAccess().getLvVariableParserRuleCall_1_1_0());
					}
					lv_lv_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicVariablesRule());
						}
						add(
							$current,
							"lv",
							lv_lv_2_0,
							"com.multitude.aadl.bless.BLESS.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSumQuantification
entryRuleSumQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSumQuantificationRule()); }
	iv_ruleSumQuantification=ruleSumQuantification
	{ $current=$iv_ruleSumQuantification.current; }
	EOF;

// Rule SumQuantification
ruleSumQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sum'
		{
			newLeafNode(otherlv_0, grammarAccess.getSumQuantificationAccess().getSumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumQuantificationAccess().getVariablesLogicVariablesParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleLogicVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumQuantificationRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.LogicVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_in_2_0='in'
						{
							newLeafNode(lv_in_2_0, grammarAccess.getSumQuantificationAccess().getInInKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSumQuantificationRule());
							}
							setWithLastConsumed($current, "in", lv_in_2_0 != null, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumQuantificationAccess().getRangeRangeParserRuleCall_2_0_1_0());
						}
						lv_range_3_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumQuantificationRule());
							}
							set(
								$current,
								"range",
								lv_range_3_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_which_4_0='which'
						{
							newLeafNode(lv_which_4_0, grammarAccess.getSumQuantificationAccess().getWhichWhichKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSumQuantificationRule());
							}
							setWithLastConsumed($current, "which", lv_which_4_0 != null, "which");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSumQuantificationAccess().getConditionPredicateParserRuleCall_2_1_1_0());
						}
						lv_condition_5_0=rulePredicate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSumQuantificationRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"com.multitude.aadl.bless.BLESS.Predicate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getSumQuantificationAccess().getOfKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSumQuantificationAccess().getNumeric_expressionNumericExpressionParserRuleCall_4_0());
				}
				lv_numeric_expression_7_0=ruleNumericExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSumQuantificationRule());
					}
					set(
						$current,
						"numeric_expression",
						lv_numeric_expression_7_0,
						"com.multitude.aadl.bless.BLESS.NumericExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProductQuantification
entryRuleProductQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductQuantificationRule()); }
	iv_ruleProductQuantification=ruleProductQuantification
	{ $current=$iv_ruleProductQuantification.current; }
	EOF;

// Rule ProductQuantification
ruleProductQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='product'
		{
			newLeafNode(otherlv_0, grammarAccess.getProductQuantificationAccess().getProductKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductQuantificationAccess().getVariablesLogicVariablesParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleLogicVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductQuantificationRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.LogicVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_in_2_0='in'
						{
							newLeafNode(lv_in_2_0, grammarAccess.getProductQuantificationAccess().getInInKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProductQuantificationRule());
							}
							setWithLastConsumed($current, "in", lv_in_2_0 != null, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductQuantificationAccess().getRangeRangeParserRuleCall_2_0_1_0());
						}
						lv_range_3_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductQuantificationRule());
							}
							set(
								$current,
								"range",
								lv_range_3_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_which_4_0='which'
						{
							newLeafNode(lv_which_4_0, grammarAccess.getProductQuantificationAccess().getWhichWhichKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getProductQuantificationRule());
							}
							setWithLastConsumed($current, "which", lv_which_4_0 != null, "which");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getProductQuantificationAccess().getConditionPredicateParserRuleCall_2_1_1_0());
						}
						lv_condition_5_0=rulePredicate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProductQuantificationRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"com.multitude.aadl.bless.BLESS.Predicate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getProductQuantificationAccess().getOfKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductQuantificationAccess().getNumeric_expressionNumericExpressionParserRuleCall_4_0());
				}
				lv_numeric_expression_7_0=ruleNumericExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductQuantificationRule());
					}
					set(
						$current,
						"numeric_expression",
						lv_numeric_expression_7_0,
						"com.multitude.aadl.bless.BLESS.NumericExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCountingQuantification
entryRuleCountingQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountingQuantificationRule()); }
	iv_ruleCountingQuantification=ruleCountingQuantification
	{ $current=$iv_ruleCountingQuantification.current; }
	EOF;

// Rule CountingQuantification
ruleCountingQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='numberof'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountingQuantificationAccess().getNumberofKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCountingQuantificationAccess().getVariablesLogicVariablesParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleLogicVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountingQuantificationRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.LogicVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_in_2_0='in'
						{
							newLeafNode(lv_in_2_0, grammarAccess.getCountingQuantificationAccess().getInInKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCountingQuantificationRule());
							}
							setWithLastConsumed($current, "in", lv_in_2_0 != null, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCountingQuantificationAccess().getRangeRangeParserRuleCall_2_0_1_0());
						}
						lv_range_3_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCountingQuantificationRule());
							}
							set(
								$current,
								"range",
								lv_range_3_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_which_4_0='which'
						{
							newLeafNode(lv_which_4_0, grammarAccess.getCountingQuantificationAccess().getWhichWhichKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCountingQuantificationRule());
							}
							setWithLastConsumed($current, "which", lv_which_4_0 != null, "which");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCountingQuantificationAccess().getConditionPredicateParserRuleCall_2_1_1_0());
						}
						lv_condition_5_0=rulePredicate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCountingQuantificationRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"com.multitude.aadl.bless.BLESS.Predicate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='that'
		{
			newLeafNode(otherlv_6, grammarAccess.getCountingQuantificationAccess().getThatKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCountingQuantificationAccess().getCountedPredicateParserRuleCall_4_0());
				}
				lv_counted_7_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCountingQuantificationRule());
					}
					set(
						$current,
						"counted",
						lv_counted_7_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUniversalQuantification
entryRuleUniversalQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversalQuantificationRule()); }
	iv_ruleUniversalQuantification=ruleUniversalQuantification
	{ $current=$iv_ruleUniversalQuantification.current; }
	EOF;

// Rule UniversalQuantification
ruleUniversalQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='all'
		{
			newLeafNode(otherlv_0, grammarAccess.getUniversalQuantificationAccess().getAllKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalQuantificationAccess().getVariablesLogicVariablesParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleLogicVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalQuantificationRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.LogicVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_in_2_0='in'
						{
							newLeafNode(lv_in_2_0, grammarAccess.getUniversalQuantificationAccess().getInInKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUniversalQuantificationRule());
							}
							setWithLastConsumed($current, "in", lv_in_2_0 != null, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversalQuantificationAccess().getRangeRangeParserRuleCall_2_0_1_0());
						}
						lv_range_3_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversalQuantificationRule());
							}
							set(
								$current,
								"range",
								lv_range_3_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_which_4_0='which'
						{
							newLeafNode(lv_which_4_0, grammarAccess.getUniversalQuantificationAccess().getWhichWhichKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUniversalQuantificationRule());
							}
							setWithLastConsumed($current, "which", lv_which_4_0 != null, "which");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getUniversalQuantificationAccess().getConditionPredicateParserRuleCall_2_1_1_0());
						}
						lv_condition_5_0=rulePredicate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUniversalQuantificationRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"com.multitude.aadl.bless.BLESS.Predicate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='are'
		{
			newLeafNode(otherlv_6, grammarAccess.getUniversalQuantificationAccess().getAreKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalQuantificationAccess().getPredicatePredicateParserRuleCall_4_0());
				}
				lv_predicate_7_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalQuantificationRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_7_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExistentialQuantification
entryRuleExistentialQuantification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistentialQuantificationRule()); }
	iv_ruleExistentialQuantification=ruleExistentialQuantification
	{ $current=$iv_ruleExistentialQuantification.current; }
	EOF;

// Rule ExistentialQuantification
ruleExistentialQuantification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exists'
		{
			newLeafNode(otherlv_0, grammarAccess.getExistentialQuantificationAccess().getExistsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialQuantificationAccess().getVariablesLogicVariablesParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleLogicVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialQuantificationRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"com.multitude.aadl.bless.BLESS.LogicVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_in_2_0='in'
						{
							newLeafNode(lv_in_2_0, grammarAccess.getExistentialQuantificationAccess().getInInKeyword_2_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExistentialQuantificationRule());
							}
							setWithLastConsumed($current, "in", lv_in_2_0 != null, "in");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExistentialQuantificationAccess().getRangeRangeParserRuleCall_2_0_1_0());
						}
						lv_range_3_0=ruleRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExistentialQuantificationRule());
							}
							set(
								$current,
								"range",
								lv_range_3_0,
								"com.multitude.aadl.bless.BLESS.Range");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_which_4_0='which'
						{
							newLeafNode(lv_which_4_0, grammarAccess.getExistentialQuantificationAccess().getWhichWhichKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExistentialQuantificationRule());
							}
							setWithLastConsumed($current, "which", lv_which_4_0 != null, "which");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExistentialQuantificationAccess().getConditionPredicateParserRuleCall_2_1_1_0());
						}
						lv_condition_5_0=rulePredicate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExistentialQuantificationRule());
							}
							set(
								$current,
								"condition",
								lv_condition_5_0,
								"com.multitude.aadl.bless.BLESS.Predicate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_6='that'
		{
			newLeafNode(otherlv_6, grammarAccess.getExistentialQuantificationAccess().getThatKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistentialQuantificationAccess().getPredicatePredicateParserRuleCall_4_0());
				}
				lv_predicate_7_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistentialQuantificationRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_7_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	iv_ruleRecordTerm=ruleRecordTerm
	{ $current=$iv_ruleRecordTerm.current; }
	EOF;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecordTermRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRecordTermAccess().getRecord_typeTypeDeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordTermAccess().getRecord_valueRecordValueParserRuleCall_3_0());
				}
				lv_record_value_3_0=ruleRecordValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordTermRule());
					}
					add(
						$current,
						"record_value",
						lv_record_value_3_0,
						"com.multitude.aadl.bless.BLESS.RecordValue");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleRecordValue
entryRuleRecordValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordValueRule()); }
	iv_ruleRecordValue=ruleRecordValue
	{ $current=$iv_ruleRecordValue.current; }
	EOF;

// Rule RecordValue
ruleRecordValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_label_0_0=RULE_ID
				{
					newLeafNode(lv_label_0_0, grammarAccess.getRecordValueAccess().getLabelIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecordValueRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordValueAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordValueAccess().getAvalValueParserRuleCall_2_0());
				}
				lv_aval_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordValueRule());
					}
					set(
						$current,
						"aval",
						lv_aval_2_0,
						"com.multitude.aadl.bless.BLESS.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getRecordValueAccess().getSemicolonKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleInvocation
entryRuleInvocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInvocationRule()); }
	iv_ruleInvocation=ruleInvocation
	{ $current=$iv_ruleInvocation.current; }
	EOF;

// Rule Invocation
ruleInvocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInvocationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getInvocationAccess().getLabelNamedAssertionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getInvocationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getInvocationAccess().getParamsActualParameterParserRuleCall_2_0_0_0());
						}
						lv_params_2_0=ruleActualParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInvocationRule());
							}
							add(
								$current,
								"params",
								lv_params_2_0,
								"com.multitude.aadl.bless.BLESS.ActualParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getInvocationAccess().getCommaKeyword_2_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getInvocationAccess().getParamsActualParameterParserRuleCall_2_0_1_1_0());
							}
							lv_params_4_0=ruleActualParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getInvocationRule());
								}
								add(
									$current,
									"params",
									lv_params_4_0,
									"com.multitude.aadl.bless.BLESS.ActualParameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getInvocationAccess().getActual_parameterNumericExpressionParserRuleCall_2_1_0());
					}
					lv_actual_parameter_5_0=ruleNumericExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInvocationRule());
						}
						set(
							$current,
							"actual_parameter",
							lv_actual_parameter_5_0,
							"com.multitude.aadl.bless.BLESS.NumericExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getInvocationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleActualParameter
entryRuleActualParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActualParameterRule()); }
	iv_ruleActualParameter=ruleActualParameter
	{ $current=$iv_ruleActualParameter.current; }
	EOF;

// Rule ActualParameter
ruleActualParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_formal_0_0=RULE_ID
				{
					newLeafNode(lv_formal_0_0, grammarAccess.getActualParameterAccess().getFormalIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActualParameterRule());
					}
					setWithLastConsumed(
						$current,
						"formal",
						lv_formal_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getActualParameterAccess().getColonKeyword_1());
		}
		(
			(
				lv_actual_2_0=RULE_ID
				{
					newLeafNode(lv_actual_2_0, grammarAccess.getActualParameterAccess().getActualIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActualParameterRule());
					}
					setWithLastConsumed(
						$current,
						"actual",
						lv_actual_2_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableList
entryRuleVariableList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableListRule()); }
	iv_ruleVariableList=ruleVariableList
	{ $current=$iv_ruleVariableList.current; }
	EOF;

// Rule VariableList
ruleVariableList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableListAccess().getFirstVariableParserRuleCall_0_0());
				}
				lv_first_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableListRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"com.multitude.aadl.bless.BLESS.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_comma_1_0=','
					{
						newLeafNode(lv_comma_1_0, grammarAccess.getVariableListAccess().getCommaCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableListRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_1_0 != null, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableListAccess().getParameterVariableParserRuleCall_1_1_0());
					}
					lv_parameter_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableListRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_2_0,
							"com.multitude.aadl.bless.BLESS.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getVariableListAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableListAccess().getParameterVariableParserRuleCall_1_2_1_0());
						}
						lv_parameter_4_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableListRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_4_0,
								"com.multitude.aadl.bless.BLESS.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleAssertionFunctionValue
entryRuleAssertionFunctionValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionFunctionValueRule()); }
	iv_ruleAssertionFunctionValue=ruleAssertionFunctionValue
	{ $current=$iv_ruleAssertionFunctionValue.current; }
	EOF;

// Rule AssertionFunctionValue
ruleAssertionFunctionValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionFunctionValueAccess().getCexpConditionalAssertionFunctionParserRuleCall_0_0());
				}
				lv_cexp_0_0=ruleConditionalAssertionFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionFunctionValueRule());
					}
					set(
						$current,
						"cexp",
						lv_cexp_0_0,
						"com.multitude.aadl.bless.BLESS.ConditionalAssertionFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionFunctionValueAccess().getPexpAssertionNumericExpressionParserRuleCall_1_0());
				}
				lv_pexp_1_0=ruleAssertionNumericExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionFunctionValueRule());
					}
					set(
						$current,
						"pexp",
						lv_pexp_1_0,
						"com.multitude.aadl.bless.BLESS.AssertionNumericExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConditionalAssertionFunction
entryRuleConditionalAssertionFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalAssertionFunctionRule()); }
	iv_ruleConditionalAssertionFunction=ruleConditionalAssertionFunction
	{ $current=$iv_ruleConditionalAssertionFunction.current; }
	EOF;

// Rule ConditionalAssertionFunction
ruleConditionalAssertionFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalAssertionFunctionAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalAssertionFunctionAccess().getCvpConditionValuePairParserRuleCall_1_0());
				}
				lv_cvp_1_0=ruleConditionValuePair
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalAssertionFunctionRule());
					}
					add(
						$current,
						"cvp",
						lv_cvp_1_0,
						"com.multitude.aadl.bless.BLESS.ConditionValuePair");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionalAssertionFunctionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalAssertionFunctionAccess().getCvpConditionValuePairParserRuleCall_2_1_0());
					}
					lv_cvp_3_0=ruleConditionValuePair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalAssertionFunctionRule());
						}
						add(
							$current,
							"cvp",
							lv_cvp_3_0,
							"com.multitude.aadl.bless.BLESS.ConditionValuePair");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalAssertionFunctionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleConditionValuePair
entryRuleConditionValuePair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionValuePairRule()); }
	iv_ruleConditionValuePair=ruleConditionValuePair
	{ $current=$iv_ruleConditionValuePair.current; }
	EOF;

// Rule ConditionValuePair
ruleConditionValuePair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionValuePairAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionValuePairAccess().getConditionPredicateParserRuleCall_1_0());
				}
				lv_condition_1_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionValuePairRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')->'
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionValuePairAccess().getRightParenthesisHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionValuePairAccess().getExpressionAssertionNumericExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleAssertionNumericExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionValuePairRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"com.multitude.aadl.bless.BLESS.AssertionNumericExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssertionEnumeration
entryRuleAssertionEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionEnumerationRule()); }
	iv_ruleAssertionEnumeration=ruleAssertionEnumeration
	{ $current=$iv_ruleAssertionEnumeration.current; }
	EOF;

// Rule AssertionEnumeration
ruleAssertionEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssertionEnumerationAccess().getPredInvocationParserRuleCall_0_0());
				}
				lv_pred_0_0=ruleInvocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssertionEnumerationRule());
					}
					set(
						$current,
						"pred",
						lv_pred_0_0,
						"com.multitude.aadl.bless.BLESS.Invocation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssertionEnumerationAccess().getPairEnumerationPairParserRuleCall_1_0_0());
					}
					lv_pair_1_0=ruleEnumerationPair
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssertionEnumerationRule());
						}
						add(
							$current,
							"pair",
							lv_pair_1_0,
							"com.multitude.aadl.bless.BLESS.EnumerationPair");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getAssertionEnumerationAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionEnumerationAccess().getPairEnumerationPairParserRuleCall_1_1_1_0());
						}
						lv_pair_3_0=ruleEnumerationPair
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionEnumerationRule());
							}
							add(
								$current,
								"pair",
								lv_pair_3_0,
								"com.multitude.aadl.bless.BLESS.EnumerationPair");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleEnumerationPair
entryRuleEnumerationPair returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationPairRule()); }
	iv_ruleEnumerationPair=ruleEnumerationPair
	{ $current=$iv_ruleEnumerationPair.current; }
	EOF;

// Rule EnumerationPair
ruleEnumerationPair returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_enumeration_literal_0_0=RULE_ID
				{
					newLeafNode(lv_enumeration_literal_0_0, grammarAccess.getEnumerationPairAccess().getEnumeration_literalIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationPairRule());
					}
					setWithLastConsumed(
						$current,
						"enumeration_literal",
						lv_enumeration_literal_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationPairAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationPairAccess().getPredicatePredicateParserRuleCall_2_0());
				}
				lv_predicate_2_0=rulePredicate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationPairRule());
					}
					set(
						$current,
						"predicate",
						lv_predicate_2_0,
						"com.multitude.aadl.bless.BLESS.Predicate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeLibrary
entryRuleTypeLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLibraryRule()); }
	iv_ruleTypeLibrary=ruleTypeLibrary
	{ $current=$iv_ruleTypeLibrary.current; }
	EOF;

// Rule TypeLibrary
ruleTypeLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTypeLibraryAccess().getDecsTypeDeclarationParserRuleCall_0());
			}
			lv_decs_0_0=ruleTypeDeclaration
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTypeLibraryRule());
				}
				add(
					$current,
					"decs",
					lv_decs_0_0,
					"com.multitude.aadl.bless.BLESS.TypeDeclaration");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_2='is'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"com.multitude.aadl.bless.BLESS.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeOrReference
entryRuleTypeOrReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeOrReferenceRule()); }
	iv_ruleTypeOrReference=ruleTypeOrReference
	{ $current=$iv_ruleTypeOrReference.current; }
	EOF;

// Rule TypeOrReference
ruleTypeOrReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeOrReferenceAccess().getTyTypeParserRuleCall_0_0());
				}
				lv_ty_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeOrReferenceRule());
					}
					set(
						$current,
						"ty",
						lv_ty_0_0,
						"com.multitude.aadl.bless.BLESS.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeOrReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTypeOrReferenceAccess().getRefTypeDeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	iv_ruleBooleanType=ruleBooleanType
	{ $current=$iv_ruleBooleanType.current; }
	EOF;

// Rule BooleanType
ruleBooleanType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_b_0_0='boolean'
			{
				newLeafNode(lv_b_0_0, grammarAccess.getBooleanTypeAccess().getBBooleanKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanTypeRule());
				}
				setWithLastConsumed($current, "b", lv_b_0_0, "boolean");
			}
		)
	)
;

// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	iv_ruleStringType=ruleStringType
	{ $current=$iv_ruleStringType.current; }
	EOF;

// Rule StringType
ruleStringType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_s_0_0='string'
			{
				newLeafNode(lv_s_0_0, grammarAccess.getStringTypeAccess().getSStringKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringTypeRule());
				}
				setWithLastConsumed($current, "s", lv_s_0_0, "string");
			}
		)
	)
;

// Entry rule entryRuleNullType
entryRuleNullType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullTypeRule()); }
	iv_ruleNullType=ruleNullType
	{ $current=$iv_ruleNullType.current; }
	EOF;

// Rule NullType
ruleNullType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_n_0_0='null'
			{
				newLeafNode(lv_n_0_0, grammarAccess.getNullTypeAccess().getNNullKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNullTypeRule());
				}
				setWithLastConsumed($current, "n", lv_n_0_0, "null");
			}
		)
	)
;

// Entry rule entryRuleEnumerationType
entryRuleEnumerationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationTypeRule()); }
	iv_ruleEnumerationType=ruleEnumerationType
	{ $current=$iv_ruleEnumerationType.current; }
	EOF;

// Rule EnumerationType
ruleEnumerationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enumeration'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationTypeAccess().getEnumerationKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_defining_enumeration_literal_2_0=RULE_ID
				{
					newLeafNode(lv_defining_enumeration_literal_2_0, grammarAccess.getEnumerationTypeAccess().getDefining_enumeration_literalIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumerationTypeRule());
					}
					addWithLastConsumed(
						$current,
						"defining_enumeration_literal",
						lv_defining_enumeration_literal_2_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumerationTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleQuantityType
entryRuleQuantityType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantityTypeRule()); }
	iv_ruleQuantityType=ruleQuantityType
	{ $current=$iv_ruleQuantityType.current; }
	EOF;

// Rule QuantityType
ruleQuantityType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='quantity'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuantityTypeAccess().getQuantityKeyword_0());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityTypeRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getQuantityTypeAccess().getUnitUnitNameCrossReference_1_0_0());
					}
				)
			)
			    |
			(
				(
					lv_scalar_2_0='scalar'
					{
						newLeafNode(lv_scalar_2_0, grammarAccess.getQuantityTypeAccess().getScalarScalarKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityTypeRule());
						}
						setWithLastConsumed($current, "scalar", lv_scalar_2_0, "scalar");
					}
				)
			)
			    |
			(
				(
					lv_whole_3_0='whole'
					{
						newLeafNode(lv_whole_3_0, grammarAccess.getQuantityTypeAccess().getWholeWholeKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityTypeRule());
						}
						setWithLastConsumed($current, "whole", lv_whole_3_0, "whole");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleANumber
entryRuleANumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getANumberRule()); }
	iv_ruleANumber=ruleANumber
	{ $current=$iv_ruleANumber.current; }
	EOF;

// Rule ANumber
ruleANumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_lit_0_0=RULE_NUMBER
				{
					newLeafNode(lv_lit_0_0, grammarAccess.getANumberAccess().getLitNUMBERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getANumberRule());
					}
					setWithLastConsumed(
						$current,
						"lit",
						lv_lit_0_0,
						"com.multitude.aadl.bless.BLESS.NUMBER");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getANumberAccess().getPropertyPropertyReferenceParserRuleCall_1_0());
				}
				lv_property_1_0=rulePropertyReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getANumberRule());
					}
					set(
						$current,
						"property",
						lv_property_1_0,
						"com.multitude.aadl.bless.BLESS.PropertyReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getANumberRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getANumberAccess().getPropertyConstantPropertyConstantCrossReference_2_0());
				}
				ruleQCLREF
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayType
entryRuleArrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_ruleArrayType=ruleArrayType
	{ $current=$iv_ruleArrayType.current; }
	EOF;

// Rule ArrayType
ruleArrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getArrayKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getArray_rangesArrayRangeListParserRuleCall_2_0());
				}
				lv_array_ranges_2_0=ruleArrayRangeList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"array_ranges",
						lv_array_ranges_2_0,
						"com.multitude.aadl.bless.BLESS.ArrayRangeList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_3());
		}
		otherlv_4='of'
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayTypeAccess().getOfKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getTypTypeOrReferenceParserRuleCall_5_0());
				}
				lv_typ_5_0=ruleTypeOrReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"typ",
						lv_typ_5_0,
						"com.multitude.aadl.bless.BLESS.TypeOrReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayRangeList
entryRuleArrayRangeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRangeListRule()); }
	iv_ruleArrayRangeList=ruleArrayRangeList
	{ $current=$iv_ruleArrayRangeList.current; }
	EOF;

// Rule ArrayRangeList
ruleArrayRangeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayRangeListAccess().getRangeArrayRangeParserRuleCall_0_0());
				}
				lv_range_0_0=ruleArrayRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRangeListRule());
					}
					add(
						$current,
						"range",
						lv_range_0_0,
						"com.multitude.aadl.bless.BLESS.ArrayRange");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_comma_1_0=','
					{
						newLeafNode(lv_comma_1_0, grammarAccess.getArrayRangeListAccess().getCommaCommaKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArrayRangeListRule());
						}
						setWithLastConsumed($current, "comma", lv_comma_1_0 != null, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayRangeListAccess().getRangeArrayRangeParserRuleCall_1_1_0());
					}
					lv_range_2_0=ruleArrayRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayRangeListRule());
						}
						add(
							$current,
							"range",
							lv_range_2_0,
							"com.multitude.aadl.bless.BLESS.ArrayRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getArrayRangeListAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArrayRangeListAccess().getRangeArrayRangeParserRuleCall_1_2_1_0());
						}
						lv_range_4_0=ruleArrayRange
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArrayRangeListRule());
							}
							add(
								$current,
								"range",
								lv_range_4_0,
								"com.multitude.aadl.bless.BLESS.ArrayRange");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	iv_ruleArrayRange=ruleArrayRange
	{ $current=$iv_ruleArrayRange.current; }
	EOF;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayRangeAccess().getLbANumberParserRuleCall_0_0());
				}
				lv_lb_0_0=ruleANumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRangeRule());
					}
					set(
						$current,
						"lb",
						lv_lb_0_0,
						"com.multitude.aadl.bless.BLESS.ANumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_DOTDOT_1=RULE_DOTDOT
			{
				newLeafNode(this_DOTDOT_1, grammarAccess.getArrayRangeAccess().getDOTDOTTerminalRuleCall_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayRangeAccess().getUbANumberParserRuleCall_1_1_0());
					}
					lv_ub_2_0=ruleANumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayRangeRule());
						}
						set(
							$current,
							"ub",
							lv_ub_2_0,
							"com.multitude.aadl.bless.BLESS.ANumber");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleRecordType
entryRuleRecordType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordTypeRule()); }
	iv_ruleRecordType=ruleRecordType
	{ $current=$iv_ruleRecordType.current; }
	EOF;

// Rule RecordType
ruleRecordType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_record_0_0='record'
					{
						newLeafNode(lv_record_0_0, grammarAccess.getRecordTypeAccess().getRecordRecordKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRecordTypeRule());
						}
						setWithLastConsumed($current, "record", lv_record_0_0 != null, "record");
					}
				)
			)
			    |
			(
				(
					lv_variant_1_0='variant'
					{
						newLeafNode(lv_variant_1_0, grammarAccess.getRecordTypeAccess().getVariantVariantKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRecordTypeRule());
						}
						setWithLastConsumed($current, "variant", lv_variant_1_0 != null, "variant");
					}
				)
			)
			    |
			(
				(
					lv_variant_2_0='union'
					{
						newLeafNode(lv_variant_2_0, grammarAccess.getRecordTypeAccess().getVariantUnionKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRecordTypeRule());
						}
						setWithLastConsumed($current, "variant", lv_variant_2_0 != null, "union");
					}
				)
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getRecordTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordTypeAccess().getFieldsRecordFieldParserRuleCall_2_0());
				}
				lv_fields_4_0=ruleRecordField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordTypeRule());
					}
					add(
						$current,
						"fields",
						lv_fields_4_0,
						"com.multitude.aadl.bless.BLESS.RecordField");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRecordTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRecordField
entryRuleRecordField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecordFieldRule()); }
	iv_ruleRecordField=ruleRecordField
	{ $current=$iv_ruleRecordField.current; }
	EOF;

// Rule RecordField
ruleRecordField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_label_0_0=RULE_ID
				{
					newLeafNode(lv_label_0_0, grammarAccess.getRecordFieldAccess().getLabelIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecordFieldRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_0_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecordFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecordFieldAccess().getTypTypeOrReferenceParserRuleCall_2_0());
				}
				lv_typ_2_0=ruleTypeOrReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecordFieldRule());
					}
					set(
						$current,
						"typ",
						lv_typ_2_0,
						"com.multitude.aadl.bless.BLESS.TypeOrReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePropertyReference
entryRulePropertyReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyReferenceRule()); }
	iv_rulePropertyReference=rulePropertyReference
	{ $current=$iv_rulePropertyReference.current; }
	EOF;

// Rule PropertyReference
rulePropertyReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='#'
			{
				newLeafNode(otherlv_0, grammarAccess.getPropertyReferenceAccess().getNumberSignKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getPnamePropertyCrossReference_0_1_0());
					}
					ruleQCLREF
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getFieldPropertyFieldParserRuleCall_0_2_0());
					}
					lv_field_2_0=rulePropertyField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
						}
						add(
							$current,
							"field",
							lv_field_2_0,
							"com.multitude.aadl.bless.BLESS.PropertyField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			(
				(
					lv_self_3_0='self'
					{
						newLeafNode(lv_self_3_0, grammarAccess.getPropertyReferenceAccess().getSelfSelfKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyReferenceRule());
						}
						setWithLastConsumed($current, "self", lv_self_3_0 != null, "self");
					}
				)
			)
			otherlv_4='#'
			{
				newLeafNode(otherlv_4, grammarAccess.getPropertyReferenceAccess().getNumberSignKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getSpnamePropertyCrossReference_1_2_0());
					}
					ruleQCLREF
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getFieldPropertyFieldParserRuleCall_1_3_0());
					}
					lv_field_6_0=rulePropertyField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
						}
						add(
							$current,
							"field",
							lv_field_6_0,
							"com.multitude.aadl.bless.BLESS.PropertyField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getComponentComponentClassifierCrossReference_2_0_0());
					}
					ruleQCREF
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='#'
			{
				newLeafNode(otherlv_8, grammarAccess.getPropertyReferenceAccess().getNumberSignKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyReferenceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getCpnamePropertyCrossReference_2_2_0());
					}
					ruleQCLREF
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertyReferenceAccess().getFieldPropertyFieldParserRuleCall_2_3_0());
					}
					lv_field_10_0=rulePropertyField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
						}
						add(
							$current,
							"field",
							lv_field_10_0,
							"com.multitude.aadl.bless.BLESS.PropertyField");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
	)
;

// Entry rule entryRulePropertyField
entryRulePropertyField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyFieldRule()); }
	iv_rulePropertyField=rulePropertyField
	{ $current=$iv_rulePropertyField.current; }
	EOF;

// Rule PropertyField
rulePropertyField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getPropertyFieldAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					(
						lv_index_1_0=RULE_NUMBER
						{
							newLeafNode(lv_index_1_0, grammarAccess.getPropertyFieldAccess().getIndexNUMBERTerminalRuleCall_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyFieldRule());
							}
							setWithLastConsumed(
								$current,
								"index",
								lv_index_1_0,
								"com.multitude.aadl.bless.BLESS.NUMBER");
						}
					)
				)
				    |
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyFieldRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getPropertyFieldAccess().getVariableVariableCrossReference_0_1_1_0());
						}
					)
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getPropertyFieldAccess().getRightSquareBracketKeyword_0_2());
			}
		)
		    |
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getPropertyFieldAccess().getFullStopKeyword_1_0());
			}
			(
				(
					(
						lv_pf_5_0=RULE_ID
						{
							newLeafNode(lv_pf_5_0, grammarAccess.getPropertyFieldAccess().getPfIDTerminalRuleCall_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyFieldRule());
							}
							setWithLastConsumed(
								$current,
								"pf",
								lv_pf_5_0,
								"com.multitude.aadl.bless.BLESS.ID");
						}
					)
				)
				    |
				(
					(
						lv_upper_6_0='upper_bound'
						{
							newLeafNode(lv_upper_6_0, grammarAccess.getPropertyFieldAccess().getUpperUpper_boundKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyFieldRule());
							}
							setWithLastConsumed($current, "upper", lv_upper_6_0, "upper_bound");
						}
					)
				)
				    |
				(
					(
						lv_lower_7_0='lower_bound'
						{
							newLeafNode(lv_lower_7_0, grammarAccess.getPropertyFieldAccess().getLowerLower_boundKeyword_1_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyFieldRule());
							}
							setWithLastConsumed($current, "lower", lv_lower_7_0, "lower_bound");
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleUnitName
entryRuleUnitName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitNameRule()); }
	iv_ruleUnitName=ruleUnitName
	{ $current=$iv_ruleUnitName.current; }
	EOF;

// Rule UnitName
ruleUnitName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='<'
			{
				newLeafNode(otherlv_0, grammarAccess.getUnitNameAccess().getLessThanSignKeyword_0_0());
			}
			(
				(
					lv_longname_1_0=RULE_ID
					{
						newLeafNode(lv_longname_1_0, grammarAccess.getUnitNameAccess().getLongnameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitNameRule());
						}
						addWithLastConsumed(
							$current,
							"longname",
							lv_longname_1_0,
							"com.multitude.aadl.bless.BLESS.ID");
					}
				)
			)+
			otherlv_2='>'
			{
				newLeafNode(otherlv_2, grammarAccess.getUnitNameAccess().getGreaterThanSignKeyword_0_2());
			}
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getUnitNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnitNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleUnitFormula
entryRuleUnitFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitFormulaRule()); }
	iv_ruleUnitFormula=ruleUnitFormula
	{ $current=$iv_ruleUnitFormula.current; }
	EOF;

// Rule UnitFormula
ruleUnitFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitFormulaRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getUnitFormulaAccess().getTopUnitNameCrossReference_0_0_0());
					}
				)
			)+
			(
				(
					(
						lv_slash_1_0='/'
						{
							newLeafNode(lv_slash_1_0, grammarAccess.getUnitFormulaAccess().getSlashSolidusKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnitFormulaRule());
							}
							setWithLastConsumed($current, "slash", lv_slash_1_0 != null, "/");
						}
					)
				)
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getUnitFormulaRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getUnitFormulaAccess().getBottomUnitNameCrossReference_0_1_1_0());
						}
					)
				)+
			)?
		)
		    |
		(
			(
				(
					lv_slash_3_0='/'
					{
						newLeafNode(lv_slash_3_0, grammarAccess.getUnitFormulaAccess().getSlashSolidusKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitFormulaRule());
						}
						setWithLastConsumed($current, "slash", lv_slash_3_0 != null, "/");
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitFormulaRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getUnitFormulaAccess().getBottomUnitNameCrossReference_1_1_0());
					}
				)
			)+
		)
	)
;

// Entry rule entryRuleUnitDeclaration
entryRuleUnitDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitDeclarationRule()); }
	iv_ruleUnitDeclaration=ruleUnitDeclaration
	{ $current=$iv_ruleUnitDeclaration.current; }
	EOF;

// Rule UnitDeclaration
ruleUnitDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnitDeclarationAccess().getRootDeclarationParserRuleCall_0());
		}
		this_RootDeclaration_0=ruleRootDeclaration
		{
			$current = $this_RootDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnitDeclarationAccess().getUnitExtensionParserRuleCall_1());
		}
		this_UnitExtension_1=ruleUnitExtension
		{
			$current = $this_UnitExtension_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRootDeclaration
entryRuleRootDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootDeclarationRule()); }
	iv_ruleRootDeclaration=ruleRootDeclaration
	{ $current=$iv_ruleRootDeclaration.current; }
	EOF;

// Rule RootDeclaration
ruleRootDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_base_0_0='base'
					{
						newLeafNode(lv_base_0_0, grammarAccess.getRootDeclarationAccess().getBaseBaseKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRootDeclarationRule());
						}
						setWithLastConsumed($current, "base", lv_base_0_0 != null, "base");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getRootDeclarationAccess().getFormulaUnitFormulaParserRuleCall_0_1_0());
					}
					lv_formula_1_0=ruleUnitFormula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRootDeclarationRule());
						}
						set(
							$current,
							"formula",
							lv_formula_1_0,
							"com.multitude.aadl.bless.BLESS.UnitFormula");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getRootDeclarationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_kindWords_3_0=RULE_ID
				{
					newLeafNode(lv_kindWords_3_0, grammarAccess.getRootDeclarationAccess().getKindWordsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRootDeclarationRule());
					}
					addWithLastConsumed(
						$current,
						"kindWords",
						lv_kindWords_3_0,
						"com.multitude.aadl.bless.BLESS.ID");
				}
			)
		)+
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getRootDeclarationAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRootDeclarationAccess().getUnitNameUnitNameParserRuleCall_4_0());
				}
				lv_unitName_5_0=ruleUnitName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootDeclarationRule());
					}
					set(
						$current,
						"unitName",
						lv_unitName_5_0,
						"com.multitude.aadl.bless.BLESS.UnitName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRootDeclarationAccess().getFactorsUnitFactorParserRuleCall_5_0());
				}
				lv_factors_6_0=ruleUnitFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootDeclarationRule());
					}
					add(
						$current,
						"factors",
						lv_factors_6_0,
						"com.multitude.aadl.bless.BLESS.UnitFactor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getRootDeclarationAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleUnitExtension
entryRuleUnitExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitExtensionRule()); }
	iv_ruleUnitExtension=ruleUnitExtension
	{ $current=$iv_ruleUnitExtension.current; }
	EOF;

// Rule UnitExtension
ruleUnitExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extension'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnitExtensionAccess().getExtensionKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnitExtensionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getUnitExtensionAccess().getRootUnitNameCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitExtensionAccess().getFactorsUnitFactorParserRuleCall_2_0());
				}
				lv_factors_2_0=ruleUnitFactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitExtensionRule());
					}
					add(
						$current,
						"factors",
						lv_factors_2_0,
						"com.multitude.aadl.bless.BLESS.UnitFactor");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getUnitExtensionAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleMulDiv
entryRuleMulDiv returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMulDivRule()); }
	iv_ruleMulDiv=ruleMulDiv
	{ $current=$iv_ruleMulDiv.current.getText(); }
	EOF;

// Rule MulDiv
ruleMulDiv returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulDivAccess().getTIMESParserRuleCall_0());
		}
		this_TIMES_0=ruleTIMES
		{
			$current.merge(this_TIMES_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMulDivAccess().getSolidusKeyword_1());
		}
	)
;

// Entry rule entryRuleUnitFactor
entryRuleUnitFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitFactorRule()); }
	iv_ruleUnitFactor=ruleUnitFactor
	{ $current=$iv_ruleUnitFactor.current; }
	EOF;

// Rule UnitFactor
ruleUnitFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getUnitFactorAccess().getCommaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitFactorAccess().getUnitUnitNameParserRuleCall_1_0());
				}
				lv_unit_1_0=ruleUnitName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitFactorRule());
					}
					set(
						$current,
						"unit",
						lv_unit_1_0,
						"com.multitude.aadl.bless.BLESS.UnitName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitFactorAccess().getOpMulDivParserRuleCall_2_0());
				}
				lv_op_2_0=ruleMulDiv
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitFactorRule());
					}
					set(
						$current,
						"op",
						lv_op_2_0,
						"com.multitude.aadl.bless.BLESS.MulDiv");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitFactorAccess().getFactorPositiveNumberParserRuleCall_3_0());
				}
				lv_factor_3_0=rulePositiveNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitFactorRule());
					}
					set(
						$current,
						"factor",
						lv_factor_3_0,
						"com.multitude.aadl.bless.BLESS.PositiveNumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuantity
entryRuleQuantity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantityRule()); }
	iv_ruleQuantity=ruleQuantity
	{ $current=$iv_ruleQuantity.current; }
	EOF;

// Rule Quantity
ruleQuantity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantityAccess().getNumberANumberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleANumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantityRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"com.multitude.aadl.bless.BLESS.ANumber");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getQuantityAccess().getUnitUnitNameCrossReference_1_0_0());
					}
				)
			)
			    |
			(
				(
					lv_scalar_2_0='scalar'
					{
						newLeafNode(lv_scalar_2_0, grammarAccess.getQuantityAccess().getScalarScalarKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityRule());
						}
						setWithLastConsumed($current, "scalar", lv_scalar_2_0, "scalar");
					}
				)
			)
			    |
			(
				(
					lv_whole_3_0='whole'
					{
						newLeafNode(lv_whole_3_0, grammarAccess.getQuantityAccess().getWholeWholeKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantityRule());
						}
						setWithLastConsumed($current, "whole", lv_whole_3_0, "whole");
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePositiveNumber
entryRulePositiveNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPositiveNumberRule()); }
	iv_rulePositiveNumber=rulePositiveNumber
	{ $current=$iv_rulePositiveNumber.current.getText(); }
	EOF;

// Rule PositiveNumber
rulePositiveNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_NUMBER_0=RULE_NUMBER
	{
		$current.merge(this_NUMBER_0);
	}
	{
		newLeafNode(this_NUMBER_0, grammarAccess.getPositiveNumberAccess().getNUMBERTerminalRuleCall());
	}
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getEnumerationTypeParserRuleCall_0());
		}
		this_EnumerationType_0=ruleEnumerationType
		{
			$current = $this_EnumerationType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getQuantityTypeParserRuleCall_1());
		}
		this_QuantityType_1=ruleQuantityType
		{
			$current = $this_QuantityType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getArrayTypeParserRuleCall_2());
		}
		this_ArrayType_2=ruleArrayType
		{
			$current = $this_ArrayType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getRecordTypeParserRuleCall_3());
		}
		this_RecordType_3=ruleRecordType
		{
			$current = $this_RecordType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBooleanTypeParserRuleCall_4());
		}
		this_BooleanType_4=ruleBooleanType
		{
			$current = $this_BooleanType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getStringTypeParserRuleCall_5());
		}
		this_StringType_5=ruleStringType
		{
			$current = $this_StringType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getNullTypeParserRuleCall_6());
		}
		this_NullType_6=ruleNullType
		{
			$current = $this_NullType_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQCLREF
entryRuleQCLREF returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQCLREFRule()); }
	iv_ruleQCLREF=ruleQCLREF
	{ $current=$iv_ruleQCLREF.current.getText(); }
	EOF;

// Rule QCLREF
ruleQCLREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_0());
		}
		kw='::'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQCLREFAccess().getColonColonKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQCLREFAccess().getIDTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQCREFRule()); }
	iv_ruleQCREF=ruleQCREF
	{ $current=$iv_ruleQCREF.current.getText(); }
	EOF;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1());
			}
		)*
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0());
			}
			this_ID_4=RULE_ID
			{
				$current.merge(this_ID_4);
			}
			{
				newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleTIMES
entryRuleTIMES returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTIMESRule()); }
	iv_ruleTIMES=ruleTIMES
	{ $current=$iv_ruleTIMES.current.getText(); }
	EOF;

// Rule TIMES
ruleTIMES returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='*'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTIMESAccess().getAsteriskKeyword());
	}
;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

fragment RULE_DIGIT : '0'..'9';

RULE_NUMBER : '-'? RULE_DIGIT+ ('.' RULE_DIGIT+ ('e' '-'? RULE_DIGIT+)?)? ('i' '-'? RULE_DIGIT+ ('.' RULE_DIGIT+ ('e' '-'? RULE_DIGIT+)?)?)?;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"';

RULE_ID : RULE_LETTER ('_'? (RULE_LETTER|'0'..'9'))*;

RULE_DOTDOT : '..';

RULE_COMMADOT : ',.';

RULE_DOTCOMMA : '.,';

RULE_COMMACOMMA : ',,';
