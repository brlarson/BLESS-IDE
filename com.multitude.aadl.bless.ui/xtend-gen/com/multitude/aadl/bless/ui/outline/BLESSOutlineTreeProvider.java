/**
 * (C) Multitude Corporation 2020
 * generated by Xtext 2.20.0
 * from BLESS.xtext, by BRL
 */
package com.multitude.aadl.bless.ui.outline;

import com.google.inject.Inject;
import com.multitude.aadl.bless.bLESS.ActionSubclause;
import com.multitude.aadl.bless.bLESS.ArrayType;
import com.multitude.aadl.bless.bLESS.AssertClause;
import com.multitude.aadl.bless.bLESS.Assertion;
import com.multitude.aadl.bless.bLESS.AssertionLibrary;
import com.multitude.aadl.bless.bLESS.BLESSSubclause;
import com.multitude.aadl.bless.bLESS.BehaviorActions;
import com.multitude.aadl.bless.bLESS.BehaviorState;
import com.multitude.aadl.bless.bLESS.BehaviorTransition;
import com.multitude.aadl.bless.bLESS.BooleanType;
import com.multitude.aadl.bless.bLESS.ConditionValuePair;
import com.multitude.aadl.bless.bLESS.ConditionalAssertionFunction;
import com.multitude.aadl.bless.bLESS.DispatchCondition;
import com.multitude.aadl.bless.bLESS.EnumerationType;
import com.multitude.aadl.bless.bLESS.ExecuteCondition;
import com.multitude.aadl.bless.bLESS.GhostVariable;
import com.multitude.aadl.bless.bLESS.GhostVariables;
import com.multitude.aadl.bless.bLESS.InternalCondition;
import com.multitude.aadl.bless.bLESS.InvariantClause;
import com.multitude.aadl.bless.bLESS.ModeCondition;
import com.multitude.aadl.bless.bLESS.NamedAssertion;
import com.multitude.aadl.bless.bLESS.NamelessAssertion;
import com.multitude.aadl.bless.bLESS.NamelessEnumeration;
import com.multitude.aadl.bless.bLESS.NamelessFunction;
import com.multitude.aadl.bless.bLESS.QuantityType;
import com.multitude.aadl.bless.bLESS.RecordField;
import com.multitude.aadl.bless.bLESS.RecordType;
import com.multitude.aadl.bless.bLESS.RootDeclaration;
import com.multitude.aadl.bless.bLESS.StatesSection;
import com.multitude.aadl.bless.bLESS.StringType;
import com.multitude.aadl.bless.bLESS.ThrowsClause;
import com.multitude.aadl.bless.bLESS.Transitions;
import com.multitude.aadl.bless.bLESS.Type;
import com.multitude.aadl.bless.bLESS.TypeDeclaration;
import com.multitude.aadl.bless.bLESS.TypeLibrary;
import com.multitude.aadl.bless.bLESS.TypeOrReference;
import com.multitude.aadl.bless.bLESS.UnitDeclaration;
import com.multitude.aadl.bless.bLESS.UnitExtension;
import com.multitude.aadl.bless.bLESS.UnitFactor;
import com.multitude.aadl.bless.bLESS.UnitFormula;
import com.multitude.aadl.bless.bLESS.UnitLibrary;
import com.multitude.aadl.bless.bLESS.UnitName;
import com.multitude.aadl.bless.bLESS.Variable;
import com.multitude.aadl.bless.bLESS.VariableDeclaration;
import com.multitude.aadl.bless.bLESS.VariableList;
import com.multitude.aadl.bless.bLESS.VariablesSection;
import com.multitude.aadl.bless.util.TypeUtil;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.BackgroundOutlineTreeProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.AnnexSubclause;
import org.osate.aadl2.DefaultAnnexLibrary;
import org.osate.aadl2.DefaultAnnexSubclause;

@SuppressWarnings("all")
public class BLESSOutlineTreeProvider extends BackgroundOutlineTreeProvider {
  @Inject
  @Extension
  private TypeUtil _typeUtil;

  @Override
  public void internalCreateChildren(final IOutlineNode parentNode, final EObject modelElement) {
    final IOutlineNode p = parentNode;
    if ((modelElement instanceof DefaultAnnexLibrary)) {
      final AnnexLibrary o = ((DefaultAnnexLibrary) modelElement).getParsedAnnexLibrary();
      if ((o instanceof TypeLibrary)) {
        final Consumer<TypeDeclaration> _function = (TypeDeclaration udec) -> {
          this.createNode(p, udec);
        };
        ((TypeLibrary) o).getDecs().forEach(_function);
      } else {
        if ((o instanceof UnitLibrary)) {
          final Consumer<UnitDeclaration> _function_1 = (UnitDeclaration udec) -> {
            this.createNode(p, udec);
          };
          ((UnitLibrary) o).getUnitDeclarations().forEach(_function_1);
        } else {
          if ((o instanceof AssertionLibrary)) {
            GhostVariables _ghosts = ((AssertionLibrary) o).getGhosts();
            boolean _tripleNotEquals = (_ghosts != null);
            if (_tripleNotEquals) {
              this.createNode(parentNode, ((AssertionLibrary) o).getGhosts());
            }
            final Consumer<NamedAssertion> _function_2 = (NamedAssertion a) -> {
              this.createNode(parentNode, a);
            };
            ((AssertionLibrary) o).getAssertion_list().forEach(_function_2);
          }
        }
      }
    } else {
      if ((modelElement instanceof DefaultAnnexSubclause)) {
        final AnnexSubclause o_1 = ((DefaultAnnexSubclause) modelElement).getParsedAnnexSubclause();
        if ((o_1 instanceof ActionSubclause)) {
          final ActionSubclause a = ((ActionSubclause) o_1);
          ThrowsClause _throws_clause = a.getThrows_clause();
          boolean _tripleNotEquals_1 = (_throws_clause != null);
          if (_tripleNotEquals_1) {
            this.createNode(parentNode, a.getThrows_clause());
          }
          AssertClause _assert_clause = a.getAssert_clause();
          boolean _tripleNotEquals_2 = (_assert_clause != null);
          if (_tripleNotEquals_2) {
            this.createNode(parentNode, a.getAssert_clause());
          }
          Assertion _invariant = a.getInvariant();
          boolean _tripleNotEquals_3 = (_invariant != null);
          if (_tripleNotEquals_3) {
            this.createNode(parentNode, a.getInvariant());
          }
          Assertion _precondition = a.getPrecondition();
          boolean _tripleNotEquals_4 = (_precondition != null);
          if (_tripleNotEquals_4) {
            this.createNode(parentNode, a.getPrecondition());
          }
          Assertion _postcondition = a.getPostcondition();
          boolean _tripleNotEquals_5 = (_postcondition != null);
          if (_tripleNotEquals_5) {
            this.createNode(parentNode, a.getPostcondition());
          }
          Assertion _invariant_1 = a.getInvariant();
          boolean _tripleNotEquals_6 = (_invariant_1 != null);
          if (_tripleNotEquals_6) {
            this.createNode(parentNode, a.getInvariant());
          }
          this.createNode(parentNode, a.getElq());
        } else {
          if ((o_1 instanceof BLESSSubclause)) {
            final BLESSSubclause b = ((BLESSSubclause) o_1);
            AssertClause _assert_clause_1 = b.getAssert_clause();
            boolean _tripleNotEquals_7 = (_assert_clause_1 != null);
            if (_tripleNotEquals_7) {
              this.createNode(parentNode, b.getAssert_clause());
            }
            InvariantClause _invariant_2 = b.getInvariant();
            boolean _tripleNotEquals_8 = (_invariant_2 != null);
            if (_tripleNotEquals_8) {
              this.createNode(parentNode, b.getInvariant());
            }
            VariablesSection _variables = b.getVariables();
            boolean _tripleNotEquals_9 = (_variables != null);
            if (_tripleNotEquals_9) {
              this.createNode(parentNode, b.getVariables());
            }
            StatesSection _statesSection = b.getStatesSection();
            boolean _tripleNotEquals_10 = (_statesSection != null);
            if (_tripleNotEquals_10) {
              this.createNode(parentNode, b.getStatesSection());
            }
            Transitions _transitions = b.getTransitions();
            boolean _tripleNotEquals_11 = (_transitions != null);
            if (_tripleNotEquals_11) {
              this.createNode(parentNode, b.getTransitions());
            }
          }
        }
      } else {
        if ((modelElement instanceof TypeDeclaration)) {
          this.createNode(p, ((TypeDeclaration) modelElement).getType());
        } else {
          if ((modelElement instanceof ArrayType)) {
            final ArrayType at = ((ArrayType) modelElement);
            TypeOrReference _typ = at.getTyp();
            boolean _tripleNotEquals_12 = (_typ != null);
            if (_tripleNotEquals_12) {
              Type _ty = at.getTyp().getTy();
              boolean _tripleNotEquals_13 = (_ty != null);
              if (_tripleNotEquals_13) {
                this.createNode(p, at.getTyp().getTy());
              } else {
                TypeDeclaration _ref = at.getTyp().getRef();
                boolean _tripleNotEquals_14 = (_ref != null);
                if (_tripleNotEquals_14) {
                  this.createNode(p, at.getTyp().getRef());
                }
              }
            }
          } else {
            if ((modelElement instanceof RecordType)) {
              final Consumer<RecordField> _function_3 = (RecordField rf) -> {
                this.createNode(p, rf);
              };
              ((RecordType) modelElement).getFields().forEach(_function_3);
            } else {
              if ((modelElement instanceof RecordField)) {
                this.createNode(p, ((RecordField) modelElement).getTyp());
              } else {
                if ((modelElement instanceof GhostVariables)) {
                  final Consumer<GhostVariable> _function_4 = (GhostVariable g) -> {
                    this.createNode(p, g);
                  };
                  ((GhostVariables) modelElement).getGv().forEach(_function_4);
                } else {
                  if ((modelElement instanceof AssertClause)) {
                    final AssertClause c = ((AssertClause) modelElement);
                    EList<NamedAssertion> _assertions = c.getAssertions();
                    for (final NamedAssertion assn : _assertions) {
                      this.createNode(p, assn);
                    }
                  } else {
                    if ((modelElement instanceof InvariantClause)) {
                      Assertion _inv = ((InvariantClause) modelElement).getInv();
                      boolean _tripleNotEquals_15 = (_inv != null);
                      if (_tripleNotEquals_15) {
                        this.createNode(p, ((InvariantClause) modelElement).getInv());
                      } else {
                        if ((modelElement instanceof VariablesSection)) {
                          EList<VariableDeclaration> _behavior_variables = ((VariablesSection) modelElement).getBehavior_variables();
                          for (final VariableDeclaration v : _behavior_variables) {
                            this.createNode(p, v);
                          }
                        } else {
                          if ((modelElement instanceof StatesSection)) {
                            EList<BehaviorState> _states = ((StatesSection) modelElement).getStates();
                            for (final BehaviorState s : _states) {
                              this.createNode(p, s);
                            }
                          } else {
                            if ((modelElement instanceof Transitions)) {
                              EList<BehaviorTransition> _bt = ((Transitions) modelElement).getBt();
                              for (final BehaviorTransition t : _bt) {
                                this.createNode(p, t);
                              }
                            } else {
                              if ((modelElement instanceof BehaviorTransition)) {
                                final BehaviorTransition c_1 = ((BehaviorTransition) modelElement);
                                BehaviorActions _actions = c_1.getActions();
                                boolean _tripleNotEquals_16 = (_actions != null);
                                if (_tripleNotEquals_16) {
                                  this.createNode(p, c_1.getActions());
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  @Override
  public Object getText(final Object modelElement) {
    String _xifexpression = null;
    if ((modelElement instanceof RootDeclaration)) {
      String _xblockexpression = null;
      {
        final RootDeclaration rd = ((RootDeclaration) modelElement);
        String _xifexpression_1 = null;
        UnitName _unitName = rd.getUnitName();
        boolean _tripleEquals = (_unitName == null);
        if (_tripleEquals) {
          String _string = rd.toString();
          _xifexpression_1 = ("null root unit name for " + _string);
        } else {
          Object _xifexpression_2 = null;
          boolean _isBase = rd.isBase();
          if (_isBase) {
            _xifexpression_2 = "base";
          } else {
            _xifexpression_2 = this.getText(rd.getFormula());
          }
          String _plus = (_xifexpression_2 + " [");
          String _join = IterableExtensions.join(rd.getKindWords(), " ");
          String _plus_1 = (_plus + _join);
          String _plus_2 = (_plus_1 + "] ");
          String _xifexpression_3 = null;
          if (((rd.getUnitName().getLongname() != null) && (rd.getUnitName().getLongname().size() > 0))) {
            final Function1<String, CharSequence> _function = (String it) -> {
              return it;
            };
            String _join_1 = IterableExtensions.<String>join(rd.getUnitName().getLongname(), " ", _function);
            String _plus_3 = ("<" + _join_1);
            _xifexpression_3 = (_plus_3 + "> ");
          } else {
            _xifexpression_3 = "";
          }
          String _plus_4 = (_plus_2 + _xifexpression_3);
          String _suffix = this.getSuffix(rd.getUnitName().getName());
          _xifexpression_1 = (_plus_4 + _suffix);
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      if ((modelElement instanceof UnitFormula)) {
        String _xblockexpression_1 = null;
        {
          final UnitFormula form = ((UnitFormula) modelElement);
          final Function1<UnitName, CharSequence> _function = (UnitName u) -> {
            return this.getSuffix(u.getName());
          };
          final String top = IterableExtensions.<UnitName>join(form.getTop(), " ", _function);
          final Function1<UnitName, CharSequence> _function_1 = (UnitName u) -> {
            String _suffix = this.getSuffix(u.getName());
            return (_suffix + " ");
          };
          final String bottom = IterableExtensions.<UnitName>join(form.getBottom(), " ", _function_1);
          String _xifexpression_2 = null;
          boolean _isSlash = form.isSlash();
          if (_isSlash) {
            _xifexpression_2 = ((top + " / ") + bottom);
          } else {
            _xifexpression_2 = (top + bottom);
          }
          _xblockexpression_1 = _xifexpression_2;
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        String _xifexpression_2 = null;
        if ((modelElement instanceof UnitFactor)) {
          String _xblockexpression_2 = null;
          {
            final UnitFactor uf = ((UnitFactor) modelElement);
            String _xifexpression_3 = null;
            UnitName _unit = null;
            if (uf!=null) {
              _unit=uf.getUnit();
            }
            EList<String> _longname = null;
            if (_unit!=null) {
              _longname=_unit.getLongname();
            }
            int _size = _longname.size();
            boolean _greaterThan = (_size > 0);
            if (_greaterThan) {
              UnitName _unit_1 = null;
              if (uf!=null) {
                _unit_1=uf.getUnit();
              }
              EList<String> _longname_1 = null;
              if (_unit_1!=null) {
                _longname_1=_unit_1.getLongname();
              }
              String _join = null;
              if (_longname_1!=null) {
                final Function1<String, CharSequence> _function = (String it) -> {
                  return it;
                };
                _join=IterableExtensions.<String>join(_longname_1, " ", _function);
              }
              String _plus = ("<" + _join);
              _xifexpression_3 = (_plus + "> ");
            } else {
              _xifexpression_3 = "";
            }
            UnitName _unit_2 = null;
            if (uf!=null) {
              _unit_2=uf.getUnit();
            }
            String _name = null;
            if (_unit_2!=null) {
              _name=_unit_2.getName();
            }
            String _suffix = this.getSuffix(_name);
            String _plus_1 = (_xifexpression_3 + _suffix);
            String _plus_2 = (_plus_1 + " ");
            String _op = null;
            if (uf!=null) {
              _op=uf.getOp();
            }
            String _plus_3 = (_plus_2 + _op);
            String _plus_4 = (_plus_3 + 
              " ");
            String _factor = null;
            if (uf!=null) {
              _factor=uf.getFactor();
            }
            _xblockexpression_2 = (_plus_4 + _factor);
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          String _xifexpression_3 = null;
          if ((modelElement instanceof UnitExtension)) {
            String _suffix = this.getSuffix(((UnitExtension) modelElement).getRoot().getName());
            _xifexpression_3 = ("extension " + _suffix);
          } else {
            String _xifexpression_4 = null;
            if ((modelElement instanceof TypeDeclaration)) {
              String _suffix_1 = this.getSuffix(((TypeDeclaration) modelElement).getName());
              _xifexpression_4 = ("type " + _suffix_1);
            } else {
              String _xifexpression_5 = null;
              if ((modelElement instanceof BooleanType)) {
                _xifexpression_5 = "boolean";
              } else {
                String _xifexpression_6 = null;
                if ((modelElement instanceof StringType)) {
                  _xifexpression_6 = "string";
                } else {
                  String _xifexpression_7 = null;
                  if ((modelElement instanceof RecordType)) {
                    String _xblockexpression_3 = null;
                    {
                      final RecordType ty = ((RecordType) modelElement);
                      String _xifexpression_8 = null;
                      boolean _isRecord = ty.isRecord();
                      if (_isRecord) {
                        _xifexpression_8 = "record";
                      } else {
                        _xifexpression_8 = "";
                      }
                      String _xifexpression_9 = null;
                      boolean _isVariant = ty.isVariant();
                      if (_isVariant) {
                        _xifexpression_9 = "variant";
                      } else {
                        _xifexpression_9 = "";
                      }
                      _xblockexpression_3 = (_xifexpression_8 + _xifexpression_9);
                    }
                    _xifexpression_7 = _xblockexpression_3;
                  } else {
                    String _xifexpression_8 = null;
                    if ((modelElement instanceof RecordField)) {
                      String _xblockexpression_4 = null;
                      {
                        final RecordField rf = ((RecordField) modelElement);
                        String _label = rf.getLabel();
                        String _plus = (_label + ":");
                        String _typeString = this._typeUtil.typeString(rf.getTyp());
                        _xblockexpression_4 = (_plus + _typeString);
                      }
                      _xifexpression_8 = _xblockexpression_4;
                    } else {
                      String _xifexpression_9 = null;
                      if ((modelElement instanceof EnumerationType)) {
                        _xifexpression_9 = "enumeration";
                      } else {
                        String _xifexpression_10 = null;
                        if ((modelElement instanceof QuantityType)) {
                          _xifexpression_10 = this._typeUtil.typeString(((QuantityType) modelElement));
                        } else {
                          String _xifexpression_11 = null;
                          if ((modelElement instanceof ArrayType)) {
                            _xifexpression_11 = this._typeUtil.typeString(((ArrayType) modelElement));
                          } else {
                            String _xifexpression_12 = null;
                            if ((modelElement instanceof Assertion)) {
                              String _xblockexpression_5 = null;
                              {
                                final Assertion a = ((Assertion) modelElement);
                                String _xifexpression_13 = null;
                                NamedAssertion _namedassertion = a.getNamedassertion();
                                boolean _tripleNotEquals = (_namedassertion != null);
                                if (_tripleNotEquals) {
                                  String _name = a.getNamedassertion().getName();
                                  String _plus = ("<<" + _name);
                                  _xifexpression_13 = (_plus + ">>");
                                } else {
                                  String _xifexpression_14 = null;
                                  NamelessAssertion _namelessassertion = a.getNamelessassertion();
                                  boolean _tripleNotEquals_1 = (_namelessassertion != null);
                                  if (_tripleNotEquals_1) {
                                    _xifexpression_14 = "<< >>";
                                  } else {
                                    String _xifexpression_15 = null;
                                    NamelessFunction _namelessfunction = a.getNamelessfunction();
                                    boolean _tripleNotEquals_2 = (_namelessfunction != null);
                                    if (_tripleNotEquals_2) {
                                      _xifexpression_15 = "<< := >>";
                                    } else {
                                      String _xifexpression_16 = null;
                                      NamelessEnumeration _namelessenumeration = a.getNamelessenumeration();
                                      boolean _tripleNotEquals_3 = (_namelessenumeration != null);
                                      if (_tripleNotEquals_3) {
                                        _xifexpression_16 = "<< +=> >> ";
                                      }
                                      _xifexpression_15 = _xifexpression_16;
                                    }
                                    _xifexpression_14 = _xifexpression_15;
                                  }
                                  _xifexpression_13 = _xifexpression_14;
                                }
                                _xblockexpression_5 = _xifexpression_13;
                              }
                              _xifexpression_12 = _xblockexpression_5;
                            } else {
                              String _xifexpression_13 = null;
                              if ((modelElement instanceof GhostVariables)) {
                                _xifexpression_13 = "ghost variables";
                              } else {
                                String _xifexpression_14 = null;
                                if ((modelElement instanceof GhostVariable)) {
                                  String _xblockexpression_6 = null;
                                  {
                                    final GhostVariable gv = ((GhostVariable) modelElement);
                                    String _name = gv.getName();
                                    String _plus = ("def " + _name);
                                    String _plus_1 = (_plus + " ");
                                    String _typeString = this._typeUtil.typeString(gv.getTod());
                                    _xblockexpression_6 = (_plus_1 + _typeString);
                                  }
                                  _xifexpression_14 = _xblockexpression_6;
                                } else {
                                  String _xifexpression_15 = null;
                                  if ((modelElement instanceof TypeOrReference)) {
                                    String _xblockexpression_7 = null;
                                    {
                                      final TypeOrReference tod = ((TypeOrReference) modelElement);
                                      TypeDeclaration _ref = tod.getRef();
                                      boolean _tripleNotEquals = (_ref != null);
                                      if (_tripleNotEquals) {
                                        tod.getRef().getName();
                                      }
                                      String _xifexpression_16 = null;
                                      Type _ty = tod.getTy();
                                      boolean _tripleNotEquals_1 = (_ty != null);
                                      if (_tripleNotEquals_1) {
                                        _xifexpression_16 = tod.getTy().toString();
                                      }
                                      _xblockexpression_7 = _xifexpression_16;
                                    }
                                    _xifexpression_15 = _xblockexpression_7;
                                  } else {
                                    String _xifexpression_16 = null;
                                    if ((modelElement instanceof NamedAssertion)) {
                                      String _name = ((NamedAssertion) modelElement).getName();
                                      _xifexpression_16 = (_name + " :");
                                    } else {
                                      String _xifexpression_17 = null;
                                      if ((modelElement instanceof NamelessAssertion)) {
                                        _xifexpression_17 = ":";
                                      } else {
                                        String _xifexpression_18 = null;
                                        if ((modelElement instanceof NamelessFunction)) {
                                          _xifexpression_18 = ":=";
                                        } else {
                                          String _xifexpression_19 = null;
                                          if ((modelElement instanceof NamelessEnumeration)) {
                                            _xifexpression_19 = "+=>";
                                          } else {
                                            String _xifexpression_20 = null;
                                            if ((modelElement instanceof ConditionalAssertionFunction)) {
                                              _xifexpression_20 = "[  ]";
                                            } else {
                                              String _xifexpression_21 = null;
                                              if ((modelElement instanceof ConditionValuePair)) {
                                                _xifexpression_21 = "->";
                                              } else {
                                                String _xifexpression_22 = null;
                                                if ((modelElement instanceof VariableList)) {
                                                  _xifexpression_22 = ",";
                                                } else {
                                                  String _xifexpression_23 = null;
                                                  if ((modelElement instanceof AssertClause)) {
                                                    _xifexpression_23 = "assert";
                                                  } else {
                                                    String _xifexpression_24 = null;
                                                    if ((modelElement instanceof InvariantClause)) {
                                                      _xifexpression_24 = "invariant";
                                                    } else {
                                                      String _xifexpression_25 = null;
                                                      if ((modelElement instanceof VariablesSection)) {
                                                        _xifexpression_25 = "variables";
                                                      } else {
                                                        String _xifexpression_26 = null;
                                                        if ((modelElement instanceof StatesSection)) {
                                                          _xifexpression_26 = "states";
                                                        } else {
                                                          String _xifexpression_27 = null;
                                                          if ((modelElement instanceof Transitions)) {
                                                            _xifexpression_27 = "transitions";
                                                          } else {
                                                            String _xifexpression_28 = null;
                                                            if ((modelElement instanceof BehaviorTransition)) {
                                                              String _xblockexpression_8 = null;
                                                              {
                                                                final BehaviorTransition c = ((BehaviorTransition) modelElement);
                                                                String _name_1 = null;
                                                                if (c!=null) {
                                                                  _name_1=c.getName();
                                                                }
                                                                String _plus = (_name_1 + ": ");
                                                                final Function1<BehaviorState, String> _function = (BehaviorState s) -> {
                                                                  return s.getName();
                                                                };
                                                                String _join = IterableExtensions.join(ListExtensions.<BehaviorState, String>map(c.getSources(), _function), ", ");
                                                                String _plus_1 = (_plus + _join);
                                                                String _plus_2 = (_plus_1 + " -[ ]-> ");
                                                                BehaviorState _destination = null;
                                                                if (c!=null) {
                                                                  _destination=c.getDestination();
                                                                }
                                                                String _name_2 = null;
                                                                if (_destination!=null) {
                                                                  _name_2=_destination.getName();
                                                                }
                                                                _xblockexpression_8 = (_plus_2 + _name_2);
                                                              }
                                                              _xifexpression_28 = _xblockexpression_8;
                                                            } else {
                                                              String _xifexpression_29 = null;
                                                              if ((modelElement instanceof BehaviorActions)) {
                                                                _xifexpression_29 = "actions";
                                                              } else {
                                                                String _xifexpression_30 = null;
                                                                if ((modelElement instanceof VariableDeclaration)) {
                                                                  String _xblockexpression_9 = null;
                                                                  {
                                                                    final VariableDeclaration c = ((VariableDeclaration) modelElement);
                                                                    String _name_1 = c.getVariable().getName();
                                                                    String _plus = (_name_1 + "~");
                                                                    String _xifexpression_31 = null;
                                                                    Variable _variable = c.getVariable();
                                                                    TypeOrReference _tod = null;
                                                                    if (_variable!=null) {
                                                                      _tod=_variable.getTod();
                                                                    }
                                                                    Type _ty = null;
                                                                    if (_tod!=null) {
                                                                      _ty=_tod.getTy();
                                                                    }
                                                                    boolean _tripleEquals = (_ty == null);
                                                                    if (_tripleEquals) {
                                                                      Variable _variable_1 = c.getVariable();
                                                                      TypeOrReference _tod_1 = null;
                                                                      if (_variable_1!=null) {
                                                                        _tod_1=_variable_1.getTod();
                                                                      }
                                                                      TypeDeclaration _ref = null;
                                                                      if (_tod_1!=null) {
                                                                        _ref=_tod_1.getRef();
                                                                      }
                                                                      String _name_2 = null;
                                                                      if (_ref!=null) {
                                                                        _name_2=_ref.getName();
                                                                      }
                                                                      _xifexpression_31 = _name_2;
                                                                    } else {
                                                                      Variable _variable_2 = c.getVariable();
                                                                      TypeOrReference _tod_2 = null;
                                                                      if (_variable_2!=null) {
                                                                        _tod_2=_variable_2.getTod();
                                                                      }
                                                                      Type _ty_1 = null;
                                                                      if (_tod_2!=null) {
                                                                        _ty_1=_tod_2.getTy();
                                                                      }
                                                                      String _typeString = null;
                                                                      if (_ty_1!=null) {
                                                                        _typeString=this._typeUtil.typeString(_ty_1);
                                                                      }
                                                                      _xifexpression_31 = _typeString;
                                                                    }
                                                                    String _plus_1 = (_plus + _xifexpression_31);
                                                                    String _plus_2 = (_plus_1 + " ");
                                                                    String _xifexpression_32 = null;
                                                                    boolean _isNonvolatile = c.isNonvolatile();
                                                                    if (_isNonvolatile) {
                                                                      _xifexpression_32 = "nonvolatile ";
                                                                    } else {
                                                                      _xifexpression_32 = "";
                                                                    }
                                                                    String _plus_3 = (_plus_2 + _xifexpression_32);
                                                                    String _xifexpression_33 = null;
                                                                    boolean _isShared = c.isShared();
                                                                    if (_isShared) {
                                                                      _xifexpression_33 = "shared ";
                                                                    } else {
                                                                      _xifexpression_33 = "";
                                                                    }
                                                                    String _plus_4 = (_plus_3 + _xifexpression_33);
                                                                    String _xifexpression_34 = null;
                                                                    boolean _isConstant = c.isConstant();
                                                                    if (_isConstant) {
                                                                      _xifexpression_34 = "constant ";
                                                                    } else {
                                                                      _xifexpression_34 = "";
                                                                    }
                                                                    String _plus_5 = (_plus_4 + _xifexpression_34);
                                                                    String _xifexpression_35 = null;
                                                                    boolean _isSpread = c.isSpread();
                                                                    if (_isSpread) {
                                                                      _xifexpression_35 = "spread ";
                                                                    } else {
                                                                      _xifexpression_35 = "";
                                                                    }
                                                                    String _plus_6 = (_plus_5 + _xifexpression_35);
                                                                    String _xifexpression_36 = null;
                                                                    boolean _isFinal = c.isFinal();
                                                                    if (_isFinal) {
                                                                      _xifexpression_36 = "final";
                                                                    } else {
                                                                      _xifexpression_36 = "";
                                                                    }
                                                                    String _plus_7 = (_plus_6 + _xifexpression_36);
                                                                    String _xifexpression_37 = null;
                                                                    boolean _isAssign = c.isAssign();
                                                                    if (_isAssign) {
                                                                      _xifexpression_37 = ":=";
                                                                    } else {
                                                                      _xifexpression_37 = "";
                                                                    }
                                                                    _xblockexpression_9 = (_plus_7 + _xifexpression_37);
                                                                  }
                                                                  _xifexpression_30 = _xblockexpression_9;
                                                                } else {
                                                                  String _xifexpression_31 = null;
                                                                  if ((modelElement instanceof BehaviorState)) {
                                                                    String _xblockexpression_10 = null;
                                                                    {
                                                                      final BehaviorState bs = ((BehaviorState) modelElement);
                                                                      String _name_1 = bs.getName();
                                                                      String _plus = (_name_1 + " : ");
                                                                      String _xifexpression_32 = null;
                                                                      boolean _isInitial = bs.isInitial();
                                                                      if (_isInitial) {
                                                                        _xifexpression_32 = "initial ";
                                                                      } else {
                                                                        _xifexpression_32 = "";
                                                                      }
                                                                      String _plus_1 = (_plus + _xifexpression_32);
                                                                      String _xifexpression_33 = null;
                                                                      boolean _isComplete = bs.isComplete();
                                                                      if (_isComplete) {
                                                                        _xifexpression_33 = "complete ";
                                                                      } else {
                                                                        _xifexpression_33 = "";
                                                                      }
                                                                      String _plus_2 = (_plus_1 + _xifexpression_33);
                                                                      String _xifexpression_34 = null;
                                                                      boolean _isFinal = bs.isFinal();
                                                                      if (_isFinal) {
                                                                        _xifexpression_34 = "final ";
                                                                      } else {
                                                                        _xifexpression_34 = "";
                                                                      }
                                                                      String _plus_3 = (_plus_2 + _xifexpression_34);
                                                                      _xblockexpression_10 = (_plus_3 + 
                                                                        "state");
                                                                    }
                                                                    _xifexpression_31 = _xblockexpression_10;
                                                                  } else {
                                                                    _xifexpression_31 = modelElement.toString();
                                                                  }
                                                                  _xifexpression_30 = _xifexpression_31;
                                                                }
                                                                _xifexpression_29 = _xifexpression_30;
                                                              }
                                                              _xifexpression_28 = _xifexpression_29;
                                                            }
                                                            _xifexpression_27 = _xifexpression_28;
                                                          }
                                                          _xifexpression_26 = _xifexpression_27;
                                                        }
                                                        _xifexpression_25 = _xifexpression_26;
                                                      }
                                                      _xifexpression_24 = _xifexpression_25;
                                                    }
                                                    _xifexpression_23 = _xifexpression_24;
                                                  }
                                                  _xifexpression_22 = _xifexpression_23;
                                                }
                                                _xifexpression_21 = _xifexpression_22;
                                              }
                                              _xifexpression_20 = _xifexpression_21;
                                            }
                                            _xifexpression_19 = _xifexpression_20;
                                          }
                                          _xifexpression_18 = _xifexpression_19;
                                        }
                                        _xifexpression_17 = _xifexpression_18;
                                      }
                                      _xifexpression_16 = _xifexpression_17;
                                    }
                                    _xifexpression_15 = _xifexpression_16;
                                  }
                                  _xifexpression_14 = _xifexpression_15;
                                }
                                _xifexpression_13 = _xifexpression_14;
                              }
                              _xifexpression_12 = _xifexpression_13;
                            }
                            _xifexpression_11 = _xifexpression_12;
                          }
                          _xifexpression_10 = _xifexpression_11;
                        }
                        _xifexpression_9 = _xifexpression_10;
                      }
                      _xifexpression_8 = _xifexpression_9;
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_5 = _xifexpression_6;
              }
              _xifexpression_4 = _xifexpression_5;
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }

  @Override
  public boolean isLeaf(final EObject modelElement) {
    boolean _xblockexpression = false;
    {
      final EObject o = modelElement;
      boolean _xifexpression = false;
      if ((((((((((((((o instanceof UnitFactor) || (o instanceof RecordField)) || (o instanceof TypeDeclaration)) || (o instanceof Assertion)) || 
        (o instanceof NamedAssertion)) || (o instanceof GhostVariable)) || (o instanceof DispatchCondition)) || 
        (o instanceof ExecuteCondition)) || (o instanceof ModeCondition)) || (o instanceof InternalCondition)) || (o instanceof BehaviorState)) || 
        (o instanceof BehaviorActions)) || (o instanceof VariableDeclaration))) {
        _xifexpression = true;
      } else {
        _xifexpression = false;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public String getSuffix(final String s) {
    String _xblockexpression = null;
    {
      if ((s == null)) {
        return "";
      }
      String _xifexpression = null;
      int _lastIndexOf = s.lastIndexOf(".");
      boolean _greaterThan = (_lastIndexOf > 0);
      if (_greaterThan) {
        _xifexpression = s.substring(s.lastIndexOf("."));
      } else {
        _xifexpression = s;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
