//Slang.stg
group Java;
//these are string templates used to generate Slang text from BLESS ASTs

action_subclause(no_proof,tc,ac,pre,post,inv,elq) ::=
<<
>>


actual_parameter(formal,actual) ::=
  "<formal> : <actual>" 

add(terms) ::=
  "<terms; wrap, separator=\" + \">" 

alternative(gf) ::=
<<    if <gf; separator="\n    else if\n    ">
>>

and(terms) ::=
  "<terms; wrap, separator=\" & \">" 

annex_library_assertion(ghosts,ass) ::=
<<
>>  


annex_subclause_action(sb) ::=
    "annex Action <\n>{**<\n><sb><\n>**};  --end of Action annex<\n>"

array_range(l,r)::="<l>..<r>"

array_range_list(r) ::=
   "<r; separator=\", \">"

array_type(arl,t,at)::=  //at parameter not used in BLESS.stg
  "array[<arl>] of <t>"

assert_clause(a) ::= ""

asserted_action(p,s,q) ::= 
  "<s>"

assertion(a,lv,p)::= ""

assertion_enumeration_pairs(ep) ::=
"+=\> <ep; separator=\", \">"

assertion_enumeration_predicate_invocation(pi) ::=
"+=\> <pi>" 

assertion_function(a,lv,e) ::=
<<\<\<<if(a)><a>:<endif><if(lv)><lv; separator=" "><else> <endif>:= <e>\>\> >>

assignment(nt,eort)::=  
<<<nt> = <eort>
>>

at(p,t) ::= "<p>@<t>"

behavior_state(bsi,i,com,finl,a) ::=
    "<bsi> : <if(i)><i> <endif><if(com)><com> <endif><if(finl)><finl> <endif>state<if(a)><\n>  <a><endif>;"

behavior_time(e,u) ::= "<e><if(u)>_<u><endif>"

behavior_transition(i,pr,ssi,bc,dsi,ba,btq) ::=
<<<if(i)><i><pr>: <endif><ssi; separator=",">-[<bc>]-\><dsi>
<if(ba)>  { <ba; anchor> }<\n><else>  {}<endif> <if(btq)><btq><endif>;<if(btl)>  --end of <btl><endif>
>>

behavior_variable_type(d,t,p,s,con,sp,e,finl,ass) ::=
<<
var <d> : <t> <if(e)>= <e><endif>
>>

bless_property_association(bpa,ass) ::=
  "BLESS::<bpa> =\> \"<ass>\";"   

bless_subclause(n,ac,inv,vs,ss,t) ::=
<<
<ac><inv><vs><ss><t>
>>

boolean()::="boolean"

cand(t) ::= "<t; wrap, separator=\" && \">" 

caret(p,cv) ::= "<p>^<cv>"

case_choice(be,exp) ::= "(<be>) -\> <exp>"

case_expression(cc) ::= "(<cc; wrap, separator=\",\">)"

catch_clause(cct) ::= "catch <cct; separator=\" \">"

catch_clause_term(ei,ba) ::= "(<ei; seperator=\" \">:<ba>)" 

catch_clause_term_all(ba) ::= "(all:<ba>)"

classifier_type(i) ::=
  "classifier (<i; wrap, anchor, separator=\", \">)"   

combinable(op,t,e,r) ::=
  "<op>(<t>,<e>,<r>)"

complex()::="complex"

component_classifier_term(uccr) ::=
  "classifier(<uccr>)"

component_name(ci,imp) ::=
  "<ci; separator=\"::\"><if(imp)>.<imp><endif>"

computation(lb,ub,c) ::=
  "computation(<lb><if(ub)>, <ub><endif>)<if(c)> in binding <c; separator=\" \"><endif>"

concurrent_composition(g) ::=  /
<<<g; anchor, separator="\n">
>>

conditional_assertion_function(cvp) ::=
<<
  (<cvp; wrap, anchor, separator=", ">)
>>

conditional_expression(be,t,f) ::= "(<be> ?? <t> : <f>)"

condition_value_pair(pp,pe) ::= "<pp> -\> <pe>" 

conjunction(bopt) ::=
  "<bopt; separator=\" and \">"

cor(t) ::= "<t; wrap, separator=\" || \">" 

declarator(i,lit) ::=   
  "<i>[<lit; separator=\"][\">]"

declarators(d,ds) ::=
  "<d>,<ds; separator=\",\">"

disjunction(bopt) ::=
  "<bopt; separator=\" or \">"

dispatch_condition(dle) ::=  //dispatch condition for slang
  "<if(dle)><dle><else>true<endif>"

dispatch_trigger(i) ::=  //added for Slang translation
  "api.get_<i>().nonEmpty"

do_until(be,ba,bd,inv) ::=  //changed for Slang <while-stmt> no bound function
<<do { 
  <ba; anchor><if(inv)><\n>  <inv><endif>
while (!(<be>))>>  

elq(v,ba,cc) ::=
<<
<v>
<ba; anchor> >>

enumeration_pair(i,pe) ::=
"<i> -\> <pe>"

enumeration_type(id)::=
<<@enum {
  '<id; separator="\n\'">
  }  
>>

enumeration_value(t,v) ::=
  "<t>.<v>"

event_port_output(o) ::= 
<<api.put_<o>() 
>>

existential_quantification(e,lv2,d2,p2)::=
<<
<e> <lv2>
  <d2> 
  that <p2; anchor> >>

exp(l,r) ::= "<l>**<r>"

false() ::= "false"

formal_actual(f,ap) ::= "<f>:<ap>"  

formal_actual_list(ns) ::= "<ns; separator=\",\">"

formal_assertion_parameter(p,t) ::= "<p>:<t>"

formal_assertion_parameter_list(faps) ::= "<faps; separator=\", \">"

formal_expression_pair(f,a) ::= "<a>"

for_loop(a,lb,ub,ba,inv) ::=  //changed for Slang <for-stmt>
<<for (<a> \<- <lb> to <ub>)
  {
  <ba> 
  <if(inv)><inv>\n<endif>}>>

function_call(f,pl,p) ::= 
<<<f>(<pl>)>>

ghost_variable(id,tod) ::= ""
  
ghost_variables(gv) ::=
<< >>

guarded_action(be,ba) ::= "( <be> )\n  { <ba> }\n"

id_cc_id(fst,snd) ::=
  "<fst>::<snd>"  

id_cc_id_dot_id(fst,snd,thr) ::=
  "<fst>::<snd>.<thr>"  

id_dot_id(fst,snd) ::=
  "<fst>.<snd>" 

iff(l,r) ::= "<l> \<-\> <r>"

implies(s,c) ::= "<s> -\> <c>"

integer()::="integer"

integer_literal(i) ::= "z\"<i>\""

invariant_clause(a) ::=
<<
invariant <a>
>>

index(i) ::=
  "[<i>]"

internal_condition(p) ::=
  "on internal <p; separator=\" or \">"

invocation(i,p) ::=
  "<i>(<p; separator=\", \">)"

in_port_value(pn)::="api.get_<pn>().get"  

in_range(p,ra) ::= "<p> in <ra>"

issue_exception(ex,m) ::=
  "exception <ex> <m>"

local_name(n,imp,pn)::="<n><if(imp)>.<imp><endif>"

logic_variables(t,i) ::= "<i; separator=\",\">:<t>" 

logic_variable_domain(i,l,h,rs) ::=  //make l..h into [l,h], l,,h into (l,h) etc.
"<if({rs.toString().charAt(0)=='.'})>[<else>(<endif><l>,<h>if(rs.toString().charAt(1)=='.')>]<else>)<endif>  "

logic_variable_domain2(i2,p) ::=
"<p>"

l_and(bs) ::= "<bs; wrap, separator=\" & \">"

l_cand(bs) ::= "<bs; wrap, separator=\" && \">"

l_cor(bs) ::= "<bs; wrap, separator=\" || \">"

l_or(bs) ::= "<bs; wrap, separator=\" | \">"

l_xor(bs) ::= "<bs; wrap, separator=\" |^ \">"

mod(l,r) ::= "<l> mod <r>"

mode_condition(tle) ::=
  "on <tle>"

mode_trigger(mt) ::=
  "<mt; separator=\".\">"

multiply(terms) ::=
  "<terms; wrap, separator=\" * \">" 

name(id,index,rec) ::= 
  "<id><if(index)>[<index; separator=\"][\">]<endif><if(rec)>.<rec; separator=\".\"><endif>"

named_assertion(id,pred,formals,tod,functionvalue) ::=
<< >>

named_assertion_enum(id,assertionvariable,enumerationTy,enumeration) ::=
<< >>

nameless_assertion(a) ::= ""

nameless_enumeration(inv) ::= ""

nameless_function(tod,a) ::=
<< >>

name_tick(vn) ::= "<vn>"

natural()::="natural"

not(bt) ::=
  "!<bt>" 

not_equal_relation(lhs,rhs) ::= "<lhs> != <rhs>"

not_paren(bt) ::= "!(<bt>)"  

now() ::= "Art.time()"

numberof(lv,d,pe) ::=
<<
numberof <lv>
  <d> 
  that <pe; anchor> >>

number_type(nr,ud,nw) ::=
  "<nw> <if(nr)>[<nr>]<endif><if(ud)> units <ud><endif>"

number_type_plain(n)::="<n>"

or(terms) ::=
  "<terms; wrap, separator=\" | \">" 

parentheses(be) ::=
  "( <be> )"  

parenthesized_predicate(p) ::= "(<p>)"

partial_name(i,p) ::=
  "<i><if(p)>[<p; separator=\"][\">]<endif>"

port_count(i) ::= "api.<i>.Count()"

port_fresh(i) ::= "api.<i>.Fresh()"

port_input(i,n) ::= 
<<<n> = api.get_<i>.get().value 
>>

port_name(port,index) ::=
  "<port><if(index)>(<index>)<endif>"

port_output(o,be) ::=
<<api.put_<o>(<be>)
>>

port_spec(dpi,io,pt,mpa)::=
  "<dpi>: <io> <pt> <if(mpa)><\n>  { <mpa; separator=\"\n  \">}<endif>;"

port_updated(i) ::= "api.<i>.Updated()"

predicate_invocation(p,ip,a) ::= "<p>(<if(ip)><ip; wrap, separator=\",\"><endif><if(a)><a><endif>)"

priority(num) ::=
  "[<num>]"

procedure_call(p,spb) ::= 
  "<p>(<spb>)"

product(p,lv,d,pe) ::=
<<
<p> <lv>
  <d> 
  of <pe; anchor> >>

property_name(ps,p) ::= "<ps>.<p>"

property_number_type(kind,range,units,designator) ::=
  "<kind> <range><if(units)> <units> <designator><endif>" 

property_reference(component,pname,f) ::= "<if(component)><component>.<endif><pname><f>"

quantified_variables(bv) ::=
<< 
  <bv; anchor, separator="\n">
>>

quantity_type(unit,scalar,whole,lb,ub,step,representation) ::=
<<<if(whole)>Z<else>F32<endif> >>

range(rs,lb,ub)::=  "<lb><rs><ub>"  

range_type(rt)::= 
  "range of <rt>"

rational()::="rational"

real()::="real"

real_literal(r) ::=  "f32\"<r>\""

record_field(df,ptd,t) ::=
    "<df>:<if(t)>list of <endif><ptd>;"

record_term(typeid,prv) ::=
  "[<typeid>: <prv; wrap, separator=\" \">]"

record_type(rf) ::= 
<<record 
  (<rf;anchor, separator="\n">)>>   

record_value(id,v) ::=
  "<id>-\><v>;"

reference_type(i) ::=
  "reference (<i; wrap, anchor, separator=\", \">)"   

relation(r,lhs,rhs) ::= "<lhs> <r> <rhs>"

rem(l,r) ::= "<l> rem <r>"

root_declaration(base,formula,kindWords,unit,factors) ::=
<<
<base><formula> [ <kindWords; separator=" "> ] <unit> <factors; separator=" ">; >>

sequential_composition(f) ::=  // "    <f; separator=\"\n    \">" 
<<<f; anchor, separator="\n">
>>

simultaneous_assignment(l,r) ::=
<<
(<l; separator=","> := <r; separator=",">)  >>

skip() ::= "" 

states_section(bs) ::=
<<
  <bs; separator="\n">
>>

stop() ::= "stop"

string() ::= "string"

subcomponent(i,cc,uccr,ad,aeil,sbpa,sbim)::=
  "<i>: <cc> <uccr><ad><aeil><if(sbpa)>(<sbpa; separator=\",\">)<endif><sbim>;"

subprogram_behavior(ac,p1,p2,elq) ::=
<<
--start of Action annex subclause
<ac><if(p1)><\n>pre <p1><endif><if(p2)><\n>post <p2><endif>
<elq>
--end of Action annex subclause
>>

sum(s,lv,d,pe) ::=
<<
<s> <lv>
  <d> 
  of <pe; anchor> >>

throws_clause(ex) ::=
  "throws <ex; wrap, separator=\" \">"

tick(tp) ::= "\'<tp>"

time()::= "S64"

timeout(bt,p) ::= "timeout_<p; separator=\"_\">_<bt>"

transitions(bt) ::=
<<transitions
  <bt; separator="\n\n">
>>

true() ::= "true"

two_element_expression(op,l,r) ::=
  "<l><op><r>"  

two_element_expression_spaced(op,l,r) ::=
  "<l> <op> <r>"  

type_declaration(id,ty)::=
<<<id>: type <ty>;
>>

type_library(decs) ::= ""
  
ulq(lv,lb,ub,elq) ::=
<<
forall <lv> in ,lb> .. <ub>
  <elq> >>

unary(sym,ex) ::=
  "<sym> <ex>"

unary_paren(sym,ex) ::=
  "<sym>(<ex>)"

unique_component_classifier_reference(p,ii) ::=
  "<p; separator=\".\"><if(ii)>.<ii><endif>"

unit_formula(top,bottom) ::= ""

unit_library(unitDeclarations) ::= ""

unit_name(id,longname) ::= ""

units_declaration(i,ul)::= ""

unit_extension(root,factors) ::= ""

unit_factor(unit,op,factor) ::= ""

units_list(fu,au) ::= ""

units_type(ul)::= ""

universal_quantification(a,lv,d,p)::=
<<
<a> <lv>
  <d> 
  are <p; anchor> >>  

variable(id,tod) ::=
  " <id> : <tod>"

variables(bv) ::=  //changed to generate local variables for threads in Slang
<<
  <bv; separator="\n"> >>

variable_declaration(v,exp,a,nv,sh,c,sp,f) ::=
<<
var <v><if(exp)> = <exp><endif> >>

variable_list(parameter) ::=
<<<parameter; wrap, separator=", "> >>

variant_field(df,ptd,t) ::=
    "<df>:<if(t)>list of <endif><ptd>;"

variant_type(vf)::= 
 <<variant 
  (<vf;anchor, separator="\n">)>>   

when_throw(e,i,m) ::=
  "when (<e>) throw <i> <m>"

while_loop(be,elq,bd,inv) ::=  //changed for Slang <while-stmt> no bound function
<<while (<be>) 
  {<if(inv)> 
  <inv> <endif>
  <elq>
  } >>

xor(terms) ::=
  "<terms; wrap, separator=\" |^ \">" 
